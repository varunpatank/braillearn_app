"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/joi";
exports.ids = ["vendor-chunks/joi"];
exports.modules = {

/***/ "(rsc)/./node_modules/joi/lib/annotate.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/annotate.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {\n    annotations: Symbol(\"annotations\")\n};\nexports.error = function(stripColorCodes) {\n    if (!this._original || typeof this._original !== \"object\") {\n        return this.details[0].message;\n    }\n    const redFgEscape = stripColorCodes ? \"\" : \"\\x1b[31m\";\n    const redBgEscape = stripColorCodes ? \"\" : \"\\x1b[41m\";\n    const endColor = stripColorCodes ? \"\" : \"\\x1b[0m\";\n    const obj = Clone(this._original);\n    for(let i = this.details.length - 1; i >= 0; --i){\n        const pos = i + 1;\n        const error = this.details[i];\n        const path = error.path;\n        let node = obj;\n        for(let j = 0;; ++j){\n            const seg = path[j];\n            if (Common.isSchema(node)) {\n                node = node.clone(); // joi schemas are not cloned by hoek, we have to take this extra step\n            }\n            if (j + 1 < path.length && typeof node[seg] !== \"string\") {\n                node = node[seg];\n            } else {\n                const refAnnotations = node[internals.annotations] || {\n                    errors: {},\n                    missing: {}\n                };\n                node[internals.annotations] = refAnnotations;\n                const cacheKey = seg || error.context.key;\n                if (node[seg] !== undefined) {\n                    refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];\n                    refAnnotations.errors[cacheKey].push(pos);\n                } else {\n                    refAnnotations.missing[cacheKey] = pos;\n                }\n                break;\n            }\n        }\n    }\n    const replacers = {\n        key: /_\\$key\\$_([, \\d]+)_\\$end\\$_\"/g,\n        missing: /\"_\\$miss\\$_([^|]+)\\|(\\d+)_\\$end\\$_\": \"__missing__\"/g,\n        arrayIndex: /\\s*\"_\\$idx\\$_([, \\d]+)_\\$end\\$_\",?\\n(.*)/g,\n        specials: /\"\\[(NaN|Symbol.*|-?Infinity|function.*|\\(.*)]\"/g\n    };\n    let message = internals.safeStringify(obj, 2).replace(replacers.key, ($0, $1)=>`\" ${redFgEscape}[${$1}]${endColor}`).replace(replacers.missing, ($0, $1, $2)=>`${redBgEscape}\"${$1}\"${endColor}${redFgEscape} [${$2}]: -- missing --${endColor}`).replace(replacers.arrayIndex, ($0, $1, $2)=>`\\n${$2} ${redFgEscape}[${$1}]${endColor}`).replace(replacers.specials, ($0, $1)=>$1);\n    message = `${message}\\n${redFgEscape}`;\n    for(let i = 0; i < this.details.length; ++i){\n        const pos = i + 1;\n        message = `${message}\\n[${pos}] ${this.details[i].message}`;\n    }\n    message = message + endColor;\n    return message;\n};\n// Inspired by json-stringify-safe\ninternals.safeStringify = function(obj, spaces) {\n    return JSON.stringify(obj, internals.serializer(), spaces);\n};\ninternals.serializer = function() {\n    const keys = [];\n    const stack = [];\n    const cycleReplacer = (key, value)=>{\n        if (stack[0] === value) {\n            return \"[Circular ~]\";\n        }\n        return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n    };\n    return function(key, value) {\n        if (stack.length > 0) {\n            const thisPos = stack.indexOf(this);\n            if (~thisPos) {\n                stack.length = thisPos + 1;\n                keys.length = thisPos + 1;\n                keys[thisPos] = key;\n            } else {\n                stack.push(this);\n                keys.push(key);\n            }\n            if (~stack.indexOf(value)) {\n                value = cycleReplacer.call(this, key, value);\n            }\n        } else {\n            stack.push(value);\n        }\n        if (value) {\n            const annotations = value[internals.annotations];\n            if (annotations) {\n                if (Array.isArray(value)) {\n                    const annotated = [];\n                    for(let i = 0; i < value.length; ++i){\n                        if (annotations.errors[i]) {\n                            annotated.push(`_$idx$_${annotations.errors[i].sort().join(\", \")}_$end$_`);\n                        }\n                        annotated.push(value[i]);\n                    }\n                    value = annotated;\n                } else {\n                    for(const errorKey in annotations.errors){\n                        value[`${errorKey}_$key$_${annotations.errors[errorKey].sort().join(\", \")}_$end$_`] = value[errorKey];\n                        value[errorKey] = undefined;\n                    }\n                    for(const missingKey in annotations.missing){\n                        value[`_$miss$_${missingKey}|${annotations.missing[missingKey]}_$end$_`] = \"__missing__\";\n                    }\n                }\n                return value;\n            }\n        }\n        if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === \"function\" || typeof value === \"symbol\") {\n            return \"[\" + value.toString() + \"]\";\n        }\n        return value;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/annotate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/base.js":
/*!**************************************!*\
  !*** ./node_modules/joi/lib/base.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"(rsc)/./node_modules/@hapi/hoek/lib/deepEqual.js\");\nconst Merge = __webpack_require__(/*! @hapi/hoek/lib/merge */ \"(rsc)/./node_modules/@hapi/hoek/lib/merge.js\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/joi/lib/cache.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ./compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst Extend = __webpack_require__(/*! ./extend */ \"(rsc)/./node_modules/joi/lib/extend.js\");\nconst Manifest = __webpack_require__(/*! ./manifest */ \"(rsc)/./node_modules/joi/lib/manifest.js\");\nconst Messages = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/joi/lib/messages.js\");\nconst Modify = __webpack_require__(/*! ./modify */ \"(rsc)/./node_modules/joi/lib/modify.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst Trace = __webpack_require__(/*! ./trace */ \"(rsc)/./node_modules/joi/lib/trace.js\");\nconst Validator = __webpack_require__(/*! ./validator */ \"(rsc)/./node_modules/joi/lib/validator.js\");\nconst Values = __webpack_require__(/*! ./values */ \"(rsc)/./node_modules/joi/lib/values.js\");\nconst internals = {};\ninternals.Base = class {\n    constructor(type){\n        // Naming: public, _private, $_extension, $_mutate{action}\n        this.type = type;\n        this.$_root = null;\n        this._definition = {};\n        this._reset();\n    }\n    _reset() {\n        this._ids = new Modify.Ids();\n        this._preferences = null;\n        this._refs = new Ref.Manager();\n        this._cache = null;\n        this._valids = null;\n        this._invalids = null;\n        this._flags = {};\n        this._rules = [];\n        this._singleRules = new Map(); // The rule options passed for non-multi rules\n        this.$_terms = {}; // Hash of arrays of immutable objects (extended by other types)\n        this.$_temp = {\n            ruleset: null,\n            whens: {} // Runtime cache of generated whens\n        };\n    }\n    // Manifest\n    describe() {\n        Assert(typeof Manifest.describe === \"function\", \"Manifest functionality disabled\");\n        return Manifest.describe(this);\n    }\n    // Rules\n    allow(...values) {\n        Common.verifyFlat(values, \"allow\");\n        return this._values(values, \"_valids\");\n    }\n    alter(targets) {\n        Assert(targets && typeof targets === \"object\" && !Array.isArray(targets), \"Invalid targets argument\");\n        Assert(!this._inRuleset(), \"Cannot set alterations inside a ruleset\");\n        const obj = this.clone();\n        obj.$_terms.alterations = obj.$_terms.alterations || [];\n        for(const target in targets){\n            const adjuster = targets[target];\n            Assert(typeof adjuster === \"function\", \"Alteration adjuster for\", target, \"must be a function\");\n            obj.$_terms.alterations.push({\n                target,\n                adjuster\n            });\n        }\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n    artifact(id) {\n        Assert(id !== undefined, \"Artifact cannot be undefined\");\n        Assert(!this._cache, \"Cannot set an artifact with a rule cache\");\n        return this.$_setFlag(\"artifact\", id);\n    }\n    cast(to) {\n        Assert(to === false || typeof to === \"string\", \"Invalid to value\");\n        Assert(to === false || this._definition.cast[to], \"Type\", this.type, \"does not support casting to\", to);\n        return this.$_setFlag(\"cast\", to === false ? undefined : to);\n    }\n    default(value, options) {\n        return this._default(\"default\", value, options);\n    }\n    description(desc) {\n        Assert(desc && typeof desc === \"string\", \"Description must be a non-empty string\");\n        return this.$_setFlag(\"description\", desc);\n    }\n    empty(schema) {\n        const obj = this.clone();\n        if (schema !== undefined) {\n            schema = obj.$_compile(schema, {\n                override: false\n            });\n        }\n        return obj.$_setFlag(\"empty\", schema, {\n            clone: false\n        });\n    }\n    error(err) {\n        Assert(err, \"Missing error\");\n        Assert(err instanceof Error || typeof err === \"function\", \"Must provide a valid Error object or a function\");\n        return this.$_setFlag(\"error\", err);\n    }\n    example(example, options = {}) {\n        Assert(example !== undefined, \"Missing example\");\n        Common.assertOptions(options, [\n            \"override\"\n        ]);\n        return this._inner(\"examples\", example, {\n            single: true,\n            override: options.override\n        });\n    }\n    external(method, description) {\n        if (typeof method === \"object\") {\n            Assert(!description, \"Cannot combine options with description\");\n            description = method.description;\n            method = method.method;\n        }\n        Assert(typeof method === \"function\", \"Method must be a function\");\n        Assert(description === undefined || description && typeof description === \"string\", \"Description must be a non-empty string\");\n        return this._inner(\"externals\", {\n            method,\n            description\n        }, {\n            single: true\n        });\n    }\n    failover(value, options) {\n        return this._default(\"failover\", value, options);\n    }\n    forbidden() {\n        return this.presence(\"forbidden\");\n    }\n    id(id) {\n        if (!id) {\n            return this.$_setFlag(\"id\", undefined);\n        }\n        Assert(typeof id === \"string\", \"id must be a non-empty string\");\n        Assert(/^[^\\.]+$/.test(id), \"id cannot contain period character\");\n        return this.$_setFlag(\"id\", id);\n    }\n    invalid(...values) {\n        return this._values(values, \"_invalids\");\n    }\n    label(name) {\n        Assert(name && typeof name === \"string\", \"Label name must be a non-empty string\");\n        return this.$_setFlag(\"label\", name);\n    }\n    meta(meta) {\n        Assert(meta !== undefined, \"Meta cannot be undefined\");\n        return this._inner(\"metas\", meta, {\n            single: true\n        });\n    }\n    note(...notes) {\n        Assert(notes.length, \"Missing notes\");\n        for (const note of notes){\n            Assert(note && typeof note === \"string\", \"Notes must be non-empty strings\");\n        }\n        return this._inner(\"notes\", notes);\n    }\n    only(mode = true) {\n        Assert(typeof mode === \"boolean\", \"Invalid mode:\", mode);\n        return this.$_setFlag(\"only\", mode);\n    }\n    optional() {\n        return this.presence(\"optional\");\n    }\n    prefs(prefs) {\n        Assert(prefs, \"Missing preferences\");\n        Assert(prefs.context === undefined, \"Cannot override context\");\n        Assert(prefs.externals === undefined, \"Cannot override externals\");\n        Assert(prefs.warnings === undefined, \"Cannot override warnings\");\n        Assert(prefs.debug === undefined, \"Cannot override debug\");\n        Common.checkPreferences(prefs);\n        const obj = this.clone();\n        obj._preferences = Common.preferences(obj._preferences, prefs);\n        return obj;\n    }\n    presence(mode) {\n        Assert([\n            \"optional\",\n            \"required\",\n            \"forbidden\"\n        ].includes(mode), \"Unknown presence mode\", mode);\n        return this.$_setFlag(\"presence\", mode);\n    }\n    raw(enabled = true) {\n        return this.$_setFlag(\"result\", enabled ? \"raw\" : undefined);\n    }\n    result(mode) {\n        Assert([\n            \"raw\",\n            \"strip\"\n        ].includes(mode), \"Unknown result mode\", mode);\n        return this.$_setFlag(\"result\", mode);\n    }\n    required() {\n        return this.presence(\"required\");\n    }\n    strict(enabled) {\n        const obj = this.clone();\n        const convert = enabled === undefined ? false : !enabled;\n        obj._preferences = Common.preferences(obj._preferences, {\n            convert\n        });\n        return obj;\n    }\n    strip(enabled = true) {\n        return this.$_setFlag(\"result\", enabled ? \"strip\" : undefined);\n    }\n    tag(...tags) {\n        Assert(tags.length, \"Missing tags\");\n        for (const tag of tags){\n            Assert(tag && typeof tag === \"string\", \"Tags must be non-empty strings\");\n        }\n        return this._inner(\"tags\", tags);\n    }\n    unit(name) {\n        Assert(name && typeof name === \"string\", \"Unit name must be a non-empty string\");\n        return this.$_setFlag(\"unit\", name);\n    }\n    valid(...values) {\n        Common.verifyFlat(values, \"valid\");\n        const obj = this.allow(...values);\n        obj.$_setFlag(\"only\", !!obj._valids, {\n            clone: false\n        });\n        return obj;\n    }\n    when(condition, options) {\n        const obj = this.clone();\n        if (!obj.$_terms.whens) {\n            obj.$_terms.whens = [];\n        }\n        const when = Compile.when(obj, condition, options);\n        if (![\n            \"any\",\n            \"link\"\n        ].includes(obj.type)) {\n            const conditions = when.is ? [\n                when\n            ] : when.switch;\n            for (const item of conditions){\n                Assert(!item.then || item.then.type === \"any\" || item.then.type === obj.type, \"Cannot combine\", obj.type, \"with\", item.then && item.then.type);\n                Assert(!item.otherwise || item.otherwise.type === \"any\" || item.otherwise.type === obj.type, \"Cannot combine\", obj.type, \"with\", item.otherwise && item.otherwise.type);\n            }\n        }\n        obj.$_terms.whens.push(when);\n        return obj.$_mutateRebuild();\n    }\n    // Helpers\n    cache(cache) {\n        Assert(!this._inRuleset(), \"Cannot set caching inside a ruleset\");\n        Assert(!this._cache, \"Cannot override schema cache\");\n        Assert(this._flags.artifact === undefined, \"Cannot cache a rule with an artifact\");\n        const obj = this.clone();\n        obj._cache = cache || Cache.provider.provision();\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n    clone() {\n        const obj = Object.create(Object.getPrototypeOf(this));\n        return this._assign(obj);\n    }\n    concat(source) {\n        Assert(Common.isSchema(source), \"Invalid schema object\");\n        Assert(this.type === \"any\" || source.type === \"any\" || source.type === this.type, \"Cannot merge type\", this.type, \"with another type:\", source.type);\n        Assert(!this._inRuleset(), \"Cannot concatenate onto a schema with open ruleset\");\n        Assert(!source._inRuleset(), \"Cannot concatenate a schema with open ruleset\");\n        let obj = this.clone();\n        if (this.type === \"any\" && source.type !== \"any\") {\n            // Change obj to match source type\n            const tmpObj = source.clone();\n            for (const key of Object.keys(obj)){\n                if (key !== \"type\") {\n                    tmpObj[key] = obj[key];\n                }\n            }\n            obj = tmpObj;\n        }\n        obj._ids.concat(source._ids);\n        obj._refs.register(source, Ref.toSibling);\n        obj._preferences = obj._preferences ? Common.preferences(obj._preferences, source._preferences) : source._preferences;\n        obj._valids = Values.merge(obj._valids, source._valids, source._invalids);\n        obj._invalids = Values.merge(obj._invalids, source._invalids, source._valids);\n        // Remove unique rules present in source\n        for (const name of source._singleRules.keys()){\n            if (obj._singleRules.has(name)) {\n                obj._rules = obj._rules.filter((target)=>target.keep || target.name !== name);\n                obj._singleRules.delete(name);\n            }\n        }\n        // Rules\n        for (const test of source._rules){\n            if (!source._definition.rules[test.method].multi) {\n                obj._singleRules.set(test.name, test);\n            }\n            obj._rules.push(test);\n        }\n        // Flags\n        if (obj._flags.empty && source._flags.empty) {\n            obj._flags.empty = obj._flags.empty.concat(source._flags.empty);\n            const flags = Object.assign({}, source._flags);\n            delete flags.empty;\n            Merge(obj._flags, flags);\n        } else if (source._flags.empty) {\n            obj._flags.empty = source._flags.empty;\n            const flags = Object.assign({}, source._flags);\n            delete flags.empty;\n            Merge(obj._flags, flags);\n        } else {\n            Merge(obj._flags, source._flags);\n        }\n        // Terms\n        for(const key in source.$_terms){\n            const terms = source.$_terms[key];\n            if (!terms) {\n                if (!obj.$_terms[key]) {\n                    obj.$_terms[key] = terms;\n                }\n                continue;\n            }\n            if (!obj.$_terms[key]) {\n                obj.$_terms[key] = terms.slice();\n                continue;\n            }\n            obj.$_terms[key] = obj.$_terms[key].concat(terms);\n        }\n        // Tracing\n        if (this.$_root._tracer) {\n            this.$_root._tracer._combine(obj, [\n                this,\n                source\n            ]);\n        }\n        // Rebuild\n        return obj.$_mutateRebuild();\n    }\n    extend(options) {\n        Assert(!options.base, \"Cannot extend type with another base\");\n        return Extend.type(this, options);\n    }\n    extract(path) {\n        path = Array.isArray(path) ? path : path.split(\".\");\n        return this._ids.reach(path);\n    }\n    fork(paths, adjuster) {\n        Assert(!this._inRuleset(), \"Cannot fork inside a ruleset\");\n        let obj = this; // eslint-disable-line consistent-this\n        for (let path of [].concat(paths)){\n            path = Array.isArray(path) ? path : path.split(\".\");\n            obj = obj._ids.fork(path, adjuster, obj);\n        }\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n    rule(options) {\n        const def = this._definition;\n        Common.assertOptions(options, Object.keys(def.modifiers));\n        Assert(this.$_temp.ruleset !== false, \"Cannot apply rules to empty ruleset or the last rule added does not support rule properties\");\n        const start = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;\n        Assert(start >= 0 && start < this._rules.length, \"Cannot apply rules to empty ruleset\");\n        const obj = this.clone();\n        for(let i = start; i < obj._rules.length; ++i){\n            const original = obj._rules[i];\n            const rule = Clone(original);\n            for(const name in options){\n                def.modifiers[name](rule, options[name]);\n                Assert(rule.name === original.name, \"Cannot change rule name\");\n            }\n            obj._rules[i] = rule;\n            if (obj._singleRules.get(rule.name) === original) {\n                obj._singleRules.set(rule.name, rule);\n            }\n        }\n        obj.$_temp.ruleset = false;\n        return obj.$_mutateRebuild();\n    }\n    get ruleset() {\n        Assert(!this._inRuleset(), \"Cannot start a new ruleset without closing the previous one\");\n        const obj = this.clone();\n        obj.$_temp.ruleset = obj._rules.length;\n        return obj;\n    }\n    get $() {\n        return this.ruleset;\n    }\n    tailor(targets) {\n        targets = [].concat(targets);\n        Assert(!this._inRuleset(), \"Cannot tailor inside a ruleset\");\n        let obj = this; // eslint-disable-line consistent-this\n        if (this.$_terms.alterations) {\n            for (const { target, adjuster } of this.$_terms.alterations){\n                if (targets.includes(target)) {\n                    obj = adjuster(obj);\n                    Assert(Common.isSchema(obj), \"Alteration adjuster for\", target, \"failed to return a schema object\");\n                }\n            }\n        }\n        obj = obj.$_modify({\n            each: (item)=>item.tailor(targets),\n            ref: false\n        });\n        obj.$_temp.ruleset = false;\n        return obj.$_mutateRebuild();\n    }\n    tracer() {\n        return Trace.location ? Trace.location(this) : this; // $lab:coverage:ignore$\n    }\n    validate(value, options) {\n        return Validator.entry(value, this, options);\n    }\n    validateAsync(value, options) {\n        return Validator.entryAsync(value, this, options);\n    }\n    // Extensions\n    $_addRule(options) {\n        // Normalize rule\n        if (typeof options === \"string\") {\n            options = {\n                name: options\n            };\n        }\n        Assert(options && typeof options === \"object\", \"Invalid options\");\n        Assert(options.name && typeof options.name === \"string\", \"Invalid rule name\");\n        for(const key in options){\n            Assert(key[0] !== \"_\", \"Cannot set private rule properties\");\n        }\n        const rule = Object.assign({}, options); // Shallow cloned\n        rule._resolve = [];\n        rule.method = rule.method || rule.name;\n        const definition = this._definition.rules[rule.method];\n        const args = rule.args;\n        Assert(definition, \"Unknown rule\", rule.method);\n        // Args\n        const obj = this.clone();\n        if (args) {\n            Assert(Object.keys(args).length === 1 || Object.keys(args).length === this._definition.rules[rule.name].args.length, \"Invalid rule definition for\", this.type, rule.name);\n            for(const key in args){\n                let arg = args[key];\n                if (definition.argsByName) {\n                    const resolver = definition.argsByName.get(key);\n                    if (resolver.ref && Common.isResolvable(arg)) {\n                        rule._resolve.push(key);\n                        obj.$_mutateRegister(arg);\n                    } else {\n                        if (resolver.normalize) {\n                            arg = resolver.normalize(arg);\n                            args[key] = arg;\n                        }\n                        if (resolver.assert) {\n                            const error = Common.validateArg(arg, key, resolver);\n                            Assert(!error, error, \"or reference\");\n                        }\n                    }\n                }\n                if (arg === undefined) {\n                    delete args[key];\n                    continue;\n                }\n                args[key] = arg;\n            }\n        }\n        // Unique rules\n        if (!definition.multi) {\n            obj._ruleRemove(rule.name, {\n                clone: false\n            });\n            obj._singleRules.set(rule.name, rule);\n        }\n        if (obj.$_temp.ruleset === false) {\n            obj.$_temp.ruleset = null;\n        }\n        if (definition.priority) {\n            obj._rules.unshift(rule);\n        } else {\n            obj._rules.push(rule);\n        }\n        return obj;\n    }\n    $_compile(schema, options) {\n        return Compile.schema(this.$_root, schema, options);\n    }\n    $_createError(code, value, local, state, prefs, options = {}) {\n        const flags = options.flags !== false ? this._flags : {};\n        const messages = options.messages ? Messages.merge(this._definition.messages, options.messages) : this._definition.messages;\n        return new Errors.Report(code, value, local, flags, messages, state, prefs);\n    }\n    $_getFlag(name) {\n        return this._flags[name];\n    }\n    $_getRule(name) {\n        return this._singleRules.get(name);\n    }\n    $_mapLabels(path) {\n        path = Array.isArray(path) ? path : path.split(\".\");\n        return this._ids.labels(path);\n    }\n    $_match(value, state, prefs, overrides) {\n        prefs = Object.assign({}, prefs); // Shallow cloned\n        prefs.abortEarly = true;\n        prefs._externals = false;\n        state.snapshot();\n        const result = !Validator.validate(value, this, state, prefs, overrides).errors;\n        state.restore();\n        return result;\n    }\n    $_modify(options) {\n        Common.assertOptions(options, [\n            \"each\",\n            \"once\",\n            \"ref\",\n            \"schema\"\n        ]);\n        return Modify.schema(this, options) || this;\n    }\n    $_mutateRebuild() {\n        Assert(!this._inRuleset(), \"Cannot add this rule inside a ruleset\");\n        this._refs.reset();\n        this._ids.reset();\n        const each = (item, { source, name, path, key })=>{\n            const family = this._definition[source][name] && this._definition[source][name].register;\n            if (family !== false) {\n                this.$_mutateRegister(item, {\n                    family,\n                    key\n                });\n            }\n        };\n        this.$_modify({\n            each\n        });\n        if (this._definition.rebuild) {\n            this._definition.rebuild(this);\n        }\n        this.$_temp.ruleset = false;\n        return this;\n    }\n    $_mutateRegister(schema, { family, key } = {}) {\n        this._refs.register(schema, family);\n        this._ids.register(schema, {\n            key\n        });\n    }\n    $_property(name) {\n        return this._definition.properties[name];\n    }\n    $_reach(path) {\n        return this._ids.reach(path);\n    }\n    $_rootReferences() {\n        return this._refs.roots();\n    }\n    $_setFlag(name, value, options = {}) {\n        Assert(name[0] === \"_\" || !this._inRuleset(), \"Cannot set flag inside a ruleset\");\n        const flag = this._definition.flags[name] || {};\n        if (DeepEqual(value, flag.default)) {\n            value = undefined;\n        }\n        if (DeepEqual(value, this._flags[name])) {\n            return this;\n        }\n        const obj = options.clone !== false ? this.clone() : this;\n        if (value !== undefined) {\n            obj._flags[name] = value;\n            obj.$_mutateRegister(value);\n        } else {\n            delete obj._flags[name];\n        }\n        if (name[0] !== \"_\") {\n            obj.$_temp.ruleset = false;\n        }\n        return obj;\n    }\n    $_parent(method, ...args) {\n        return this[method][Common.symbols.parent].call(this, ...args);\n    }\n    $_validate(value, state, prefs) {\n        return Validator.validate(value, this, state, prefs);\n    }\n    // Internals\n    _assign(target) {\n        target.type = this.type;\n        target.$_root = this.$_root;\n        target.$_temp = Object.assign({}, this.$_temp);\n        target.$_temp.whens = {};\n        target._ids = this._ids.clone();\n        target._preferences = this._preferences;\n        target._valids = this._valids && this._valids.clone();\n        target._invalids = this._invalids && this._invalids.clone();\n        target._rules = this._rules.slice();\n        target._singleRules = Clone(this._singleRules, {\n            shallow: true\n        });\n        target._refs = this._refs.clone();\n        target._flags = Object.assign({}, this._flags);\n        target._cache = null;\n        target.$_terms = {};\n        for(const key in this.$_terms){\n            target.$_terms[key] = this.$_terms[key] ? this.$_terms[key].slice() : null;\n        }\n        // Backwards compatibility\n        target.$_super = {};\n        for(const override in this.$_super){\n            target.$_super[override] = this._super[override].bind(target);\n        }\n        return target;\n    }\n    _bare() {\n        const obj = this.clone();\n        obj._reset();\n        const terms = obj._definition.terms;\n        for(const name in terms){\n            const term = terms[name];\n            obj.$_terms[name] = term.init;\n        }\n        return obj.$_mutateRebuild();\n    }\n    _default(flag, value, options = {}) {\n        Common.assertOptions(options, \"literal\");\n        Assert(value !== undefined, \"Missing\", flag, \"value\");\n        Assert(typeof value === \"function\" || !options.literal, \"Only function value supports literal option\");\n        if (typeof value === \"function\" && options.literal) {\n            value = {\n                [Common.symbols.literal]: true,\n                literal: value\n            };\n        }\n        const obj = this.$_setFlag(flag, value);\n        return obj;\n    }\n    _generate(value, state, prefs) {\n        if (!this.$_terms.whens) {\n            return {\n                schema: this\n            };\n        }\n        // Collect matching whens\n        const whens = [];\n        const ids = [];\n        for(let i = 0; i < this.$_terms.whens.length; ++i){\n            const when = this.$_terms.whens[i];\n            if (when.concat) {\n                whens.push(when.concat);\n                ids.push(`${i}.concat`);\n                continue;\n            }\n            const input = when.ref ? when.ref.resolve(value, state, prefs) : value;\n            const tests = when.is ? [\n                when\n            ] : when.switch;\n            const before = ids.length;\n            for(let j = 0; j < tests.length; ++j){\n                const { is, then, otherwise } = tests[j];\n                const baseId = `${i}${when.switch ? \".\" + j : \"\"}`;\n                if (is.$_match(input, state.nest(is, `${baseId}.is`), prefs)) {\n                    if (then) {\n                        const localState = state.localize([\n                            ...state.path,\n                            `${baseId}.then`\n                        ], state.ancestors, state.schemas);\n                        const { schema: generated, id } = then._generate(value, localState, prefs);\n                        whens.push(generated);\n                        ids.push(`${baseId}.then${id ? `(${id})` : \"\"}`);\n                        break;\n                    }\n                } else if (otherwise) {\n                    const localState = state.localize([\n                        ...state.path,\n                        `${baseId}.otherwise`\n                    ], state.ancestors, state.schemas);\n                    const { schema: generated, id } = otherwise._generate(value, localState, prefs);\n                    whens.push(generated);\n                    ids.push(`${baseId}.otherwise${id ? `(${id})` : \"\"}`);\n                    break;\n                }\n            }\n            if (when.break && ids.length > before) {\n                break;\n            }\n        }\n        // Check cache\n        const id = ids.join(\", \");\n        state.mainstay.tracer.debug(state, \"rule\", \"when\", id);\n        if (!id) {\n            return {\n                schema: this\n            };\n        }\n        if (!state.mainstay.tracer.active && this.$_temp.whens[id]) {\n            return {\n                schema: this.$_temp.whens[id],\n                id\n            };\n        }\n        // Generate dynamic schema\n        let obj = this; // eslint-disable-line consistent-this\n        if (this._definition.generate) {\n            obj = this._definition.generate(this, value, state, prefs);\n        }\n        // Apply whens\n        for (const when of whens){\n            obj = obj.concat(when);\n        }\n        // Tracing\n        if (this.$_root._tracer) {\n            this.$_root._tracer._combine(obj, [\n                this,\n                ...whens\n            ]);\n        }\n        // Cache result\n        this.$_temp.whens[id] = obj;\n        return {\n            schema: obj,\n            id\n        };\n    }\n    _inner(type, values, options = {}) {\n        Assert(!this._inRuleset(), `Cannot set ${type} inside a ruleset`);\n        const obj = this.clone();\n        if (!obj.$_terms[type] || options.override) {\n            obj.$_terms[type] = [];\n        }\n        if (options.single) {\n            obj.$_terms[type].push(values);\n        } else {\n            obj.$_terms[type].push(...values);\n        }\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n    _inRuleset() {\n        return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;\n    }\n    _ruleRemove(name, options = {}) {\n        if (!this._singleRules.has(name)) {\n            return this;\n        }\n        const obj = options.clone !== false ? this.clone() : this;\n        obj._singleRules.delete(name);\n        const filtered = [];\n        for(let i = 0; i < obj._rules.length; ++i){\n            const test = obj._rules[i];\n            if (test.name === name && !test.keep) {\n                if (obj._inRuleset() && i < obj.$_temp.ruleset) {\n                    --obj.$_temp.ruleset;\n                }\n                continue;\n            }\n            filtered.push(test);\n        }\n        obj._rules = filtered;\n        return obj;\n    }\n    _values(values, key) {\n        Common.verifyFlat(values, key.slice(1, -1));\n        const obj = this.clone();\n        const override = values[0] === Common.symbols.override;\n        if (override) {\n            values = values.slice(1);\n        }\n        if (!obj[key] && values.length) {\n            obj[key] = new Values();\n        } else if (override) {\n            obj[key] = values.length ? new Values() : null;\n            obj.$_mutateRebuild();\n        }\n        if (!obj[key]) {\n            return obj;\n        }\n        if (override) {\n            obj[key].override();\n        }\n        for (const value of values){\n            Assert(value !== undefined, \"Cannot call allow/valid/invalid with undefined\");\n            Assert(value !== Common.symbols.override, \"Override must be the first value\");\n            const other = key === \"_invalids\" ? \"_valids\" : \"_invalids\";\n            if (obj[other]) {\n                obj[other].remove(value);\n                if (!obj[other].length) {\n                    Assert(key === \"_valids\" || !obj._flags.only, \"Setting invalid value\", value, \"leaves schema rejecting all values due to previous valid rule\");\n                    obj[other] = null;\n                }\n            }\n            obj[key].add(value, obj._refs);\n        }\n        return obj;\n    }\n};\ninternals.Base.prototype[Common.symbols.any] = {\n    version: Common.version,\n    compile: Compile.compile,\n    root: \"$_root\"\n};\ninternals.Base.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects (must be on prototype)\n// Aliases\ninternals.Base.prototype.deny = internals.Base.prototype.invalid;\ninternals.Base.prototype.disallow = internals.Base.prototype.invalid;\ninternals.Base.prototype.equal = internals.Base.prototype.valid;\ninternals.Base.prototype.exist = internals.Base.prototype.required;\ninternals.Base.prototype.not = internals.Base.prototype.invalid;\ninternals.Base.prototype.options = internals.Base.prototype.prefs;\ninternals.Base.prototype.preferences = internals.Base.prototype.prefs;\nmodule.exports = new internals.Base();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/cache.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/cache.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {\n    max: 1000,\n    supported: new Set([\n        \"undefined\",\n        \"boolean\",\n        \"number\",\n        \"string\"\n    ])\n};\nexports.provider = {\n    provision (options) {\n        return new internals.Cache(options);\n    }\n};\n// Least Recently Used (LRU) Cache\ninternals.Cache = class {\n    constructor(options = {}){\n        Common.assertOptions(options, [\n            \"max\"\n        ]);\n        Assert(options.max === undefined || options.max && options.max > 0 && isFinite(options.max), \"Invalid max cache size\");\n        this._max = options.max || internals.max;\n        this._map = new Map(); // Map of nodes by key\n        this._list = new internals.List(); // List of nodes (most recently used in head)\n    }\n    get length() {\n        return this._map.size;\n    }\n    set(key, value) {\n        if (key !== null && !internals.supported.has(typeof key)) {\n            return;\n        }\n        let node = this._map.get(key);\n        if (node) {\n            node.value = value;\n            this._list.first(node);\n            return;\n        }\n        node = this._list.unshift({\n            key,\n            value\n        });\n        this._map.set(key, node);\n        this._compact();\n    }\n    get(key) {\n        const node = this._map.get(key);\n        if (node) {\n            this._list.first(node);\n            return Clone(node.value);\n        }\n    }\n    _compact() {\n        if (this._map.size > this._max) {\n            const node = this._list.pop();\n            this._map.delete(node.key);\n        }\n    }\n};\ninternals.List = class {\n    constructor(){\n        this.tail = null;\n        this.head = null;\n    }\n    unshift(node) {\n        node.next = null;\n        node.prev = this.head;\n        if (this.head) {\n            this.head.next = node;\n        }\n        this.head = node;\n        if (!this.tail) {\n            this.tail = node;\n        }\n        return node;\n    }\n    first(node) {\n        if (node === this.head) {\n            return;\n        }\n        this._remove(node);\n        this.unshift(node);\n    }\n    pop() {\n        return this._remove(this.tail);\n    }\n    _remove(node) {\n        const { next, prev } = node;\n        next.prev = prev;\n        if (prev) {\n            prev.next = next;\n        }\n        if (node === this.tail) {\n            this.tail = next;\n        }\n        node.prev = null;\n        node.next = null;\n        return node;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDO0FBRXRCLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDO0FBR3ZCLE1BQU1HLFlBQVk7SUFDZEMsS0FBSztJQUNMQyxXQUFXLElBQUlDLElBQUk7UUFBQztRQUFhO1FBQVc7UUFBVTtLQUFTO0FBQ25FO0FBR0FDLGdCQUFnQixHQUFHO0lBRWZFLFdBQVVDLE9BQU87UUFFYixPQUFPLElBQUlQLFVBQVVRLEtBQUssQ0FBQ0Q7SUFDL0I7QUFDSjtBQUdBLGtDQUFrQztBQUVsQ1AsVUFBVVEsS0FBSyxHQUFHO0lBRWRDLFlBQVlGLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFFdEJSLE9BQU9XLGFBQWEsQ0FBQ0gsU0FBUztZQUFDO1NBQU07UUFDckNYLE9BQU9XLFFBQVFOLEdBQUcsS0FBS1UsYUFBYUosUUFBUU4sR0FBRyxJQUFJTSxRQUFRTixHQUFHLEdBQUcsS0FBS1csU0FBU0wsUUFBUU4sR0FBRyxHQUFHO1FBRTdGLElBQUksQ0FBQ1ksSUFBSSxHQUFHTixRQUFRTixHQUFHLElBQUlELFVBQVVDLEdBQUc7UUFFeEMsSUFBSSxDQUFDYSxJQUFJLEdBQUcsSUFBSUMsT0FBZ0Msc0JBQXNCO1FBQ3RFLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUloQixVQUFVaUIsSUFBSSxJQUFpQiw2Q0FBNkM7SUFDakc7SUFFQSxJQUFJQyxTQUFTO1FBRVQsT0FBTyxJQUFJLENBQUNKLElBQUksQ0FBQ0ssSUFBSTtJQUN6QjtJQUVBQyxJQUFJQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUVaLElBQUlELFFBQVEsUUFDUixDQUFDckIsVUFBVUUsU0FBUyxDQUFDcUIsR0FBRyxDQUFDLE9BQU9GLE1BQU07WUFFdEM7UUFDSjtRQUVBLElBQUlHLE9BQU8sSUFBSSxDQUFDVixJQUFJLENBQUNXLEdBQUcsQ0FBQ0o7UUFDekIsSUFBSUcsTUFBTTtZQUNOQSxLQUFLRixLQUFLLEdBQUdBO1lBQ2IsSUFBSSxDQUFDTixLQUFLLENBQUNVLEtBQUssQ0FBQ0Y7WUFDakI7UUFDSjtRQUVBQSxPQUFPLElBQUksQ0FBQ1IsS0FBSyxDQUFDVyxPQUFPLENBQUM7WUFBRU47WUFBS0M7UUFBTTtRQUN2QyxJQUFJLENBQUNSLElBQUksQ0FBQ00sR0FBRyxDQUFDQyxLQUFLRztRQUNuQixJQUFJLENBQUNJLFFBQVE7SUFDakI7SUFFQUgsSUFBSUosR0FBRyxFQUFFO1FBRUwsTUFBTUcsT0FBTyxJQUFJLENBQUNWLElBQUksQ0FBQ1csR0FBRyxDQUFDSjtRQUMzQixJQUFJRyxNQUFNO1lBQ04sSUFBSSxDQUFDUixLQUFLLENBQUNVLEtBQUssQ0FBQ0Y7WUFDakIsT0FBTzFCLE1BQU0wQixLQUFLRixLQUFLO1FBQzNCO0lBQ0o7SUFFQU0sV0FBVztRQUVQLElBQUksSUFBSSxDQUFDZCxJQUFJLENBQUNLLElBQUksR0FBRyxJQUFJLENBQUNOLElBQUksRUFBRTtZQUM1QixNQUFNVyxPQUFPLElBQUksQ0FBQ1IsS0FBSyxDQUFDYSxHQUFHO1lBQzNCLElBQUksQ0FBQ2YsSUFBSSxDQUFDZ0IsTUFBTSxDQUFDTixLQUFLSCxHQUFHO1FBQzdCO0lBQ0o7QUFDSjtBQUdBckIsVUFBVWlCLElBQUksR0FBRztJQUViUixhQUFjO1FBRVYsSUFBSSxDQUFDc0IsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFFQUwsUUFBUUgsSUFBSSxFQUFFO1FBRVZBLEtBQUtTLElBQUksR0FBRztRQUNaVCxLQUFLVSxJQUFJLEdBQUcsSUFBSSxDQUFDRixJQUFJO1FBRXJCLElBQUksSUFBSSxDQUFDQSxJQUFJLEVBQUU7WUFDWCxJQUFJLENBQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHVDtRQUNyQjtRQUVBLElBQUksQ0FBQ1EsSUFBSSxHQUFHUjtRQUVaLElBQUksQ0FBQyxJQUFJLENBQUNPLElBQUksRUFBRTtZQUNaLElBQUksQ0FBQ0EsSUFBSSxHQUFHUDtRQUNoQjtRQUVBLE9BQU9BO0lBQ1g7SUFFQUUsTUFBTUYsSUFBSSxFQUFFO1FBRVIsSUFBSUEsU0FBUyxJQUFJLENBQUNRLElBQUksRUFBRTtZQUNwQjtRQUNKO1FBRUEsSUFBSSxDQUFDRyxPQUFPLENBQUNYO1FBQ2IsSUFBSSxDQUFDRyxPQUFPLENBQUNIO0lBQ2pCO0lBRUFLLE1BQU07UUFFRixPQUFPLElBQUksQ0FBQ00sT0FBTyxDQUFDLElBQUksQ0FBQ0osSUFBSTtJQUNqQztJQUVBSSxRQUFRWCxJQUFJLEVBQUU7UUFFVixNQUFNLEVBQUVTLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdWO1FBRXZCUyxLQUFLQyxJQUFJLEdBQUdBO1FBRVosSUFBSUEsTUFBTTtZQUNOQSxLQUFLRCxJQUFJLEdBQUdBO1FBQ2hCO1FBRUEsSUFBSVQsU0FBUyxJQUFJLENBQUNPLElBQUksRUFBRTtZQUNwQixJQUFJLENBQUNBLElBQUksR0FBR0U7UUFDaEI7UUFFQVQsS0FBS1UsSUFBSSxHQUFHO1FBQ1pWLEtBQUtTLElBQUksR0FBRztRQUVaLE9BQU9UO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc3RlaGVyby8uL25vZGVfbW9kdWxlcy9qb2kvbGliL2NhY2hlLmpzP2IxY2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NlcnQgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9hc3NlcnQnKTtcbmNvbnN0IENsb25lID0gcmVxdWlyZSgnQGhhcGkvaG9lay9saWIvY2xvbmUnKTtcblxuY29uc3QgQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuXG5jb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgbWF4OiAxMDAwLFxuICAgIHN1cHBvcnRlZDogbmV3IFNldChbJ3VuZGVmaW5lZCcsICdib29sZWFuJywgJ251bWJlcicsICdzdHJpbmcnXSlcbn07XG5cblxuZXhwb3J0cy5wcm92aWRlciA9IHtcblxuICAgIHByb3Zpc2lvbihvcHRpb25zKSB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBpbnRlcm5hbHMuQ2FjaGUob3B0aW9ucyk7XG4gICAgfVxufTtcblxuXG4vLyBMZWFzdCBSZWNlbnRseSBVc2VkIChMUlUpIENhY2hlXG5cbmludGVybmFscy5DYWNoZSA9IGNsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsnbWF4J10pO1xuICAgICAgICBBc3NlcnQob3B0aW9ucy5tYXggPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLm1heCAmJiBvcHRpb25zLm1heCA+IDAgJiYgaXNGaW5pdGUob3B0aW9ucy5tYXgpLCAnSW52YWxpZCBtYXggY2FjaGUgc2l6ZScpO1xuXG4gICAgICAgIHRoaXMuX21heCA9IG9wdGlvbnMubWF4IHx8IGludGVybmFscy5tYXg7XG5cbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFwIG9mIG5vZGVzIGJ5IGtleVxuICAgICAgICB0aGlzLl9saXN0ID0gbmV3IGludGVybmFscy5MaXN0KCk7ICAgICAgICAgICAgICAvLyBMaXN0IG9mIG5vZGVzIChtb3N0IHJlY2VudGx5IHVzZWQgaW4gaGVhZClcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuc2l6ZTtcbiAgICB9XG5cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuXG4gICAgICAgIGlmIChrZXkgIT09IG51bGwgJiZcbiAgICAgICAgICAgICFpbnRlcm5hbHMuc3VwcG9ydGVkLmhhcyh0eXBlb2Yga2V5KSkge1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX21hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2xpc3QuZmlyc3Qobm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gdGhpcy5fbGlzdC51bnNoaWZ0KHsga2V5LCB2YWx1ZSB9KTtcbiAgICAgICAgdGhpcy5fbWFwLnNldChrZXksIG5vZGUpO1xuICAgICAgICB0aGlzLl9jb21wYWN0KCk7XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuXG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0LmZpcnN0KG5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIENsb25lKG5vZGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NvbXBhY3QoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX21hcC5zaXplID4gdGhpcy5fbWF4KSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5fbGlzdC5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUobm9kZS5rZXkpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG5pbnRlcm5hbHMuTGlzdCA9IGNsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdW5zaGlmdChub2RlKSB7XG5cbiAgICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgbm9kZS5wcmV2ID0gdGhpcy5oZWFkO1xuXG4gICAgICAgIGlmICh0aGlzLmhlYWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZC5uZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGVhZCA9IG5vZGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRhaWwpIHtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBmaXJzdChub2RlKSB7XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlKG5vZGUpO1xuICAgICAgICB0aGlzLnVuc2hpZnQobm9kZSk7XG4gICAgfVxuXG4gICAgcG9wKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9yZW1vdmUodGhpcy50YWlsKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlKG5vZGUpIHtcblxuICAgICAgICBjb25zdCB7IG5leHQsIHByZXYgfSA9IG5vZGU7XG5cbiAgICAgICAgbmV4dC5wcmV2ID0gcHJldjtcblxuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLnRhaWwpIHtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlLnByZXYgPSBudWxsO1xuICAgICAgICBub2RlLm5leHQgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiQXNzZXJ0IiwicmVxdWlyZSIsIkNsb25lIiwiQ29tbW9uIiwiaW50ZXJuYWxzIiwibWF4Iiwic3VwcG9ydGVkIiwiU2V0IiwiZXhwb3J0cyIsInByb3ZpZGVyIiwicHJvdmlzaW9uIiwib3B0aW9ucyIsIkNhY2hlIiwiY29uc3RydWN0b3IiLCJhc3NlcnRPcHRpb25zIiwidW5kZWZpbmVkIiwiaXNGaW5pdGUiLCJfbWF4IiwiX21hcCIsIk1hcCIsIl9saXN0IiwiTGlzdCIsImxlbmd0aCIsInNpemUiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsImhhcyIsIm5vZGUiLCJnZXQiLCJmaXJzdCIsInVuc2hpZnQiLCJfY29tcGFjdCIsInBvcCIsImRlbGV0ZSIsInRhaWwiLCJoZWFkIiwibmV4dCIsInByZXYiLCJfcmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/common.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/common.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst AssertError = __webpack_require__(/*! @hapi/hoek/lib/error */ \"(rsc)/./node_modules/@hapi/hoek/lib/error.js\");\nconst Pkg = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/joi/package.json\");\nlet Messages;\nlet Schemas;\nconst internals = {\n    isoDate: /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/\n};\nexports.version = Pkg.version;\nexports.defaults = {\n    abortEarly: true,\n    allowUnknown: false,\n    artifacts: false,\n    cache: true,\n    context: null,\n    convert: true,\n    dateFormat: \"iso\",\n    errors: {\n        escapeHtml: false,\n        label: \"path\",\n        language: null,\n        render: true,\n        stack: false,\n        wrap: {\n            label: '\"',\n            array: \"[]\"\n        }\n    },\n    externals: true,\n    messages: {},\n    nonEnumerables: false,\n    noDefaults: false,\n    presence: \"optional\",\n    skipFunctions: false,\n    stripUnknown: false,\n    warnings: false\n};\nexports.symbols = {\n    any: Symbol.for(\"@hapi/joi/schema\"),\n    arraySingle: Symbol(\"arraySingle\"),\n    deepDefault: Symbol(\"deepDefault\"),\n    errors: Symbol(\"errors\"),\n    literal: Symbol(\"literal\"),\n    override: Symbol(\"override\"),\n    parent: Symbol(\"parent\"),\n    prefs: Symbol(\"prefs\"),\n    ref: Symbol(\"ref\"),\n    template: Symbol(\"template\"),\n    values: Symbol(\"values\")\n};\nexports.assertOptions = function(options, keys, name = \"Options\") {\n    Assert(options && typeof options === \"object\" && !Array.isArray(options), \"Options must be of type object\");\n    const unknownKeys = Object.keys(options).filter((k)=>!keys.includes(k));\n    Assert(unknownKeys.length === 0, `${name} contain unknown keys: ${unknownKeys}`);\n};\nexports.checkPreferences = function(prefs) {\n    Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/joi/lib/schemas.js\");\n    const result = Schemas.preferences.validate(prefs);\n    if (result.error) {\n        throw new AssertError([\n            result.error.details[0].message\n        ]);\n    }\n};\nexports.compare = function(a, b, operator) {\n    switch(operator){\n        case \"=\":\n            return a === b;\n        case \">\":\n            return a > b;\n        case \"<\":\n            return a < b;\n        case \">=\":\n            return a >= b;\n        case \"<=\":\n            return a <= b;\n    }\n};\nexports[\"default\"] = function(value, defaultValue) {\n    return value === undefined ? defaultValue : value;\n};\nexports.isIsoDate = function(date) {\n    return internals.isoDate.test(date);\n};\nexports.isNumber = function(value) {\n    return typeof value === \"number\" && !isNaN(value);\n};\nexports.isResolvable = function(obj) {\n    if (!obj) {\n        return false;\n    }\n    return obj[exports.symbols.ref] || obj[exports.symbols.template];\n};\nexports.isSchema = function(schema, options = {}) {\n    const any = schema && schema[exports.symbols.any];\n    if (!any) {\n        return false;\n    }\n    Assert(options.legacy || any.version === exports.version, \"Cannot mix different versions of joi schemas\");\n    return true;\n};\nexports.isValues = function(obj) {\n    return obj[exports.symbols.values];\n};\nexports.limit = function(value) {\n    return Number.isSafeInteger(value) && value >= 0;\n};\nexports.preferences = function(target, source) {\n    Messages = Messages || __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/joi/lib/messages.js\");\n    target = target || {};\n    source = source || {};\n    const merged = Object.assign({}, target, source);\n    if (source.errors && target.errors) {\n        merged.errors = Object.assign({}, target.errors, source.errors);\n        merged.errors.wrap = Object.assign({}, target.errors.wrap, source.errors.wrap);\n    }\n    if (source.messages) {\n        merged.messages = Messages.compile(source.messages, target.messages);\n    }\n    delete merged[exports.symbols.prefs];\n    return merged;\n};\nexports.tryWithPath = function(fn, key, options = {}) {\n    try {\n        return fn();\n    } catch (err) {\n        if (err.path !== undefined) {\n            err.path = key + \".\" + err.path;\n        } else {\n            err.path = key;\n        }\n        if (options.append) {\n            err.message = `${err.message} (${err.path})`;\n        }\n        throw err;\n    }\n};\nexports.validateArg = function(value, label, { assert, message }) {\n    if (exports.isSchema(assert)) {\n        const result = assert.validate(value);\n        if (!result.error) {\n            return;\n        }\n        return result.error.message;\n    } else if (!assert(value)) {\n        return label ? `${label} ${message}` : message;\n    }\n};\nexports.verifyFlat = function(args, method) {\n    for (const arg of args){\n        Assert(!Array.isArray(arg), \"Method no longer accepts array arguments:\", method);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/compile.js":
/*!*****************************************!*\
  !*** ./node_modules/joi/lib/compile.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst internals = {};\nexports.schema = function(Joi, config, options = {}) {\n    Common.assertOptions(options, [\n        \"appendPath\",\n        \"override\"\n    ]);\n    try {\n        return internals.schema(Joi, config, options);\n    } catch (err) {\n        if (options.appendPath && err.path !== undefined) {\n            err.message = `${err.message} (${err.path})`;\n        }\n        throw err;\n    }\n};\ninternals.schema = function(Joi, config, options) {\n    Assert(config !== undefined, \"Invalid undefined schema\");\n    if (Array.isArray(config)) {\n        Assert(config.length, \"Invalid empty array schema\");\n        if (config.length === 1) {\n            config = config[0];\n        }\n    }\n    const valid = (base, ...values)=>{\n        if (options.override !== false) {\n            return base.valid(Joi.override, ...values);\n        }\n        return base.valid(...values);\n    };\n    if (internals.simple(config)) {\n        return valid(Joi, config);\n    }\n    if (typeof config === \"function\") {\n        return Joi.custom(config);\n    }\n    Assert(typeof config === \"object\", \"Invalid schema content:\", typeof config);\n    if (Common.isResolvable(config)) {\n        return valid(Joi, config);\n    }\n    if (Common.isSchema(config)) {\n        return config;\n    }\n    if (Array.isArray(config)) {\n        for (const item of config){\n            if (!internals.simple(item)) {\n                return Joi.alternatives().try(...config);\n            }\n        }\n        return valid(Joi, ...config);\n    }\n    if (config instanceof RegExp) {\n        return Joi.string().regex(config);\n    }\n    if (config instanceof Date) {\n        return valid(Joi.date(), config);\n    }\n    Assert(Object.getPrototypeOf(config) === Object.getPrototypeOf({}), \"Schema can only contain plain objects\");\n    return Joi.object().keys(config);\n};\nexports.ref = function(id, options) {\n    return Ref.isRef(id) ? id : Ref.create(id, options);\n};\nexports.compile = function(root, schema, options = {}) {\n    Common.assertOptions(options, [\n        \"legacy\"\n    ]);\n    // Compiled by any supported version\n    const any = schema && schema[Common.symbols.any];\n    if (any) {\n        Assert(options.legacy || any.version === Common.version, \"Cannot mix different versions of joi schemas:\", any.version, Common.version);\n        return schema;\n    }\n    // Uncompiled root\n    if (typeof schema !== \"object\" || !options.legacy) {\n        return exports.schema(root, schema, {\n            appendPath: true\n        }); // Will error if schema contains other versions\n    }\n    // Scan schema for compiled parts\n    const compiler = internals.walk(schema);\n    if (!compiler) {\n        return exports.schema(root, schema, {\n            appendPath: true\n        });\n    }\n    return compiler.compile(compiler.root, schema);\n};\ninternals.walk = function(schema) {\n    if (typeof schema !== \"object\") {\n        return null;\n    }\n    if (Array.isArray(schema)) {\n        for (const item of schema){\n            const compiler = internals.walk(item);\n            if (compiler) {\n                return compiler;\n            }\n        }\n        return null;\n    }\n    const any = schema[Common.symbols.any];\n    if (any) {\n        return {\n            root: schema[any.root],\n            compile: any.compile\n        };\n    }\n    Assert(Object.getPrototypeOf(schema) === Object.getPrototypeOf({}), \"Schema can only contain plain objects\");\n    for(const key in schema){\n        const compiler = internals.walk(schema[key]);\n        if (compiler) {\n            return compiler;\n        }\n    }\n    return null;\n};\ninternals.simple = function(value) {\n    return value === null || [\n        \"boolean\",\n        \"string\",\n        \"number\"\n    ].includes(typeof value);\n};\nexports.when = function(schema, condition, options) {\n    if (options === undefined) {\n        Assert(condition && typeof condition === \"object\", \"Missing options\");\n        options = condition;\n        condition = Ref.create(\".\");\n    }\n    if (Array.isArray(options)) {\n        options = {\n            switch: options\n        };\n    }\n    Common.assertOptions(options, [\n        \"is\",\n        \"not\",\n        \"then\",\n        \"otherwise\",\n        \"switch\",\n        \"break\"\n    ]);\n    // Schema condition\n    if (Common.isSchema(condition)) {\n        Assert(options.is === undefined, '\"is\" can not be used with a schema condition');\n        Assert(options.not === undefined, '\"not\" can not be used with a schema condition');\n        Assert(options.switch === undefined, '\"switch\" can not be used with a schema condition');\n        return internals.condition(schema, {\n            is: condition,\n            then: options.then,\n            otherwise: options.otherwise,\n            break: options.break\n        });\n    }\n    // Single condition\n    Assert(Ref.isRef(condition) || typeof condition === \"string\", \"Invalid condition:\", condition);\n    Assert(options.not === undefined || options.is === undefined, 'Cannot combine \"is\" with \"not\"');\n    if (options.switch === undefined) {\n        let rule = options;\n        if (options.not !== undefined) {\n            rule = {\n                is: options.not,\n                then: options.otherwise,\n                otherwise: options.then,\n                break: options.break\n            };\n        }\n        let is = rule.is !== undefined ? schema.$_compile(rule.is) : schema.$_root.invalid(null, false, 0, \"\").required();\n        Assert(rule.then !== undefined || rule.otherwise !== undefined, 'options must have at least one of \"then\", \"otherwise\", or \"switch\"');\n        Assert(rule.break === undefined || rule.then === undefined || rule.otherwise === undefined, \"Cannot specify then, otherwise, and break all together\");\n        if (options.is !== undefined && !Ref.isRef(options.is) && !Common.isSchema(options.is)) {\n            is = is.required(); // Only apply required if this wasn't already a schema or a ref\n        }\n        return internals.condition(schema, {\n            ref: exports.ref(condition),\n            is,\n            then: rule.then,\n            otherwise: rule.otherwise,\n            break: rule.break\n        });\n    }\n    // Switch statement\n    Assert(Array.isArray(options.switch), '\"switch\" must be an array');\n    Assert(options.is === undefined, 'Cannot combine \"switch\" with \"is\"');\n    Assert(options.not === undefined, 'Cannot combine \"switch\" with \"not\"');\n    Assert(options.then === undefined, 'Cannot combine \"switch\" with \"then\"');\n    const rule = {\n        ref: exports.ref(condition),\n        switch: [],\n        break: options.break\n    };\n    for(let i = 0; i < options.switch.length; ++i){\n        const test = options.switch[i];\n        const last = i === options.switch.length - 1;\n        Common.assertOptions(test, last ? [\n            \"is\",\n            \"then\",\n            \"otherwise\"\n        ] : [\n            \"is\",\n            \"then\"\n        ]);\n        Assert(test.is !== undefined, 'Switch statement missing \"is\"');\n        Assert(test.then !== undefined, 'Switch statement missing \"then\"');\n        const item = {\n            is: schema.$_compile(test.is),\n            then: schema.$_compile(test.then)\n        };\n        if (!Ref.isRef(test.is) && !Common.isSchema(test.is)) {\n            item.is = item.is.required(); // Only apply required if this wasn't already a schema or a ref\n        }\n        if (last) {\n            Assert(options.otherwise === undefined || test.otherwise === undefined, 'Cannot specify \"otherwise\" inside and outside a \"switch\"');\n            const otherwise = options.otherwise !== undefined ? options.otherwise : test.otherwise;\n            if (otherwise !== undefined) {\n                Assert(rule.break === undefined, \"Cannot specify both otherwise and break\");\n                item.otherwise = schema.$_compile(otherwise);\n            }\n        }\n        rule.switch.push(item);\n    }\n    return rule;\n};\ninternals.condition = function(schema, condition) {\n    for (const key of [\n        \"then\",\n        \"otherwise\"\n    ]){\n        if (condition[key] === undefined) {\n            delete condition[key];\n        } else {\n            condition[key] = schema.$_compile(condition[key]);\n        }\n    }\n    return condition;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/compile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/errors.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/errors.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Annotate = __webpack_require__(/*! ./annotate */ \"(rsc)/./node_modules/joi/lib/annotate.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Template = __webpack_require__(/*! ./template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nconst internals = {};\nexports.Report = class {\n    constructor(code, value, local, flags, messages, state, prefs){\n        this.code = code;\n        this.flags = flags;\n        this.messages = messages;\n        this.path = state.path;\n        this.prefs = prefs;\n        this.state = state;\n        this.value = value;\n        this.message = null;\n        this.template = null;\n        this.local = local || {};\n        this.local.label = exports.label(this.flags, this.state, this.prefs, this.messages);\n        if (this.value !== undefined && !this.local.hasOwnProperty(\"value\")) {\n            this.local.value = this.value;\n        }\n        if (this.path.length) {\n            const key = this.path[this.path.length - 1];\n            if (typeof key !== \"object\") {\n                this.local.key = key;\n            }\n        }\n    }\n    _setTemplate(template) {\n        this.template = template;\n        if (!this.flags.label && this.path.length === 0) {\n            const localized = this._template(this.template, \"root\");\n            if (localized) {\n                this.local.label = localized;\n            }\n        }\n    }\n    toString() {\n        if (this.message) {\n            return this.message;\n        }\n        const code = this.code;\n        if (!this.prefs.errors.render) {\n            return this.code;\n        }\n        const template = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);\n        if (template === undefined) {\n            return `Error code \"${code}\" is not defined, your custom type is missing the correct messages definition`;\n        }\n        // Render and cache result\n        this.message = template.render(this.value, this.state, this.prefs, this.local, {\n            errors: this.prefs.errors,\n            messages: [\n                this.prefs.messages,\n                this.messages\n            ]\n        });\n        if (!this.prefs.errors.label) {\n            this.message = this.message.replace(/^\"\" /, \"\").trim();\n        }\n        return this.message;\n    }\n    _template(messages, code) {\n        return exports.template(this.value, messages, code || this.code, this.state, this.prefs);\n    }\n};\nexports.path = function(path) {\n    let label = \"\";\n    for (const segment of path){\n        if (typeof segment === \"object\") {\n            continue;\n        }\n        if (typeof segment === \"string\") {\n            if (label) {\n                label += \".\";\n            }\n            label += segment;\n        } else {\n            label += `[${segment}]`;\n        }\n    }\n    return label;\n};\nexports.template = function(value, messages, code, state, prefs) {\n    if (!messages) {\n        return;\n    }\n    if (Template.isTemplate(messages)) {\n        return code !== \"root\" ? messages : null;\n    }\n    let lang = prefs.errors.language;\n    if (Common.isResolvable(lang)) {\n        lang = lang.resolve(value, state, prefs);\n    }\n    if (lang && messages[lang]) {\n        if (messages[lang][code] !== undefined) {\n            return messages[lang][code];\n        }\n        if (messages[lang][\"*\"] !== undefined) {\n            return messages[lang][\"*\"];\n        }\n    }\n    if (!messages[code]) {\n        return messages[\"*\"];\n    }\n    return messages[code];\n};\nexports.label = function(flags, state, prefs, messages) {\n    if (!prefs.errors.label) {\n        return \"\";\n    }\n    if (flags.label) {\n        return flags.label;\n    }\n    let path = state.path;\n    if (prefs.errors.label === \"key\" && state.path.length > 1) {\n        path = state.path.slice(-1);\n    }\n    const normalized = exports.path(path);\n    if (normalized) {\n        return normalized;\n    }\n    return exports.template(null, prefs.messages, \"root\", state, prefs) || messages && exports.template(null, messages, \"root\", state, prefs) || \"value\";\n};\nexports.process = function(errors, original, prefs) {\n    if (!errors) {\n        return null;\n    }\n    const { override, message, details } = exports.details(errors);\n    if (override) {\n        return override;\n    }\n    if (prefs.errors.stack) {\n        return new exports.ValidationError(message, details, original);\n    }\n    const limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    const validationError = new exports.ValidationError(message, details, original);\n    Error.stackTraceLimit = limit;\n    return validationError;\n};\nexports.details = function(errors, options = {}) {\n    let messages = [];\n    const details = [];\n    for (const item of errors){\n        // Override\n        if (item instanceof Error) {\n            if (options.override !== false) {\n                return {\n                    override: item\n                };\n            }\n            const message = item.toString();\n            messages.push(message);\n            details.push({\n                message,\n                type: \"override\",\n                context: {\n                    error: item\n                }\n            });\n            continue;\n        }\n        // Report\n        const message = item.toString();\n        messages.push(message);\n        details.push({\n            message,\n            path: item.path.filter((v)=>typeof v !== \"object\"),\n            type: item.code,\n            context: item.local\n        });\n    }\n    if (messages.length > 1) {\n        messages = [\n            ...new Set(messages)\n        ];\n    }\n    return {\n        message: messages.join(\". \"),\n        details\n    };\n};\nexports.ValidationError = class extends Error {\n    constructor(message, details, original){\n        super(message);\n        this._original = original;\n        this.details = details;\n    }\n    static isError(err) {\n        return err instanceof exports.ValidationError;\n    }\n};\nexports.ValidationError.prototype.isJoi = true;\nexports.ValidationError.prototype.name = \"ValidationError\";\nexports.ValidationError.prototype.annotate = Annotate.error;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/extend.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/extend.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Messages = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/joi/lib/messages.js\");\nconst internals = {};\nexports.type = function(from, options) {\n    const base = Object.getPrototypeOf(from);\n    const prototype = Clone(base);\n    const schema = from._assign(Object.create(prototype));\n    const def = Object.assign({}, options); // Shallow cloned\n    delete def.base;\n    prototype._definition = def;\n    const parent = base._definition || {};\n    def.messages = Messages.merge(parent.messages, def.messages);\n    def.properties = Object.assign({}, parent.properties, def.properties);\n    // Type\n    schema.type = def.type;\n    // Flags\n    def.flags = Object.assign({}, parent.flags, def.flags);\n    // Terms\n    const terms = Object.assign({}, parent.terms);\n    if (def.terms) {\n        for(const name in def.terms){\n            const term = def.terms[name];\n            Assert(schema.$_terms[name] === undefined, \"Invalid term override for\", def.type, name);\n            schema.$_terms[name] = term.init;\n            terms[name] = term;\n        }\n    }\n    def.terms = terms;\n    // Constructor arguments\n    if (!def.args) {\n        def.args = parent.args;\n    }\n    // Prepare\n    def.prepare = internals.prepare(def.prepare, parent.prepare);\n    // Coerce\n    if (def.coerce) {\n        if (typeof def.coerce === \"function\") {\n            def.coerce = {\n                method: def.coerce\n            };\n        }\n        if (def.coerce.from && !Array.isArray(def.coerce.from)) {\n            def.coerce = {\n                method: def.coerce.method,\n                from: [].concat(def.coerce.from)\n            };\n        }\n    }\n    def.coerce = internals.coerce(def.coerce, parent.coerce);\n    // Validate\n    def.validate = internals.validate(def.validate, parent.validate);\n    // Rules\n    const rules = Object.assign({}, parent.rules);\n    if (def.rules) {\n        for(const name in def.rules){\n            const rule = def.rules[name];\n            Assert(typeof rule === \"object\", \"Invalid rule definition for\", def.type, name);\n            let method = rule.method;\n            if (method === undefined) {\n                method = function() {\n                    return this.$_addRule(name);\n                };\n            }\n            if (method) {\n                Assert(!prototype[name], \"Rule conflict in\", def.type, name);\n                prototype[name] = method;\n            }\n            Assert(!rules[name], \"Rule conflict in\", def.type, name);\n            rules[name] = rule;\n            if (rule.alias) {\n                const aliases = [].concat(rule.alias);\n                for (const alias of aliases){\n                    prototype[alias] = rule.method;\n                }\n            }\n            if (rule.args) {\n                rule.argsByName = new Map();\n                rule.args = rule.args.map((arg)=>{\n                    if (typeof arg === \"string\") {\n                        arg = {\n                            name: arg\n                        };\n                    }\n                    Assert(!rule.argsByName.has(arg.name), \"Duplicated argument name\", arg.name);\n                    if (Common.isSchema(arg.assert)) {\n                        arg.assert = arg.assert.strict().label(arg.name);\n                    }\n                    rule.argsByName.set(arg.name, arg);\n                    return arg;\n                });\n            }\n        }\n    }\n    def.rules = rules;\n    // Modifiers\n    const modifiers = Object.assign({}, parent.modifiers);\n    if (def.modifiers) {\n        for(const name in def.modifiers){\n            Assert(!prototype[name], \"Rule conflict in\", def.type, name);\n            const modifier = def.modifiers[name];\n            Assert(typeof modifier === \"function\", \"Invalid modifier definition for\", def.type, name);\n            const method = function(arg) {\n                return this.rule({\n                    [name]: arg\n                });\n            };\n            prototype[name] = method;\n            modifiers[name] = modifier;\n        }\n    }\n    def.modifiers = modifiers;\n    // Overrides\n    if (def.overrides) {\n        prototype._super = base;\n        schema.$_super = {}; // Backwards compatibility\n        for(const override in def.overrides){\n            Assert(base[override], \"Cannot override missing\", override);\n            def.overrides[override][Common.symbols.parent] = base[override];\n            schema.$_super[override] = base[override].bind(schema); // Backwards compatibility\n        }\n        Object.assign(prototype, def.overrides);\n    }\n    // Casts\n    def.cast = Object.assign({}, parent.cast, def.cast);\n    // Manifest\n    const manifest = Object.assign({}, parent.manifest, def.manifest);\n    manifest.build = internals.build(def.manifest && def.manifest.build, parent.manifest && parent.manifest.build);\n    def.manifest = manifest;\n    // Rebuild\n    def.rebuild = internals.rebuild(def.rebuild, parent.rebuild);\n    return schema;\n};\n// Helpers\ninternals.build = function(child, parent) {\n    if (!child || !parent) {\n        return child || parent;\n    }\n    return function(obj, desc) {\n        return parent(child(obj, desc), desc);\n    };\n};\ninternals.coerce = function(child, parent) {\n    if (!child || !parent) {\n        return child || parent;\n    }\n    return {\n        from: child.from && parent.from ? [\n            ...new Set([\n                ...child.from,\n                ...parent.from\n            ])\n        ] : null,\n        method (value, helpers) {\n            let coerced;\n            if (!parent.from || parent.from.includes(typeof value)) {\n                coerced = parent.method(value, helpers);\n                if (coerced) {\n                    if (coerced.errors || coerced.value === undefined) {\n                        return coerced;\n                    }\n                    value = coerced.value;\n                }\n            }\n            if (!child.from || child.from.includes(typeof value)) {\n                const own = child.method(value, helpers);\n                if (own) {\n                    return own;\n                }\n            }\n            return coerced;\n        }\n    };\n};\ninternals.prepare = function(child, parent) {\n    if (!child || !parent) {\n        return child || parent;\n    }\n    return function(value, helpers) {\n        const prepared = child(value, helpers);\n        if (prepared) {\n            if (prepared.errors || prepared.value === undefined) {\n                return prepared;\n            }\n            value = prepared.value;\n        }\n        return parent(value, helpers) || prepared;\n    };\n};\ninternals.rebuild = function(child, parent) {\n    if (!child || !parent) {\n        return child || parent;\n    }\n    return function(schema) {\n        parent(schema);\n        child(schema);\n    };\n};\ninternals.validate = function(child, parent) {\n    if (!child || !parent) {\n        return child || parent;\n    }\n    return function(value, helpers) {\n        const result = parent(value, helpers);\n        if (result) {\n            if (result.errors && (!Array.isArray(result.errors) || result.errors.length)) {\n                return result;\n            }\n            value = result.value;\n        }\n        return child(value, helpers) || result;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/extend.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/index.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/joi/lib/cache.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ./compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst Extend = __webpack_require__(/*! ./extend */ \"(rsc)/./node_modules/joi/lib/extend.js\");\nconst Manifest = __webpack_require__(/*! ./manifest */ \"(rsc)/./node_modules/joi/lib/manifest.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst Template = __webpack_require__(/*! ./template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nconst Trace = __webpack_require__(/*! ./trace */ \"(rsc)/./node_modules/joi/lib/trace.js\");\nlet Schemas;\nconst internals = {\n    types: {\n        alternatives: __webpack_require__(/*! ./types/alternatives */ \"(rsc)/./node_modules/joi/lib/types/alternatives.js\"),\n        any: __webpack_require__(/*! ./types/any */ \"(rsc)/./node_modules/joi/lib/types/any.js\"),\n        array: __webpack_require__(/*! ./types/array */ \"(rsc)/./node_modules/joi/lib/types/array.js\"),\n        boolean: __webpack_require__(/*! ./types/boolean */ \"(rsc)/./node_modules/joi/lib/types/boolean.js\"),\n        date: __webpack_require__(/*! ./types/date */ \"(rsc)/./node_modules/joi/lib/types/date.js\"),\n        function: __webpack_require__(/*! ./types/function */ \"(rsc)/./node_modules/joi/lib/types/function.js\"),\n        link: __webpack_require__(/*! ./types/link */ \"(rsc)/./node_modules/joi/lib/types/link.js\"),\n        number: __webpack_require__(/*! ./types/number */ \"(rsc)/./node_modules/joi/lib/types/number.js\"),\n        object: __webpack_require__(/*! ./types/object */ \"(rsc)/./node_modules/joi/lib/types/object.js\"),\n        string: __webpack_require__(/*! ./types/string */ \"(rsc)/./node_modules/joi/lib/types/string.js\"),\n        symbol: __webpack_require__(/*! ./types/symbol */ \"(rsc)/./node_modules/joi/lib/types/symbol.js\")\n    },\n    aliases: {\n        alt: \"alternatives\",\n        bool: \"boolean\",\n        func: \"function\"\n    }\n};\nif (Buffer) {\n    internals.types.binary = __webpack_require__(/*! ./types/binary */ \"(rsc)/./node_modules/joi/lib/types/binary.js\");\n}\ninternals.root = function() {\n    const root = {\n        _types: new Set(Object.keys(internals.types))\n    };\n    // Types\n    for (const type of root._types){\n        root[type] = function(...args) {\n            Assert(!args.length || [\n                \"alternatives\",\n                \"link\",\n                \"object\"\n            ].includes(type), \"The\", type, \"type does not allow arguments\");\n            return internals.generate(this, internals.types[type], args);\n        };\n    }\n    // Shortcuts\n    for (const method of [\n        \"allow\",\n        \"custom\",\n        \"disallow\",\n        \"equal\",\n        \"exist\",\n        \"forbidden\",\n        \"invalid\",\n        \"not\",\n        \"only\",\n        \"optional\",\n        \"options\",\n        \"prefs\",\n        \"preferences\",\n        \"required\",\n        \"strip\",\n        \"valid\",\n        \"when\"\n    ]){\n        root[method] = function(...args) {\n            return this.any()[method](...args);\n        };\n    }\n    // Methods\n    Object.assign(root, internals.methods);\n    // Aliases\n    for(const alias in internals.aliases){\n        const target = internals.aliases[alias];\n        root[alias] = root[target];\n    }\n    root.x = root.expression;\n    // Trace\n    if (Trace.setup) {\n        Trace.setup(root);\n    }\n    return root;\n};\ninternals.methods = {\n    ValidationError: Errors.ValidationError,\n    version: Common.version,\n    cache: Cache.provider,\n    assert (value, schema, ...args /* [message], [options] */ ) {\n        internals.assert(value, schema, true, args);\n    },\n    attempt (value, schema, ...args /* [message], [options] */ ) {\n        return internals.assert(value, schema, false, args);\n    },\n    build (desc) {\n        Assert(typeof Manifest.build === \"function\", \"Manifest functionality disabled\");\n        return Manifest.build(this, desc);\n    },\n    checkPreferences (prefs) {\n        Common.checkPreferences(prefs);\n    },\n    compile (schema, options) {\n        return Compile.compile(this, schema, options);\n    },\n    defaults (modifier) {\n        Assert(typeof modifier === \"function\", \"modifier must be a function\");\n        const joi = Object.assign({}, this);\n        for (const type of joi._types){\n            const schema = modifier(joi[type]());\n            Assert(Common.isSchema(schema), \"modifier must return a valid schema object\");\n            joi[type] = function(...args) {\n                return internals.generate(this, schema, args);\n            };\n        }\n        return joi;\n    },\n    expression (...args) {\n        return new Template(...args);\n    },\n    extend (...extensions) {\n        Common.verifyFlat(extensions, \"extend\");\n        Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/joi/lib/schemas.js\");\n        Assert(extensions.length, \"You need to provide at least one extension\");\n        this.assert(extensions, Schemas.extensions);\n        const joi = Object.assign({}, this);\n        joi._types = new Set(joi._types);\n        for (let extension of extensions){\n            if (typeof extension === \"function\") {\n                extension = extension(joi);\n            }\n            this.assert(extension, Schemas.extension);\n            const expanded = internals.expandExtension(extension, joi);\n            for (const item of expanded){\n                Assert(joi[item.type] === undefined || joi._types.has(item.type), \"Cannot override name\", item.type);\n                const base = item.base || this.any();\n                const schema = Extend.type(base, item);\n                joi._types.add(item.type);\n                joi[item.type] = function(...args) {\n                    return internals.generate(this, schema, args);\n                };\n            }\n        }\n        return joi;\n    },\n    isError: Errors.ValidationError.isError,\n    isExpression: Template.isTemplate,\n    isRef: Ref.isRef,\n    isSchema: Common.isSchema,\n    in (...args) {\n        return Ref.in(...args);\n    },\n    override: Common.symbols.override,\n    ref (...args) {\n        return Ref.create(...args);\n    },\n    types () {\n        const types = {};\n        for (const type of this._types){\n            types[type] = this[type]();\n        }\n        for(const target in internals.aliases){\n            types[target] = this[target]();\n        }\n        return types;\n    }\n};\n// Helpers\ninternals.assert = function(value, schema, annotate, args /* [message], [options] */ ) {\n    const message = args[0] instanceof Error || typeof args[0] === \"string\" ? args[0] : null;\n    const options = message !== null ? args[1] : args[0];\n    const result = schema.validate(value, Common.preferences({\n        errors: {\n            stack: true\n        }\n    }, options || {}));\n    let error = result.error;\n    if (!error) {\n        return result.value;\n    }\n    if (message instanceof Error) {\n        throw message;\n    }\n    const display = annotate && typeof error.annotate === \"function\" ? error.annotate() : error.message;\n    if (error instanceof Errors.ValidationError === false) {\n        error = Clone(error);\n    }\n    error.message = message ? `${message} ${display}` : display;\n    throw error;\n};\ninternals.generate = function(root, schema, args) {\n    Assert(root, \"Must be invoked on a Joi instance.\");\n    schema.$_root = root;\n    if (!schema._definition.args || !args.length) {\n        return schema;\n    }\n    return schema._definition.args(schema, ...args);\n};\ninternals.expandExtension = function(extension, joi) {\n    if (typeof extension.type === \"string\") {\n        return [\n            extension\n        ];\n    }\n    const extended = [];\n    for (const type of joi._types){\n        if (extension.type.test(type)) {\n            const item = Object.assign({}, extension);\n            item.type = type;\n            item.base = joi[type]();\n            extended.push(item);\n        }\n    }\n    return extended;\n};\nmodule.exports = internals.root();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/manifest.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/manifest.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Messages = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/joi/lib/messages.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst Template = __webpack_require__(/*! ./template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nlet Schemas;\nconst internals = {};\nexports.describe = function(schema) {\n    const def = schema._definition;\n    // Type\n    const desc = {\n        type: schema.type,\n        flags: {},\n        rules: []\n    };\n    // Flags\n    for(const flag in schema._flags){\n        if (flag[0] !== \"_\") {\n            desc.flags[flag] = internals.describe(schema._flags[flag]);\n        }\n    }\n    if (!Object.keys(desc.flags).length) {\n        delete desc.flags;\n    }\n    // Preferences\n    if (schema._preferences) {\n        desc.preferences = Clone(schema._preferences, {\n            shallow: [\n                \"messages\"\n            ]\n        });\n        delete desc.preferences[Common.symbols.prefs];\n        if (desc.preferences.messages) {\n            desc.preferences.messages = Messages.decompile(desc.preferences.messages);\n        }\n    }\n    // Allow / Invalid\n    if (schema._valids) {\n        desc.allow = schema._valids.describe();\n    }\n    if (schema._invalids) {\n        desc.invalid = schema._invalids.describe();\n    }\n    // Rules\n    for (const rule of schema._rules){\n        const ruleDef = def.rules[rule.name];\n        if (ruleDef.manifest === false) {\n            continue;\n        }\n        const item = {\n            name: rule.name\n        };\n        for(const custom in def.modifiers){\n            if (rule[custom] !== undefined) {\n                item[custom] = internals.describe(rule[custom]);\n            }\n        }\n        if (rule.args) {\n            item.args = {};\n            for(const key in rule.args){\n                const arg = rule.args[key];\n                if (key === \"options\" && !Object.keys(arg).length) {\n                    continue;\n                }\n                item.args[key] = internals.describe(arg, {\n                    assign: key\n                });\n            }\n            if (!Object.keys(item.args).length) {\n                delete item.args;\n            }\n        }\n        desc.rules.push(item);\n    }\n    if (!desc.rules.length) {\n        delete desc.rules;\n    }\n    // Terms (must be last to verify no name conflicts)\n    for(const term in schema.$_terms){\n        if (term[0] === \"_\") {\n            continue;\n        }\n        Assert(!desc[term], \"Cannot describe schema due to internal name conflict with\", term);\n        const items = schema.$_terms[term];\n        if (!items) {\n            continue;\n        }\n        if (items instanceof Map) {\n            if (items.size) {\n                desc[term] = [\n                    ...items.entries()\n                ];\n            }\n            continue;\n        }\n        if (Common.isValues(items)) {\n            desc[term] = items.describe();\n            continue;\n        }\n        Assert(def.terms[term], \"Term\", term, \"missing configuration\");\n        const manifest = def.terms[term].manifest;\n        const mapped = typeof manifest === \"object\";\n        if (!items.length && !mapped) {\n            continue;\n        }\n        const normalized = [];\n        for (const item of items){\n            normalized.push(internals.describe(item));\n        }\n        // Mapped\n        if (mapped) {\n            const { from, to } = manifest.mapped;\n            desc[term] = {};\n            for (const item of normalized){\n                desc[term][item[to]] = item[from];\n            }\n            continue;\n        }\n        // Single\n        if (manifest === \"single\") {\n            Assert(normalized.length === 1, \"Term\", term, \"contains more than one item\");\n            desc[term] = normalized[0];\n            continue;\n        }\n        // Array\n        desc[term] = normalized;\n    }\n    internals.validate(schema.$_root, desc);\n    return desc;\n};\ninternals.describe = function(item, options = {}) {\n    if (Array.isArray(item)) {\n        return item.map(internals.describe);\n    }\n    if (item === Common.symbols.deepDefault) {\n        return {\n            special: \"deep\"\n        };\n    }\n    if (typeof item !== \"object\" || item === null) {\n        return item;\n    }\n    if (options.assign === \"options\") {\n        return Clone(item);\n    }\n    if (Buffer && Buffer.isBuffer(item)) {\n        return {\n            buffer: item.toString(\"binary\")\n        };\n    }\n    if (item instanceof Date) {\n        return item.toISOString();\n    }\n    if (item instanceof Error) {\n        return item;\n    }\n    if (item instanceof RegExp) {\n        if (options.assign === \"regex\") {\n            return item.toString();\n        }\n        return {\n            regex: item.toString()\n        };\n    }\n    if (item[Common.symbols.literal]) {\n        return {\n            function: item.literal\n        };\n    }\n    if (typeof item.describe === \"function\") {\n        if (options.assign === \"ref\") {\n            return item.describe().ref;\n        }\n        return item.describe();\n    }\n    const normalized = {};\n    for(const key in item){\n        const value = item[key];\n        if (value === undefined) {\n            continue;\n        }\n        normalized[key] = internals.describe(value, {\n            assign: key\n        });\n    }\n    return normalized;\n};\nexports.build = function(joi, desc) {\n    const builder = new internals.Builder(joi);\n    return builder.parse(desc);\n};\ninternals.Builder = class {\n    constructor(joi){\n        this.joi = joi;\n    }\n    parse(desc) {\n        internals.validate(this.joi, desc);\n        // Type\n        let schema = this.joi[desc.type]()._bare();\n        const def = schema._definition;\n        // Flags\n        if (desc.flags) {\n            for(const flag in desc.flags){\n                const setter = def.flags[flag] && def.flags[flag].setter || flag;\n                Assert(typeof schema[setter] === \"function\", \"Invalid flag\", flag, \"for type\", desc.type);\n                schema = schema[setter](this.build(desc.flags[flag]));\n            }\n        }\n        // Preferences\n        if (desc.preferences) {\n            schema = schema.preferences(this.build(desc.preferences));\n        }\n        // Allow / Invalid\n        if (desc.allow) {\n            schema = schema.allow(...this.build(desc.allow));\n        }\n        if (desc.invalid) {\n            schema = schema.invalid(...this.build(desc.invalid));\n        }\n        // Rules\n        if (desc.rules) {\n            for (const rule of desc.rules){\n                Assert(typeof schema[rule.name] === \"function\", \"Invalid rule\", rule.name, \"for type\", desc.type);\n                const args = [];\n                if (rule.args) {\n                    const built = {};\n                    for(const key in rule.args){\n                        built[key] = this.build(rule.args[key], {\n                            assign: key\n                        });\n                    }\n                    const keys = Object.keys(built);\n                    const definition = def.rules[rule.name].args;\n                    if (definition) {\n                        Assert(keys.length <= definition.length, \"Invalid number of arguments for\", desc.type, rule.name, \"(expected up to\", definition.length, \", found\", keys.length, \")\");\n                        for (const { name } of definition){\n                            args.push(built[name]);\n                        }\n                    } else {\n                        Assert(keys.length === 1, \"Invalid number of arguments for\", desc.type, rule.name, \"(expected up to 1, found\", keys.length, \")\");\n                        args.push(built[keys[0]]);\n                    }\n                }\n                // Apply\n                schema = schema[rule.name](...args);\n                // Ruleset\n                const options = {};\n                for(const custom in def.modifiers){\n                    if (rule[custom] !== undefined) {\n                        options[custom] = this.build(rule[custom]);\n                    }\n                }\n                if (Object.keys(options).length) {\n                    schema = schema.rule(options);\n                }\n            }\n        }\n        // Terms\n        const terms = {};\n        for(const key in desc){\n            if ([\n                \"allow\",\n                \"flags\",\n                \"invalid\",\n                \"whens\",\n                \"preferences\",\n                \"rules\",\n                \"type\"\n            ].includes(key)) {\n                continue;\n            }\n            Assert(def.terms[key], \"Term\", key, \"missing configuration\");\n            const manifest = def.terms[key].manifest;\n            if (manifest === \"schema\") {\n                terms[key] = desc[key].map((item)=>this.parse(item));\n                continue;\n            }\n            if (manifest === \"values\") {\n                terms[key] = desc[key].map((item)=>this.build(item));\n                continue;\n            }\n            if (manifest === \"single\") {\n                terms[key] = this.build(desc[key]);\n                continue;\n            }\n            if (typeof manifest === \"object\") {\n                terms[key] = {};\n                for(const name in desc[key]){\n                    const value = desc[key][name];\n                    terms[key][name] = this.parse(value);\n                }\n                continue;\n            }\n            terms[key] = this.build(desc[key]);\n        }\n        if (desc.whens) {\n            terms.whens = desc.whens.map((when)=>this.build(when));\n        }\n        schema = def.manifest.build(schema, terms);\n        schema.$_temp.ruleset = false;\n        return schema;\n    }\n    build(desc, options = {}) {\n        if (desc === null) {\n            return null;\n        }\n        if (Array.isArray(desc)) {\n            return desc.map((item)=>this.build(item));\n        }\n        if (desc instanceof Error) {\n            return desc;\n        }\n        if (options.assign === \"options\") {\n            return Clone(desc);\n        }\n        if (options.assign === \"regex\") {\n            return internals.regex(desc);\n        }\n        if (options.assign === \"ref\") {\n            return Ref.build(desc);\n        }\n        if (typeof desc !== \"object\") {\n            return desc;\n        }\n        if (Object.keys(desc).length === 1) {\n            if (desc.buffer) {\n                Assert(Buffer, \"Buffers are not supported\");\n                return Buffer && Buffer.from(desc.buffer, \"binary\"); // $lab:coverage:ignore$\n            }\n            if (desc.function) {\n                return {\n                    [Common.symbols.literal]: true,\n                    literal: desc.function\n                };\n            }\n            if (desc.override) {\n                return Common.symbols.override;\n            }\n            if (desc.ref) {\n                return Ref.build(desc.ref);\n            }\n            if (desc.regex) {\n                return internals.regex(desc.regex);\n            }\n            if (desc.special) {\n                Assert([\n                    \"deep\"\n                ].includes(desc.special), \"Unknown special value\", desc.special);\n                return Common.symbols.deepDefault;\n            }\n            if (desc.value) {\n                return Clone(desc.value);\n            }\n        }\n        if (desc.type) {\n            return this.parse(desc);\n        }\n        if (desc.template) {\n            return Template.build(desc);\n        }\n        const normalized = {};\n        for(const key in desc){\n            normalized[key] = this.build(desc[key], {\n                assign: key\n            });\n        }\n        return normalized;\n    }\n};\ninternals.regex = function(string) {\n    const end = string.lastIndexOf(\"/\");\n    const exp = string.slice(1, end);\n    const flags = string.slice(end + 1);\n    return new RegExp(exp, flags);\n};\ninternals.validate = function(joi, desc) {\n    Schemas = Schemas || __webpack_require__(/*! ./schemas */ \"(rsc)/./node_modules/joi/lib/schemas.js\");\n    joi.assert(desc, Schemas.description);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/manifest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/messages.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/messages.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Template = __webpack_require__(/*! ./template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nconst internals = {};\nexports.compile = function(messages, target) {\n    // Single value string ('plain error message', 'template {error} message')\n    if (typeof messages === \"string\") {\n        Assert(!target, \"Cannot set single message string\");\n        return new Template(messages);\n    }\n    // Single value template\n    if (Template.isTemplate(messages)) {\n        Assert(!target, \"Cannot set single message template\");\n        return messages;\n    }\n    // By error code { 'number.min': <string | template> }\n    Assert(typeof messages === \"object\" && !Array.isArray(messages), \"Invalid message options\");\n    target = target ? Clone(target) : {};\n    for(let code in messages){\n        const message = messages[code];\n        if (code === \"root\" || Template.isTemplate(message)) {\n            target[code] = message;\n            continue;\n        }\n        if (typeof message === \"string\") {\n            target[code] = new Template(message);\n            continue;\n        }\n        // By language { english: { 'number.min': <string | template> } }\n        Assert(typeof message === \"object\" && !Array.isArray(message), \"Invalid message for\", code);\n        const language = code;\n        target[language] = target[language] || {};\n        for(code in message){\n            const localized = message[code];\n            if (code === \"root\" || Template.isTemplate(localized)) {\n                target[language][code] = localized;\n                continue;\n            }\n            Assert(typeof localized === \"string\", \"Invalid message for\", code, \"in\", language);\n            target[language][code] = new Template(localized);\n        }\n    }\n    return target;\n};\nexports.decompile = function(messages) {\n    // By error code { 'number.min': <string | template> }\n    const target = {};\n    for(let code in messages){\n        const message = messages[code];\n        if (code === \"root\") {\n            target.root = message;\n            continue;\n        }\n        if (Template.isTemplate(message)) {\n            target[code] = message.describe({\n                compact: true\n            });\n            continue;\n        }\n        // By language { english: { 'number.min': <string | template> } }\n        const language = code;\n        target[language] = {};\n        for(code in message){\n            const localized = message[code];\n            if (code === \"root\") {\n                target[language].root = localized;\n                continue;\n            }\n            target[language][code] = localized.describe({\n                compact: true\n            });\n        }\n    }\n    return target;\n};\nexports.merge = function(base, extended) {\n    if (!base) {\n        return exports.compile(extended);\n    }\n    if (!extended) {\n        return base;\n    }\n    // Single value string\n    if (typeof extended === \"string\") {\n        return new Template(extended);\n    }\n    // Single value template\n    if (Template.isTemplate(extended)) {\n        return extended;\n    }\n    // By error code { 'number.min': <string | template> }\n    const target = Clone(base);\n    for(let code in extended){\n        const message = extended[code];\n        if (code === \"root\" || Template.isTemplate(message)) {\n            target[code] = message;\n            continue;\n        }\n        if (typeof message === \"string\") {\n            target[code] = new Template(message);\n            continue;\n        }\n        // By language { english: { 'number.min': <string | template> } }\n        Assert(typeof message === \"object\" && !Array.isArray(message), \"Invalid message for\", code);\n        const language = code;\n        target[language] = target[language] || {};\n        for(code in message){\n            const localized = message[code];\n            if (code === \"root\" || Template.isTemplate(localized)) {\n                target[language][code] = localized;\n                continue;\n            }\n            Assert(typeof localized === \"string\", \"Invalid message for\", code, \"in\", language);\n            target[language][code] = new Template(localized);\n        }\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/modify.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/modify.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst internals = {};\nexports.Ids = internals.Ids = class {\n    constructor(){\n        this._byId = new Map();\n        this._byKey = new Map();\n        this._schemaChain = false;\n    }\n    clone() {\n        const clone = new internals.Ids();\n        clone._byId = new Map(this._byId);\n        clone._byKey = new Map(this._byKey);\n        clone._schemaChain = this._schemaChain;\n        return clone;\n    }\n    concat(source) {\n        if (source._schemaChain) {\n            this._schemaChain = true;\n        }\n        for (const [id, value] of source._byId.entries()){\n            Assert(!this._byKey.has(id), \"Schema id conflicts with existing key:\", id);\n            this._byId.set(id, value);\n        }\n        for (const [key, value] of source._byKey.entries()){\n            Assert(!this._byId.has(key), \"Schema key conflicts with existing id:\", key);\n            this._byKey.set(key, value);\n        }\n    }\n    fork(path, adjuster, root) {\n        const chain = this._collect(path);\n        chain.push({\n            schema: root\n        });\n        const tail = chain.shift();\n        let adjusted = {\n            id: tail.id,\n            schema: adjuster(tail.schema)\n        };\n        Assert(Common.isSchema(adjusted.schema), \"adjuster function failed to return a joi schema type\");\n        for (const node of chain){\n            adjusted = {\n                id: node.id,\n                schema: internals.fork(node.schema, adjusted.id, adjusted.schema)\n            };\n        }\n        return adjusted.schema;\n    }\n    labels(path, behind = []) {\n        const current = path[0];\n        const node = this._get(current);\n        if (!node) {\n            return [\n                ...behind,\n                ...path\n            ].join(\".\");\n        }\n        const forward = path.slice(1);\n        behind = [\n            ...behind,\n            node.schema._flags.label || current\n        ];\n        if (!forward.length) {\n            return behind.join(\".\");\n        }\n        return node.schema._ids.labels(forward, behind);\n    }\n    reach(path, behind = []) {\n        const current = path[0];\n        const node = this._get(current);\n        Assert(node, \"Schema does not contain path\", [\n            ...behind,\n            ...path\n        ].join(\".\"));\n        const forward = path.slice(1);\n        if (!forward.length) {\n            return node.schema;\n        }\n        return node.schema._ids.reach(forward, [\n            ...behind,\n            current\n        ]);\n    }\n    register(schema, { key } = {}) {\n        if (!schema || !Common.isSchema(schema)) {\n            return;\n        }\n        if (schema.$_property(\"schemaChain\") || schema._ids._schemaChain) {\n            this._schemaChain = true;\n        }\n        const id = schema._flags.id;\n        if (id) {\n            const existing = this._byId.get(id);\n            Assert(!existing || existing.schema === schema, \"Cannot add different schemas with the same id:\", id);\n            Assert(!this._byKey.has(id), \"Schema id conflicts with existing key:\", id);\n            this._byId.set(id, {\n                schema,\n                id\n            });\n        }\n        if (key) {\n            Assert(!this._byKey.has(key), \"Schema already contains key:\", key);\n            Assert(!this._byId.has(key), \"Schema key conflicts with existing id:\", key);\n            this._byKey.set(key, {\n                schema,\n                id: key\n            });\n        }\n    }\n    reset() {\n        this._byId = new Map();\n        this._byKey = new Map();\n        this._schemaChain = false;\n    }\n    _collect(path, behind = [], nodes = []) {\n        const current = path[0];\n        const node = this._get(current);\n        Assert(node, \"Schema does not contain path\", [\n            ...behind,\n            ...path\n        ].join(\".\"));\n        nodes = [\n            node,\n            ...nodes\n        ];\n        const forward = path.slice(1);\n        if (!forward.length) {\n            return nodes;\n        }\n        return node.schema._ids._collect(forward, [\n            ...behind,\n            current\n        ], nodes);\n    }\n    _get(id) {\n        return this._byId.get(id) || this._byKey.get(id);\n    }\n};\ninternals.fork = function(schema, id, replacement) {\n    const each = (item, { key })=>{\n        if (id === (item._flags.id || key)) {\n            return replacement;\n        }\n    };\n    const obj = exports.schema(schema, {\n        each,\n        ref: false\n    });\n    return obj ? obj.$_mutateRebuild() : schema;\n};\nexports.schema = function(schema, options) {\n    let obj;\n    for(const name in schema._flags){\n        if (name[0] === \"_\") {\n            continue;\n        }\n        const result = internals.scan(schema._flags[name], {\n            source: \"flags\",\n            name\n        }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            obj._flags[name] = result;\n        }\n    }\n    for(let i = 0; i < schema._rules.length; ++i){\n        const rule = schema._rules[i];\n        const result = internals.scan(rule.args, {\n            source: \"rules\",\n            name: rule.name\n        }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            const clone = Object.assign({}, rule);\n            clone.args = result;\n            obj._rules[i] = clone;\n            const existingUnique = obj._singleRules.get(rule.name);\n            if (existingUnique === rule) {\n                obj._singleRules.set(rule.name, clone);\n            }\n        }\n    }\n    for(const name in schema.$_terms){\n        if (name[0] === \"_\") {\n            continue;\n        }\n        const result = internals.scan(schema.$_terms[name], {\n            source: \"terms\",\n            name\n        }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            obj.$_terms[name] = result;\n        }\n    }\n    return obj;\n};\ninternals.scan = function(item, source, options, _path, _key) {\n    const path = _path || [];\n    if (item === null || typeof item !== \"object\") {\n        return;\n    }\n    let clone;\n    if (Array.isArray(item)) {\n        for(let i = 0; i < item.length; ++i){\n            const key = source.source === \"terms\" && source.name === \"keys\" && item[i].key;\n            const result = internals.scan(item[i], source, options, [\n                i,\n                ...path\n            ], key);\n            if (result !== undefined) {\n                clone = clone || item.slice();\n                clone[i] = result;\n            }\n        }\n        return clone;\n    }\n    if (options.schema !== false && Common.isSchema(item) || options.ref !== false && Ref.isRef(item)) {\n        const result = options.each(item, {\n            ...source,\n            path,\n            key: _key\n        });\n        if (result === item) {\n            return;\n        }\n        return result;\n    }\n    for(const key in item){\n        if (key[0] === \"_\") {\n            continue;\n        }\n        const result = internals.scan(item[key], source, options, [\n            key,\n            ...path\n        ], _key);\n        if (result !== undefined) {\n            clone = clone || Object.assign({}, item);\n            clone[key] = result;\n        }\n    }\n    return clone;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi9tb2RpZnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxNQUFNRixtQkFBT0EsQ0FBQztBQUdwQixNQUFNRyxZQUFZLENBQUM7QUFJbkJDLFdBQVcsR0FBR0QsVUFBVUUsR0FBRyxHQUFHO0lBRTFCQyxhQUFjO1FBRVYsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUM7UUFDakIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUQ7UUFDbEIsSUFBSSxDQUFDRSxZQUFZLEdBQUc7SUFDeEI7SUFFQUMsUUFBUTtRQUVKLE1BQU1BLFFBQVEsSUFBSVIsVUFBVUUsR0FBRztRQUMvQk0sTUFBTUosS0FBSyxHQUFHLElBQUlDLElBQUksSUFBSSxDQUFDRCxLQUFLO1FBQ2hDSSxNQUFNRixNQUFNLEdBQUcsSUFBSUQsSUFBSSxJQUFJLENBQUNDLE1BQU07UUFDbENFLE1BQU1ELFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVk7UUFDdEMsT0FBT0M7SUFDWDtJQUVBQyxPQUFPQyxNQUFNLEVBQUU7UUFFWCxJQUFJQSxPQUFPSCxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDQSxZQUFZLEdBQUc7UUFDeEI7UUFFQSxLQUFLLE1BQU0sQ0FBQ0ksSUFBSUMsTUFBTSxJQUFJRixPQUFPTixLQUFLLENBQUNTLE9BQU8sR0FBSTtZQUM5Q2pCLE9BQU8sQ0FBQyxJQUFJLENBQUNVLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDSCxLQUFLLDBDQUEwQ0E7WUFDdkUsSUFBSSxDQUFDUCxLQUFLLENBQUNXLEdBQUcsQ0FBQ0osSUFBSUM7UUFDdkI7UUFFQSxLQUFLLE1BQU0sQ0FBQ0ksS0FBS0osTUFBTSxJQUFJRixPQUFPSixNQUFNLENBQUNPLE9BQU8sR0FBSTtZQUNoRGpCLE9BQU8sQ0FBQyxJQUFJLENBQUNRLEtBQUssQ0FBQ1Us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QyxHQUFHO1lBQzlFLE1BQU13QyxTQUFTeEQsVUFBVXlELElBQUksQ0FBQ1AsSUFBSSxDQUFDUyxFQUFFLEVBQUVqRCxRQUFRNEMsU0FBUztnQkFBQ0s7bUJBQU16QzthQUFLLEVBQUVGO1lBQ3RFLElBQUl3QyxXQUFXRSxXQUFXO2dCQUN0QmxELFFBQVFBLFNBQVMwQyxLQUFLZCxLQUFLO2dCQUMzQjVCLEtBQUssQ0FBQ21ELEVBQUUsR0FBR0g7WUFDZjtRQUNKO1FBRUEsT0FBT2hEO0lBQ1g7SUFFQSxJQUFJOEMsUUFBUTlCLE1BQU0sS0FBSyxTQUFTMUIsT0FBTzhCLFFBQVEsQ0FBQ3NCLFNBQzVDSSxRQUFRRixHQUFHLEtBQUssU0FBU3JELElBQUl5RSxLQUFLLENBQUN0QixPQUFPO1FBRTFDLE1BQU1NLFNBQVNGLFFBQVFMLElBQUksQ0FBQ0MsTUFBTTtZQUFFLEdBQUd4QyxNQUFNO1lBQUVRO1lBQU1GLEtBQUtxRDtRQUFLO1FBQy9ELElBQUliLFdBQVdOLE1BQU07WUFDakI7UUFDSjtRQUVBLE9BQU9NO0lBQ1g7SUFFQSxJQUFLLE1BQU14QyxPQUFPa0MsS0FBTTtRQUNwQixJQUFJbEMsR0FBRyxDQUFDLEVBQUUsS0FBSyxLQUFLO1lBQ2hCO1FBQ0o7UUFFQSxNQUFNd0MsU0FBU3hELFVBQVV5RCxJQUFJLENBQUNQLElBQUksQ0FBQ2xDLElBQUksRUFBRU4sUUFBUTRDLFNBQVM7WUFBQ3RDO2VBQVFFO1NBQUssRUFBRW1EO1FBQzFFLElBQUliLFdBQVdFLFdBQVc7WUFDdEJsRCxRQUFRQSxTQUFTdUQsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR2Q7WUFDbkMxQyxLQUFLLENBQUNRLElBQUksR0FBR3dDO1FBQ2pCO0lBQ0o7SUFFQSxPQUFPaEQ7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc3RlaGVyby8uL25vZGVfbW9kdWxlcy9qb2kvbGliL21vZGlmeS5qcz9jYzkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXJ0ID0gcmVxdWlyZSgnQGhhcGkvaG9lay9saWIvYXNzZXJ0Jyk7XG5cbmNvbnN0IENvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5jb25zdCBSZWYgPSByZXF1aXJlKCcuL3JlZicpO1xuXG5cbmNvbnN0IGludGVybmFscyA9IHt9O1xuXG5cblxuZXhwb3J0cy5JZHMgPSBpbnRlcm5hbHMuSWRzID0gY2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgdGhpcy5fYnlJZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fYnlLZXkgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3NjaGVtYUNoYWluID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG5cbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgaW50ZXJuYWxzLklkcygpO1xuICAgICAgICBjbG9uZS5fYnlJZCA9IG5ldyBNYXAodGhpcy5fYnlJZCk7XG4gICAgICAgIGNsb25lLl9ieUtleSA9IG5ldyBNYXAodGhpcy5fYnlLZXkpO1xuICAgICAgICBjbG9uZS5fc2NoZW1hQ2hhaW4gPSB0aGlzLl9zY2hlbWFDaGFpbjtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIGNvbmNhdChzb3VyY2UpIHtcblxuICAgICAgICBpZiAoc291cmNlLl9zY2hlbWFDaGFpbikge1xuICAgICAgICAgICAgdGhpcy5fc2NoZW1hQ2hhaW4gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBbaWQsIHZhbHVlXSBvZiBzb3VyY2UuX2J5SWQuZW50cmllcygpKSB7XG4gICAgICAgICAgICBBc3NlcnQoIXRoaXMuX2J5S2V5LmhhcyhpZCksICdTY2hlbWEgaWQgY29uZmxpY3RzIHdpdGggZXhpc3Rpbmcga2V5OicsIGlkKTtcbiAgICAgICAgICAgIHRoaXMuX2J5SWQuc2V0KGlkLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzb3VyY2UuX2J5S2V5LmVudHJpZXMoKSkge1xuICAgICAgICAgICAgQXNzZXJ0KCF0aGlzLl9ieUlkLmhhcyhrZXkpLCAnU2NoZW1hIGtleSBjb25mbGljdHMgd2l0aCBleGlzdGluZyBpZDonLCBrZXkpO1xuICAgICAgICAgICAgdGhpcy5fYnlLZXkuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yayhwYXRoLCBhZGp1c3Rlciwgcm9vdCkge1xuXG4gICAgICAgIGNvbnN0IGNoYWluID0gdGhpcy5fY29sbGVjdChwYXRoKTtcbiAgICAgICAgY2hhaW4ucHVzaCh7IHNjaGVtYTogcm9vdCB9KTtcbiAgICAgICAgY29uc3QgdGFpbCA9IGNoYWluLnNoaWZ0KCk7XG4gICAgICAgIGxldCBhZGp1c3RlZCA9IHsgaWQ6IHRhaWwuaWQsIHNjaGVtYTogYWRqdXN0ZXIodGFpbC5zY2hlbWEpIH07XG5cbiAgICAgICAgQXNzZXJ0KENvbW1vbi5pc1NjaGVtYShhZGp1c3RlZC5zY2hlbWEpLCAnYWRqdXN0ZXIgZnVuY3Rpb24gZmFpbGVkIHRvIHJldHVybiBhIGpvaSBzY2hlbWEgdHlwZScpO1xuXG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGFpbikge1xuICAgICAgICAgICAgYWRqdXN0ZWQgPSB7IGlkOiBub2RlLmlkLCBzY2hlbWE6IGludGVybmFscy5mb3JrKG5vZGUuc2NoZW1hLCBhZGp1c3RlZC5pZCwgYWRqdXN0ZWQuc2NoZW1hKSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFkanVzdGVkLnNjaGVtYTtcbiAgICB9XG5cbiAgICBsYWJlbHMocGF0aCwgYmVoaW5kID0gW10pIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50ID0gcGF0aFswXTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX2dldChjdXJyZW50KTtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gWy4uLmJlaGluZCwgLi4ucGF0aF0uam9pbignLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9yd2FyZCA9IHBhdGguc2xpY2UoMSk7XG4gICAgICAgIGJlaGluZCA9IFsuLi5iZWhpbmQsIG5vZGUuc2NoZW1hLl9mbGFncy5sYWJlbCB8fCBjdXJyZW50XTtcbiAgICAgICAgaWYgKCFmb3J3YXJkLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJlaGluZC5qb2luKCcuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZS5zY2hlbWEuX2lkcy5sYWJlbHMoZm9yd2FyZCwgYmVoaW5kKTtcbiAgICB9XG5cbiAgICByZWFjaChwYXRoLCBiZWhpbmQgPSBbXSkge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBwYXRoWzBdO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5fZ2V0KGN1cnJlbnQpO1xuICAgICAgICBBc3NlcnQobm9kZSwgJ1NjaGVtYSBkb2VzIG5vdCBjb250YWluIHBhdGgnLCBbLi4uYmVoaW5kLCAuLi5wYXRoXS5qb2luKCcuJykpO1xuXG4gICAgICAgIGNvbnN0IGZvcndhcmQgPSBwYXRoLnNsaWNlKDEpO1xuICAgICAgICBpZiAoIWZvcndhcmQubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY2hlbWE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZS5zY2hlbWEuX2lkcy5yZWFjaChmb3J3YXJkLCBbLi4uYmVoaW5kLCBjdXJyZW50XSk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoc2NoZW1hLCB7IGtleSB9ID0ge30pIHtcblxuICAgICAgICBpZiAoIXNjaGVtYSB8fFxuICAgICAgICAgICAgIUNvbW1vbi5pc1NjaGVtYShzY2hlbWEpKSB7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY2hlbWEuJF9wcm9wZXJ0eSgnc2NoZW1hQ2hhaW4nKSB8fFxuICAgICAgICAgICAgc2NoZW1hLl9pZHMuX3NjaGVtYUNoYWluKSB7XG5cbiAgICAgICAgICAgIHRoaXMuX3NjaGVtYUNoYWluID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlkID0gc2NoZW1hLl9mbGFncy5pZDtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuX2J5SWQuZ2V0KGlkKTtcbiAgICAgICAgICAgIEFzc2VydCghZXhpc3RpbmcgfHwgZXhpc3Rpbmcuc2NoZW1hID09PSBzY2hlbWEsICdDYW5ub3QgYWRkIGRpZmZlcmVudCBzY2hlbWFzIHdpdGggdGhlIHNhbWUgaWQ6JywgaWQpO1xuICAgICAgICAgICAgQXNzZXJ0KCF0aGlzLl9ieUtleS5oYXMoaWQpLCAnU2NoZW1hIGlkIGNvbmZsaWN0cyB3aXRoIGV4aXN0aW5nIGtleTonLCBpZCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2J5SWQuc2V0KGlkLCB7IHNjaGVtYSwgaWQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBBc3NlcnQoIXRoaXMuX2J5S2V5LmhhcyhrZXkpLCAnU2NoZW1hIGFscmVhZHkgY29udGFpbnMga2V5OicsIGtleSk7XG4gICAgICAgICAgICBBc3NlcnQoIXRoaXMuX2J5SWQuaGFzKGtleSksICdTY2hlbWEga2V5IGNvbmZsaWN0cyB3aXRoIGV4aXN0aW5nIGlkOicsIGtleSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2J5S2V5LnNldChrZXksIHsgc2NoZW1hLCBpZDoga2V5IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG5cbiAgICAgICAgdGhpcy5fYnlJZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fYnlLZXkgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3NjaGVtYUNoYWluID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX2NvbGxlY3QocGF0aCwgYmVoaW5kID0gW10sIG5vZGVzID0gW10pIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50ID0gcGF0aFswXTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX2dldChjdXJyZW50KTtcbiAgICAgICAgQXNzZXJ0KG5vZGUsICdTY2hlbWEgZG9lcyBub3QgY29udGFpbiBwYXRoJywgWy4uLmJlaGluZCwgLi4ucGF0aF0uam9pbignLicpKTtcblxuICAgICAgICBub2RlcyA9IFtub2RlLCAuLi5ub2Rlc107XG5cbiAgICAgICAgY29uc3QgZm9yd2FyZCA9IHBhdGguc2xpY2UoMSk7XG4gICAgICAgIGlmICghZm9yd2FyZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlLnNjaGVtYS5faWRzLl9jb2xsZWN0KGZvcndhcmQsIFsuLi5iZWhpbmQsIGN1cnJlbnRdLCBub2Rlcyk7XG4gICAgfVxuXG4gICAgX2dldChpZCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9ieUlkLmdldChpZCkgfHwgdGhpcy5fYnlLZXkuZ2V0KGlkKTtcbiAgICB9XG59O1xuXG5cbmludGVybmFscy5mb3JrID0gZnVuY3Rpb24gKHNjaGVtYSwgaWQsIHJlcGxhY2VtZW50KSB7XG5cbiAgICBjb25zdCBlYWNoID0gKGl0ZW0sIHsga2V5IH0pID0+IHtcblxuICAgICAgICBpZiAoaWQgPT09IChpdGVtLl9mbGFncy5pZCB8fCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgb2JqID0gZXhwb3J0cy5zY2hlbWEoc2NoZW1hLCB7IGVhY2gsIHJlZjogZmFsc2UgfSk7XG4gICAgcmV0dXJuIG9iaiA/IG9iai4kX211dGF0ZVJlYnVpbGQoKSA6IHNjaGVtYTtcbn07XG5cblxuZXhwb3J0cy5zY2hlbWEgPSBmdW5jdGlvbiAoc2NoZW1hLCBvcHRpb25zKSB7XG5cbiAgICBsZXQgb2JqO1xuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHNjaGVtYS5fZmxhZ3MpIHtcbiAgICAgICAgaWYgKG5hbWVbMF0gPT09ICdfJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSBpbnRlcm5hbHMuc2NhbihzY2hlbWEuX2ZsYWdzW25hbWVdLCB7IHNvdXJjZTogJ2ZsYWdzJywgbmFtZSB9LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYmogPSBvYmogfHwgc2NoZW1hLmNsb25lKCk7XG4gICAgICAgICAgICBvYmouX2ZsYWdzW25hbWVdID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEuX3J1bGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSBzY2hlbWEuX3J1bGVzW2ldO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBpbnRlcm5hbHMuc2NhbihydWxlLmFyZ3MsIHsgc291cmNlOiAncnVsZXMnLCBuYW1lOiBydWxlLm5hbWUgfSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqID0gb2JqIHx8IHNjaGVtYS5jbG9uZSgpO1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBydWxlKTtcbiAgICAgICAgICAgIGNsb25lLmFyZ3MgPSByZXN1bHQ7XG4gICAgICAgICAgICBvYmouX3J1bGVzW2ldID0gY2xvbmU7XG5cbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVW5pcXVlID0gb2JqLl9zaW5nbGVSdWxlcy5nZXQocnVsZS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1VuaXF1ZSA9PT0gcnVsZSkge1xuICAgICAgICAgICAgICAgIG9iai5fc2luZ2xlUnVsZXMuc2V0KHJ1bGUubmFtZSwgY2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHNjaGVtYS4kX3Rlcm1zKSB7XG4gICAgICAgIGlmIChuYW1lWzBdID09PSAnXycpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaW50ZXJuYWxzLnNjYW4oc2NoZW1hLiRfdGVybXNbbmFtZV0sIHsgc291cmNlOiAndGVybXMnLCBuYW1lIH0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9iaiA9IG9iaiB8fCBzY2hlbWEuY2xvbmUoKTtcbiAgICAgICAgICAgIG9iai4kX3Rlcm1zW25hbWVdID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuaW50ZXJuYWxzLnNjYW4gPSBmdW5jdGlvbiAoaXRlbSwgc291cmNlLCBvcHRpb25zLCBfcGF0aCwgX2tleSkge1xuXG4gICAgY29uc3QgcGF0aCA9IF9wYXRoIHx8IFtdO1xuXG4gICAgaWYgKGl0ZW0gPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjbG9uZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gc291cmNlLnNvdXJjZSA9PT0gJ3Rlcm1zJyAmJiBzb3VyY2UubmFtZSA9PT0gJ2tleXMnICYmIGl0ZW1baV0ua2V5O1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaW50ZXJuYWxzLnNjYW4oaXRlbVtpXSwgc291cmNlLCBvcHRpb25zLCBbaSwgLi4ucGF0aF0sIGtleSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjbG9uZSA9IGNsb25lIHx8IGl0ZW0uc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBjbG9uZVtpXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY2hlbWEgIT09IGZhbHNlICYmIENvbW1vbi5pc1NjaGVtYShpdGVtKSB8fFxuICAgICAgICBvcHRpb25zLnJlZiAhPT0gZmFsc2UgJiYgUmVmLmlzUmVmKGl0ZW0pKSB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0aW9ucy5lYWNoKGl0ZW0sIHsgLi4uc291cmNlLCBwYXRoLCBrZXk6IF9rZXkgfSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaXRlbSkge1xuICAgICAgICBpZiAoa2V5WzBdID09PSAnXycpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaW50ZXJuYWxzLnNjYW4oaXRlbVtrZXldLCBzb3VyY2UsIG9wdGlvbnMsIFtrZXksIC4uLnBhdGhdLCBfa2V5KTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbG9uZSA9IGNsb25lIHx8IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgICAgY2xvbmVba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZTtcbn07XG4iXSwibmFtZXMiOlsiQXNzZXJ0IiwicmVxdWlyZSIsIkNvbW1vbiIsIlJlZiIsImludGVybmFscyIsImV4cG9ydHMiLCJJZHMiLCJjb25zdHJ1Y3RvciIsIl9ieUlkIiwiTWFwIiwiX2J5S2V5IiwiX3NjaGVtYUNoYWluIiwiY2xvbmUiLCJjb25jYXQiLCJzb3VyY2UiLCJpZCIsInZhbHVlIiwiZW50cmllcyIsImhhcyIsInNldCIsImtleSIsImZvcmsiLCJwYXRoIiwiYWRqdXN0ZXIiLCJyb290IiwiY2hhaW4iLCJfY29sbGVjdCIsInB1c2giLCJzY2hlbWEiLCJ0YWlsIiwic2hpZnQiLCJhZGp1c3RlZCIsImlzU2NoZW1hIiwibm9kZSIsImxhYmVscyIsImJlaGluZCIsImN1cnJlbnQiLCJfZ2V0Iiwiam9pbiIsImZvcndhcmQiLCJzbGljZSIsIl9mbGFncyIsImxhYmVsIiwibGVuZ3RoIiwiX2lkcyIsInJlYWNoIiwicmVnaXN0ZXIiLCIkX3Byb3BlcnR5IiwiZXhpc3RpbmciLCJnZXQiLCJyZXNldCIsIm5vZGVzIiwicmVwbGFjZW1lbnQiLCJlYWNoIiwiaXRlbSIsIm9iaiIsInJlZiIsIiRfbXV0YXRlUmVidWlsZCIsIm9wdGlvbnMiLCJuYW1lIiwicmVzdWx0Iiwic2NhbiIsInVuZGVmaW5lZCIsImkiLCJfcnVsZXMiLCJydWxlIiwiYXJncyIsIk9iamVjdCIsImFzc2lnbiIsImV4aXN0aW5nVW5pcXVlIiwiX3NpbmdsZVJ1bGVzIiwiJF90ZXJtcyIsIl9wYXRoIiwiX2tleSIsIkFycmF5IiwiaXNBcnJheSIsImlzUmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/modify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/ref.js":
/*!*************************************!*\
  !*** ./node_modules/joi/lib/ref.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"(rsc)/./node_modules/@hapi/hoek/lib/reach.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nlet Template;\nconst internals = {\n    symbol: Symbol(\"ref\"),\n    defaults: {\n        adjust: null,\n        in: false,\n        iterables: null,\n        map: null,\n        separator: \".\",\n        type: \"value\"\n    }\n};\nexports.create = function(key, options = {}) {\n    Assert(typeof key === \"string\", \"Invalid reference key:\", key);\n    Common.assertOptions(options, [\n        \"adjust\",\n        \"ancestor\",\n        \"in\",\n        \"iterables\",\n        \"map\",\n        \"prefix\",\n        \"render\",\n        \"separator\"\n    ]);\n    Assert(!options.prefix || typeof options.prefix === \"object\", \"options.prefix must be of type object\");\n    const ref = Object.assign({}, internals.defaults, options);\n    delete ref.prefix;\n    const separator = ref.separator;\n    const context = internals.context(key, separator, options.prefix);\n    ref.type = context.type;\n    key = context.key;\n    if (ref.type === \"value\") {\n        if (context.root) {\n            Assert(!separator || key[0] !== separator, \"Cannot specify relative path with root prefix\");\n            ref.ancestor = \"root\";\n            if (!key) {\n                key = null;\n            }\n        }\n        if (separator && separator === key) {\n            key = null;\n            ref.ancestor = 0;\n        } else {\n            if (ref.ancestor !== undefined) {\n                Assert(!separator || !key || key[0] !== separator, \"Cannot combine prefix with ancestor option\");\n            } else {\n                const [ancestor, slice] = internals.ancestor(key, separator);\n                if (slice) {\n                    key = key.slice(slice);\n                    if (key === \"\") {\n                        key = null;\n                    }\n                }\n                ref.ancestor = ancestor;\n            }\n        }\n    }\n    ref.path = separator ? key === null ? [] : key.split(separator) : [\n        key\n    ];\n    return new internals.Ref(ref);\n};\nexports[\"in\"] = function(key, options = {}) {\n    return exports.create(key, {\n        ...options,\n        in: true\n    });\n};\nexports.isRef = function(ref) {\n    return ref ? !!ref[Common.symbols.ref] : false;\n};\ninternals.Ref = class {\n    constructor(options){\n        Assert(typeof options === \"object\", \"Invalid reference construction\");\n        Common.assertOptions(options, [\n            \"adjust\",\n            \"ancestor\",\n            \"in\",\n            \"iterables\",\n            \"map\",\n            \"path\",\n            \"render\",\n            \"separator\",\n            \"type\",\n            \"depth\",\n            \"key\",\n            \"root\",\n            \"display\" // Overridden\n        ]);\n        Assert([\n            false,\n            undefined\n        ].includes(options.separator) || typeof options.separator === \"string\" && options.separator.length === 1, \"Invalid separator\");\n        Assert(!options.adjust || typeof options.adjust === \"function\", \"options.adjust must be a function\");\n        Assert(!options.map || Array.isArray(options.map), \"options.map must be an array\");\n        Assert(!options.map || !options.adjust, \"Cannot set both map and adjust options\");\n        Object.assign(this, internals.defaults, options);\n        Assert(this.type === \"value\" || this.ancestor === undefined, \"Non-value references cannot reference ancestors\");\n        if (Array.isArray(this.map)) {\n            this.map = new Map(this.map);\n        }\n        this.depth = this.path.length;\n        this.key = this.path.length ? this.path.join(this.separator) : null;\n        this.root = this.path[0];\n        this.updateDisplay();\n    }\n    resolve(value, state, prefs, local, options = {}) {\n        Assert(!this.in || options.in, \"Invalid in() reference usage\");\n        if (this.type === \"global\") {\n            return this._resolve(prefs.context, state, options);\n        }\n        if (this.type === \"local\") {\n            return this._resolve(local, state, options);\n        }\n        if (!this.ancestor) {\n            return this._resolve(value, state, options);\n        }\n        if (this.ancestor === \"root\") {\n            return this._resolve(state.ancestors[state.ancestors.length - 1], state, options);\n        }\n        Assert(this.ancestor <= state.ancestors.length, \"Invalid reference exceeds the schema root:\", this.display);\n        return this._resolve(state.ancestors[this.ancestor - 1], state, options);\n    }\n    _resolve(target, state, options) {\n        let resolved;\n        if (this.type === \"value\" && state.mainstay.shadow && options.shadow !== false) {\n            resolved = state.mainstay.shadow.get(this.absolute(state));\n        }\n        if (resolved === undefined) {\n            resolved = Reach(target, this.path, {\n                iterables: this.iterables,\n                functions: true\n            });\n        }\n        if (this.adjust) {\n            resolved = this.adjust(resolved);\n        }\n        if (this.map) {\n            const mapped = this.map.get(resolved);\n            if (mapped !== undefined) {\n                resolved = mapped;\n            }\n        }\n        if (state.mainstay) {\n            state.mainstay.tracer.resolve(state, this, resolved);\n        }\n        return resolved;\n    }\n    toString() {\n        return this.display;\n    }\n    absolute(state) {\n        return [\n            ...state.path.slice(0, -this.ancestor),\n            ...this.path\n        ];\n    }\n    clone() {\n        return new internals.Ref(this);\n    }\n    describe() {\n        const ref = {\n            path: this.path\n        };\n        if (this.type !== \"value\") {\n            ref.type = this.type;\n        }\n        if (this.separator !== \".\") {\n            ref.separator = this.separator;\n        }\n        if (this.type === \"value\" && this.ancestor !== 1) {\n            ref.ancestor = this.ancestor;\n        }\n        if (this.map) {\n            ref.map = [\n                ...this.map\n            ];\n        }\n        for (const key of [\n            \"adjust\",\n            \"iterables\",\n            \"render\"\n        ]){\n            if (this[key] !== null && this[key] !== undefined) {\n                ref[key] = this[key];\n            }\n        }\n        if (this.in !== false) {\n            ref.in = true;\n        }\n        return {\n            ref\n        };\n    }\n    updateDisplay() {\n        const key = this.key !== null ? this.key : \"\";\n        if (this.type !== \"value\") {\n            this.display = `ref:${this.type}:${key}`;\n            return;\n        }\n        if (!this.separator) {\n            this.display = `ref:${key}`;\n            return;\n        }\n        if (!this.ancestor) {\n            this.display = `ref:${this.separator}${key}`;\n            return;\n        }\n        if (this.ancestor === \"root\") {\n            this.display = `ref:root:${key}`;\n            return;\n        }\n        if (this.ancestor === 1) {\n            this.display = `ref:${key || \"..\"}`;\n            return;\n        }\n        const lead = new Array(this.ancestor + 1).fill(this.separator).join(\"\");\n        this.display = `ref:${lead}${key || \"\"}`;\n    }\n};\ninternals.Ref.prototype[Common.symbols.ref] = true;\nexports.build = function(desc) {\n    desc = Object.assign({}, internals.defaults, desc);\n    if (desc.type === \"value\" && desc.ancestor === undefined) {\n        desc.ancestor = 1;\n    }\n    return new internals.Ref(desc);\n};\ninternals.context = function(key, separator, prefix = {}) {\n    key = key.trim();\n    if (prefix) {\n        const globalp = prefix.global === undefined ? \"$\" : prefix.global;\n        if (globalp !== separator && key.startsWith(globalp)) {\n            return {\n                key: key.slice(globalp.length),\n                type: \"global\"\n            };\n        }\n        const local = prefix.local === undefined ? \"#\" : prefix.local;\n        if (local !== separator && key.startsWith(local)) {\n            return {\n                key: key.slice(local.length),\n                type: \"local\"\n            };\n        }\n        const root = prefix.root === undefined ? \"/\" : prefix.root;\n        if (root !== separator && key.startsWith(root)) {\n            return {\n                key: key.slice(root.length),\n                type: \"value\",\n                root: true\n            };\n        }\n    }\n    return {\n        key,\n        type: \"value\"\n    };\n};\ninternals.ancestor = function(key, separator) {\n    if (!separator) {\n        return [\n            1,\n            0\n        ]; // 'a_b' -> 1 (parent)\n    }\n    if (key[0] !== separator) {\n        return [\n            1,\n            0\n        ];\n    }\n    if (key[1] !== separator) {\n        return [\n            0,\n            1\n        ];\n    }\n    let i = 2;\n    while(key[i] === separator){\n        ++i;\n    }\n    return [\n        i - 1,\n        i\n    ]; // '...a.b.' -> 2 (grandparent)\n};\nexports.toSibling = 0;\nexports.toParent = 1;\nexports.Manager = class {\n    constructor(){\n        this.refs = []; // 0: [self refs], 1: [parent refs], 2: [grandparent refs], ...\n    }\n    register(source, target) {\n        if (!source) {\n            return;\n        }\n        target = target === undefined ? exports.toParent : target;\n        // Array\n        if (Array.isArray(source)) {\n            for (const ref of source){\n                this.register(ref, target);\n            }\n            return;\n        }\n        // Schema\n        if (Common.isSchema(source)) {\n            for (const item of source._refs.refs){\n                if (item.ancestor - target >= 0) {\n                    this.refs.push({\n                        ancestor: item.ancestor - target,\n                        root: item.root\n                    });\n                }\n            }\n            return;\n        }\n        // Reference\n        if (exports.isRef(source) && source.type === \"value\" && source.ancestor - target >= 0) {\n            this.refs.push({\n                ancestor: source.ancestor - target,\n                root: source.root\n            });\n        }\n        // Template\n        Template = Template || __webpack_require__(/*! ./template */ \"(rsc)/./node_modules/joi/lib/template.js\");\n        if (Template.isTemplate(source)) {\n            this.register(source.refs(), target);\n        }\n    }\n    get length() {\n        return this.refs.length;\n    }\n    clone() {\n        const copy = new exports.Manager();\n        copy.refs = Clone(this.refs);\n        return copy;\n    }\n    reset() {\n        this.refs = [];\n    }\n    roots() {\n        return this.refs.filter((ref)=>!ref.ancestor).map((ref)=>ref.root);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVM7WUFDN0IsSUFBSSxDQUFDRCxRQUFRLENBQUNDLE9BQU9GLElBQUksSUFBSXpCO1FBQ2pDO0lBQ0o7SUFFQSxJQUFJZixTQUFTO1FBRVQsT0FBTyxJQUFJLENBQUN3QyxJQUFJLENBQUN4QyxNQUFNO0lBQzNCO0lBRUF5QixRQUFRO1FBRUosTUFBTXVCLE9BQU8sSUFBSXJFLFFBQVE0RCxPQUFPO1FBQ2hDUyxLQUFLUixJQUFJLEdBQUczRSxNQUFNLElBQUksQ0FBQzJFLElBQUk7UUFDM0IsT0FBT1E7SUFDWDtJQUVBQyxRQUFRO1FBRUosSUFBSSxDQUFDVCxJQUFJLEdBQUcsRUFBRTtJQUNsQjtJQUVBVSxRQUFRO1FBRUosT0FBTyxJQUFJLENBQUNWLElBQUksQ0FBQ1csTUFBTSxDQUFDLENBQUNsRSxNQUFRLENBQUNBLElBQUlLLFFBQVEsRUFBRWQsR0FBRyxDQUFDLENBQUNTLE1BQVFBLElBQUlJLElBQUk7SUFDekU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc3RlaGVyby8uL25vZGVfbW9kdWxlcy9qb2kvbGliL3JlZi5qcz8xNmRjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXJ0ID0gcmVxdWlyZSgnQGhhcGkvaG9lay9saWIvYXNzZXJ0Jyk7XG5jb25zdCBDbG9uZSA9IHJlcXVpcmUoJ0BoYXBpL2hvZWsvbGliL2Nsb25lJyk7XG5jb25zdCBSZWFjaCA9IHJlcXVpcmUoJ0BoYXBpL2hvZWsvbGliL3JlYWNoJyk7XG5cbmNvbnN0IENvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbmxldCBUZW1wbGF0ZTtcblxuXG5jb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgc3ltYm9sOiBTeW1ib2woJ3JlZicpLCAgICAgIC8vIFVzZWQgdG8gaW50ZXJuYWxseSBpZGVudGlmeSByZWZlcmVuY2VzIChzaGFyZWQgd2l0aCBvdGhlciBqb2kgdmVyc2lvbnMpXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWRqdXN0OiBudWxsLFxuICAgICAgICBpbjogZmFsc2UsXG4gICAgICAgIGl0ZXJhYmxlczogbnVsbCxcbiAgICAgICAgbWFwOiBudWxsLFxuICAgICAgICBzZXBhcmF0b3I6ICcuJyxcbiAgICAgICAgdHlwZTogJ3ZhbHVlJ1xuICAgIH1cbn07XG5cblxuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zID0ge30pIHtcblxuICAgIEFzc2VydCh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJywgJ0ludmFsaWQgcmVmZXJlbmNlIGtleTonLCBrZXkpO1xuICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsnYWRqdXN0JywgJ2FuY2VzdG9yJywgJ2luJywgJ2l0ZXJhYmxlcycsICdtYXAnLCAncHJlZml4JywgJ3JlbmRlcicsICdzZXBhcmF0b3InXSk7XG4gICAgQXNzZXJ0KCFvcHRpb25zLnByZWZpeCB8fCB0eXBlb2Ygb3B0aW9ucy5wcmVmaXggPT09ICdvYmplY3QnLCAnb3B0aW9ucy5wcmVmaXggbXVzdCBiZSBvZiB0eXBlIG9iamVjdCcpO1xuXG4gICAgY29uc3QgcmVmID0gT2JqZWN0LmFzc2lnbih7fSwgaW50ZXJuYWxzLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICBkZWxldGUgcmVmLnByZWZpeDtcblxuICAgIGNvbnN0IHNlcGFyYXRvciA9IHJlZi5zZXBhcmF0b3I7XG4gICAgY29uc3QgY29udGV4dCA9IGludGVybmFscy5jb250ZXh0KGtleSwgc2VwYXJhdG9yLCBvcHRpb25zLnByZWZpeCk7XG4gICAgcmVmLnR5cGUgPSBjb250ZXh0LnR5cGU7XG4gICAga2V5ID0gY29udGV4dC5rZXk7XG5cbiAgICBpZiAocmVmLnR5cGUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgaWYgKGNvbnRleHQucm9vdCkge1xuICAgICAgICAgICAgQXNzZXJ0KCFzZXBhcmF0b3IgfHwga2V5WzBdICE9PSBzZXBhcmF0b3IsICdDYW5ub3Qgc3BlY2lmeSByZWxhdGl2ZSBwYXRoIHdpdGggcm9vdCBwcmVmaXgnKTtcbiAgICAgICAgICAgIHJlZi5hbmNlc3RvciA9ICdyb290JztcbiAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXBhcmF0b3IgJiZcbiAgICAgICAgICAgIHNlcGFyYXRvciA9PT0ga2V5KSB7XG5cbiAgICAgICAgICAgIGtleSA9IG51bGw7XG4gICAgICAgICAgICByZWYuYW5jZXN0b3IgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlZi5hbmNlc3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgQXNzZXJ0KCFzZXBhcmF0b3IgfHwgIWtleSB8fCBrZXlbMF0gIT09IHNlcGFyYXRvciwgJ0Nhbm5vdCBjb21iaW5lIHByZWZpeCB3aXRoIGFuY2VzdG9yIG9wdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2FuY2VzdG9yLCBzbGljZV0gPSBpbnRlcm5hbHMuYW5jZXN0b3Ioa2V5LCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgIGlmIChzbGljZSkge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXkuc2xpY2Uoc2xpY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlZi5hbmNlc3RvciA9IGFuY2VzdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmLnBhdGggPSBzZXBhcmF0b3IgPyAoa2V5ID09PSBudWxsID8gW10gOiBrZXkuc3BsaXQoc2VwYXJhdG9yKSkgOiBba2V5XTtcblxuICAgIHJldHVybiBuZXcgaW50ZXJuYWxzLlJlZihyZWYpO1xufTtcblxuXG5leHBvcnRzLmluID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucyA9IHt9KSB7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5jcmVhdGUoa2V5LCB7IC4uLm9wdGlvbnMsIGluOiB0cnVlIH0pO1xufTtcblxuXG5leHBvcnRzLmlzUmVmID0gZnVuY3Rpb24gKHJlZikge1xuXG4gICAgcmV0dXJuIHJlZiA/ICEhcmVmW0NvbW1vbi5zeW1ib2xzLnJlZl0gOiBmYWxzZTtcbn07XG5cblxuaW50ZXJuYWxzLlJlZiA9IGNsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblxuICAgICAgICBBc3NlcnQodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnLCAnSW52YWxpZCByZWZlcmVuY2UgY29uc3RydWN0aW9uJyk7XG4gICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFtcbiAgICAgICAgICAgICdhZGp1c3QnLCAnYW5jZXN0b3InLCAnaW4nLCAnaXRlcmFibGVzJywgJ21hcCcsICdwYXRoJywgJ3JlbmRlcicsICdzZXBhcmF0b3InLCAndHlwZScsICAvLyBDb3BpZWRcbiAgICAgICAgICAgICdkZXB0aCcsICdrZXknLCAncm9vdCcsICdkaXNwbGF5JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdmVycmlkZGVuXG4gICAgICAgIF0pO1xuXG4gICAgICAgIEFzc2VydChbZmFsc2UsIHVuZGVmaW5lZF0uaW5jbHVkZXMob3B0aW9ucy5zZXBhcmF0b3IpIHx8IHR5cGVvZiBvcHRpb25zLnNlcGFyYXRvciA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5zZXBhcmF0b3IubGVuZ3RoID09PSAxLCAnSW52YWxpZCBzZXBhcmF0b3InKTtcbiAgICAgICAgQXNzZXJ0KCFvcHRpb25zLmFkanVzdCB8fCB0eXBlb2Ygb3B0aW9ucy5hZGp1c3QgPT09ICdmdW5jdGlvbicsICdvcHRpb25zLmFkanVzdCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgQXNzZXJ0KCFvcHRpb25zLm1hcCB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMubWFwKSwgJ29wdGlvbnMubWFwIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgQXNzZXJ0KCFvcHRpb25zLm1hcCB8fCAhb3B0aW9ucy5hZGp1c3QsICdDYW5ub3Qgc2V0IGJvdGggbWFwIGFuZCBhZGp1c3Qgb3B0aW9ucycpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW50ZXJuYWxzLmRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBBc3NlcnQodGhpcy50eXBlID09PSAndmFsdWUnIHx8IHRoaXMuYW5jZXN0b3IgPT09IHVuZGVmaW5lZCwgJ05vbi12YWx1ZSByZWZlcmVuY2VzIGNhbm5vdCByZWZlcmVuY2UgYW5jZXN0b3JzJyk7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5tYXApKSB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAodGhpcy5tYXApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXB0aCA9IHRoaXMucGF0aC5sZW5ndGg7XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5wYXRoLmxlbmd0aCA/IHRoaXMucGF0aC5qb2luKHRoaXMuc2VwYXJhdG9yKSA6IG51bGw7XG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMucGF0aFswXTtcblxuICAgICAgICB0aGlzLnVwZGF0ZURpc3BsYXkoKTtcbiAgICB9XG5cbiAgICByZXNvbHZlKHZhbHVlLCBzdGF0ZSwgcHJlZnMsIGxvY2FsLCBvcHRpb25zID0ge30pIHtcblxuICAgICAgICBBc3NlcnQoIXRoaXMuaW4gfHwgb3B0aW9ucy5pbiwgJ0ludmFsaWQgaW4oKSByZWZlcmVuY2UgdXNhZ2UnKTtcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUocHJlZnMuY29udGV4dCwgc3RhdGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUobG9jYWwsIHN0YXRlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5hbmNlc3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIHN0YXRlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFuY2VzdG9yID09PSAncm9vdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHN0YXRlLmFuY2VzdG9yc1tzdGF0ZS5hbmNlc3RvcnMubGVuZ3RoIC0gMV0sIHN0YXRlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEFzc2VydCh0aGlzLmFuY2VzdG9yIDw9IHN0YXRlLmFuY2VzdG9ycy5sZW5ndGgsICdJbnZhbGlkIHJlZmVyZW5jZSBleGNlZWRzIHRoZSBzY2hlbWEgcm9vdDonLCB0aGlzLmRpc3BsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZShzdGF0ZS5hbmNlc3RvcnNbdGhpcy5hbmNlc3RvciAtIDFdLCBzdGF0ZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgX3Jlc29sdmUodGFyZ2V0LCBzdGF0ZSwgb3B0aW9ucykge1xuXG4gICAgICAgIGxldCByZXNvbHZlZDtcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAndmFsdWUnICYmXG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS5zaGFkb3cgJiZcbiAgICAgICAgICAgIG9wdGlvbnMuc2hhZG93ICE9PSBmYWxzZSkge1xuXG4gICAgICAgICAgICByZXNvbHZlZCA9IHN0YXRlLm1haW5zdGF5LnNoYWRvdy5nZXQodGhpcy5hYnNvbHV0ZShzdGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc29sdmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gUmVhY2godGFyZ2V0LCB0aGlzLnBhdGgsIHsgaXRlcmFibGVzOiB0aGlzLml0ZXJhYmxlcywgZnVuY3Rpb25zOiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWRqdXN0KSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHRoaXMuYWRqdXN0KHJlc29sdmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hcCkge1xuICAgICAgICAgICAgY29uc3QgbWFwcGVkID0gdGhpcy5tYXAuZ2V0KHJlc29sdmVkKTtcbiAgICAgICAgICAgIGlmIChtYXBwZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gbWFwcGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLm1haW5zdGF5KSB7XG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIucmVzb2x2ZShzdGF0ZSwgdGhpcywgcmVzb2x2ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXk7XG4gICAgfVxuXG4gICAgYWJzb2x1dGUoc3RhdGUpIHtcblxuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLnBhdGguc2xpY2UoMCwgLXRoaXMuYW5jZXN0b3IpLCAuLi50aGlzLnBhdGhdO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuXG4gICAgICAgIHJldHVybiBuZXcgaW50ZXJuYWxzLlJlZih0aGlzKTtcbiAgICB9XG5cbiAgICBkZXNjcmliZSgpIHtcblxuICAgICAgICBjb25zdCByZWYgPSB7IHBhdGg6IHRoaXMucGF0aCB9O1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIHJlZi50eXBlID0gdGhpcy50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2VwYXJhdG9yICE9PSAnLicpIHtcbiAgICAgICAgICAgIHJlZi5zZXBhcmF0b3IgPSB0aGlzLnNlcGFyYXRvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICd2YWx1ZScgJiZcbiAgICAgICAgICAgIHRoaXMuYW5jZXN0b3IgIT09IDEpIHtcblxuICAgICAgICAgICAgcmVmLmFuY2VzdG9yID0gdGhpcy5hbmNlc3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hcCkge1xuICAgICAgICAgICAgcmVmLm1hcCA9IFsuLi50aGlzLm1hcF07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ2FkanVzdCcsICdpdGVyYWJsZXMnLCAncmVuZGVyJ10pIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2tleV0gIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgcmVmW2tleV0gPSB0aGlzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlZi5pbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyByZWYgfTtcbiAgICB9XG5cbiAgICB1cGRhdGVEaXNwbGF5KCkge1xuXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5ICE9PSBudWxsID8gdGhpcy5rZXkgOiAnJztcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ID0gYHJlZjoke3RoaXMudHlwZX06JHtrZXl9YDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5zZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSA9IGByZWY6JHtrZXl9YDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5hbmNlc3Rvcikge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ID0gYHJlZjoke3RoaXMuc2VwYXJhdG9yfSR7a2V5fWA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hbmNlc3RvciA9PT0gJ3Jvb3QnKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkgPSBgcmVmOnJvb3Q6JHtrZXl9YDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFuY2VzdG9yID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkgPSBgcmVmOiR7a2V5IHx8ICcuLid9YDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxlYWQgPSBuZXcgQXJyYXkodGhpcy5hbmNlc3RvciArIDEpLmZpbGwodGhpcy5zZXBhcmF0b3IpLmpvaW4oJycpO1xuICAgICAgICB0aGlzLmRpc3BsYXkgPSBgcmVmOiR7bGVhZH0ke2tleSB8fCAnJ31gO1xuICAgIH1cbn07XG5cblxuaW50ZXJuYWxzLlJlZi5wcm90b3R5cGVbQ29tbW9uLnN5bWJvbHMucmVmXSA9IHRydWU7XG5cblxuZXhwb3J0cy5idWlsZCA9IGZ1bmN0aW9uIChkZXNjKSB7XG5cbiAgICBkZXNjID0gT2JqZWN0LmFzc2lnbih7fSwgaW50ZXJuYWxzLmRlZmF1bHRzLCBkZXNjKTtcbiAgICBpZiAoZGVzYy50eXBlID09PSAndmFsdWUnICYmXG4gICAgICAgIGRlc2MuYW5jZXN0b3IgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgIGRlc2MuYW5jZXN0b3IgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgaW50ZXJuYWxzLlJlZihkZXNjKTtcbn07XG5cblxuaW50ZXJuYWxzLmNvbnRleHQgPSBmdW5jdGlvbiAoa2V5LCBzZXBhcmF0b3IsIHByZWZpeCA9IHt9KSB7XG5cbiAgICBrZXkgPSBrZXkudHJpbSgpO1xuXG4gICAgaWYgKHByZWZpeCkge1xuICAgICAgICBjb25zdCBnbG9iYWxwID0gcHJlZml4Lmdsb2JhbCA9PT0gdW5kZWZpbmVkID8gJyQnIDogcHJlZml4Lmdsb2JhbDtcbiAgICAgICAgaWYgKGdsb2JhbHAgIT09IHNlcGFyYXRvciAmJlxuICAgICAgICAgICAga2V5LnN0YXJ0c1dpdGgoZ2xvYmFscCkpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHsga2V5OiBrZXkuc2xpY2UoZ2xvYmFscC5sZW5ndGgpLCB0eXBlOiAnZ2xvYmFsJyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbG9jYWwgPSBwcmVmaXgubG9jYWwgPT09IHVuZGVmaW5lZCA/ICcjJyA6IHByZWZpeC5sb2NhbDtcbiAgICAgICAgaWYgKGxvY2FsICE9PSBzZXBhcmF0b3IgJiZcbiAgICAgICAgICAgIGtleS5zdGFydHNXaXRoKGxvY2FsKSkge1xuXG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IGtleS5zbGljZShsb2NhbC5sZW5ndGgpLCB0eXBlOiAnbG9jYWwnIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb290ID0gcHJlZml4LnJvb3QgPT09IHVuZGVmaW5lZCA/ICcvJyA6IHByZWZpeC5yb290O1xuICAgICAgICBpZiAocm9vdCAhPT0gc2VwYXJhdG9yICYmXG4gICAgICAgICAgICBrZXkuc3RhcnRzV2l0aChyb290KSkge1xuXG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IGtleS5zbGljZShyb290Lmxlbmd0aCksIHR5cGU6ICd2YWx1ZScsIHJvb3Q6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGtleSwgdHlwZTogJ3ZhbHVlJyB9O1xufTtcblxuXG5pbnRlcm5hbHMuYW5jZXN0b3IgPSBmdW5jdGlvbiAoa2V5LCBzZXBhcmF0b3IpIHtcblxuICAgIGlmICghc2VwYXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBbMSwgMF07ICAgICAgICAgICAgICAvLyAnYV9iJyAtPiAxIChwYXJlbnQpXG4gICAgfVxuXG4gICAgaWYgKGtleVswXSAhPT0gc2VwYXJhdG9yKSB7ICAgICAvLyAnYS5iJyAtPiAxIChwYXJlbnQpXG4gICAgICAgIHJldHVybiBbMSwgMF07XG4gICAgfVxuXG4gICAgaWYgKGtleVsxXSAhPT0gc2VwYXJhdG9yKSB7ICAgICAvLyAnLmEuYicgLT4gMCAoc2VsZilcbiAgICAgICAgcmV0dXJuIFswLCAxXTtcbiAgICB9XG5cbiAgICBsZXQgaSA9IDI7XG4gICAgd2hpbGUgKGtleVtpXSA9PT0gc2VwYXJhdG9yKSB7XG4gICAgICAgICsraTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2kgLSAxLCBpXTsgICAgICAgICAgICAgIC8vICcuLi5hLmIuJyAtPiAyIChncmFuZHBhcmVudClcbn07XG5cblxuZXhwb3J0cy50b1NpYmxpbmcgPSAwO1xuXG5leHBvcnRzLnRvUGFyZW50ID0gMTtcblxuXG5leHBvcnRzLk1hbmFnZXIgPSBjbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgICAgICB0aGlzLnJlZnMgPSBbXTsgICAgICAgICAgICAgICAgICAgICAvLyAwOiBbc2VsZiByZWZzXSwgMTogW3BhcmVudCByZWZzXSwgMjogW2dyYW5kcGFyZW50IHJlZnNdLCAuLi5cbiAgICB9XG5cbiAgICByZWdpc3Rlcihzb3VyY2UsIHRhcmdldCkge1xuXG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQgPT09IHVuZGVmaW5lZCA/IGV4cG9ydHMudG9QYXJlbnQgOiB0YXJnZXQ7XG5cbiAgICAgICAgLy8gQXJyYXlcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlZiBvZiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKHJlZiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2NoZW1hXG5cbiAgICAgICAgaWYgKENvbW1vbi5pc1NjaGVtYShzb3VyY2UpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc291cmNlLl9yZWZzLnJlZnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5hbmNlc3RvciAtIHRhcmdldCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcy5wdXNoKHsgYW5jZXN0b3I6IGl0ZW0uYW5jZXN0b3IgLSB0YXJnZXQsIHJvb3Q6IGl0ZW0ucm9vdCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlZmVyZW5jZVxuXG4gICAgICAgIGlmIChleHBvcnRzLmlzUmVmKHNvdXJjZSkgJiZcbiAgICAgICAgICAgIHNvdXJjZS50eXBlID09PSAndmFsdWUnICYmXG4gICAgICAgICAgICBzb3VyY2UuYW5jZXN0b3IgLSB0YXJnZXQgPj0gMCkge1xuXG4gICAgICAgICAgICB0aGlzLnJlZnMucHVzaCh7IGFuY2VzdG9yOiBzb3VyY2UuYW5jZXN0b3IgLSB0YXJnZXQsIHJvb3Q6IHNvdXJjZS5yb290IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVtcGxhdGVcblxuICAgICAgICBUZW1wbGF0ZSA9IFRlbXBsYXRlIHx8IHJlcXVpcmUoJy4vdGVtcGxhdGUnKTtcblxuICAgICAgICBpZiAoVGVtcGxhdGUuaXNUZW1wbGF0ZShzb3VyY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKHNvdXJjZS5yZWZzKCksIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZnMubGVuZ3RoO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuXG4gICAgICAgIGNvbnN0IGNvcHkgPSBuZXcgZXhwb3J0cy5NYW5hZ2VyKCk7XG4gICAgICAgIGNvcHkucmVmcyA9IENsb25lKHRoaXMucmVmcyk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuXG4gICAgICAgIHRoaXMucmVmcyA9IFtdO1xuICAgIH1cblxuICAgIHJvb3RzKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZnMuZmlsdGVyKChyZWYpID0+ICFyZWYuYW5jZXN0b3IpLm1hcCgocmVmKSA9PiByZWYucm9vdCk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJBc3NlcnQiLCJyZXF1aXJlIiwiQ2xvbmUiLCJSZWFjaCIsIkNvbW1vbiIsIlRlbXBsYXRlIiwiaW50ZXJuYWxzIiwic3ltYm9sIiwiU3ltYm9sIiwiZGVmYXVsdHMiLCJhZGp1c3QiLCJpbiIsIml0ZXJhYmxlcyIsIm1hcCIsInNlcGFyYXRvciIsInR5cGUiLCJleHBvcnRzIiwiY3JlYXRlIiwia2V5Iiwib3B0aW9ucyIsImFzc2VydE9wdGlvbnMiLCJwcmVmaXgiLCJyZWYiLCJPYmplY3QiLCJhc3NpZ24iLCJjb250ZXh0Iiwicm9vdCIsImFuY2VzdG9yIiwidW5kZWZpbmVkIiwic2xpY2UiLCJwYXRoIiwic3BsaXQiLCJSZWYiLCJpc1JlZiIsInN5bWJvbHMiLCJjb25zdHJ1Y3RvciIsImluY2x1ZGVzIiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwiTWFwIiwiZGVwdGgiLCJqb2luIiwidXBkYXRlRGlzcGxheSIsInJlc29sdmUiLCJ2YWx1ZSIsInN0YXRlIiwicHJlZnMiLCJsb2NhbCIsIl9yZXNvbHZlIiwiYW5jZXN0b3JzIiwiZGlzcGxheSIsInRhcmdldCIsInJlc29sdmVkIiwibWFpbnN0YXkiLCJzaGFkb3ciLCJnZXQiLCJhYnNvbHV0ZSIsImZ1bmN0aW9ucyIsIm1hcHBlZCIsInRyYWNlciIsInRvU3RyaW5nIiwiY2xvbmUiLCJkZXNjcmliZSIsImxlYWQiLCJmaWxsIiwicHJvdG90eXBlIiwiYnVpbGQiLCJkZXNjIiwidHJpbSIsImdsb2JhbHAiLCJnbG9iYWwiLCJzdGFydHNXaXRoIiwiaSIsInRvU2libGluZyIsInRvUGFyZW50IiwiTWFuYWdlciIsInJlZnMiLCJyZWdpc3RlciIsInNvdXJjZSIsImlzU2NoZW1hIiwiaXRlbSIsIl9yZWZzIiwicHVzaCIsImlzVGVtcGxhdGUiLCJjb3B5IiwicmVzZXQiLCJyb290cyIsImZpbHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/ref.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/schemas.js":
/*!*****************************************!*\
  !*** ./node_modules/joi/lib/schemas.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Joi = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/joi/lib/index.js\");\nconst internals = {};\n// Preferences\ninternals.wrap = Joi.string().min(1).max(2).allow(false);\nexports.preferences = Joi.object({\n    allowUnknown: Joi.boolean(),\n    abortEarly: Joi.boolean(),\n    artifacts: Joi.boolean(),\n    cache: Joi.boolean(),\n    context: Joi.object(),\n    convert: Joi.boolean(),\n    dateFormat: Joi.valid(\"date\", \"iso\", \"string\", \"time\", \"utc\"),\n    debug: Joi.boolean(),\n    errors: {\n        escapeHtml: Joi.boolean(),\n        label: Joi.valid(\"path\", \"key\", false),\n        language: [\n            Joi.string(),\n            Joi.object().ref()\n        ],\n        render: Joi.boolean(),\n        stack: Joi.boolean(),\n        wrap: {\n            label: internals.wrap,\n            array: internals.wrap,\n            string: internals.wrap\n        }\n    },\n    externals: Joi.boolean(),\n    messages: Joi.object(),\n    noDefaults: Joi.boolean(),\n    nonEnumerables: Joi.boolean(),\n    presence: Joi.valid(\"required\", \"optional\", \"forbidden\"),\n    skipFunctions: Joi.boolean(),\n    stripUnknown: Joi.object({\n        arrays: Joi.boolean(),\n        objects: Joi.boolean()\n    }).or(\"arrays\", \"objects\").allow(true, false),\n    warnings: Joi.boolean()\n}).strict();\n// Extensions\ninternals.nameRx = /^[a-zA-Z0-9]\\w*$/;\ninternals.rule = Joi.object({\n    alias: Joi.array().items(Joi.string().pattern(internals.nameRx)).single(),\n    args: Joi.array().items(Joi.string(), Joi.object({\n        name: Joi.string().pattern(internals.nameRx).required(),\n        ref: Joi.boolean(),\n        assert: Joi.alternatives([\n            Joi.function(),\n            Joi.object().schema()\n        ]).conditional(\"ref\", {\n            is: true,\n            then: Joi.required()\n        }),\n        normalize: Joi.function(),\n        message: Joi.string().when(\"assert\", {\n            is: Joi.function(),\n            then: Joi.required()\n        })\n    })),\n    convert: Joi.boolean(),\n    manifest: Joi.boolean(),\n    method: Joi.function().allow(false),\n    multi: Joi.boolean(),\n    validate: Joi.function()\n});\nexports.extension = Joi.object({\n    type: Joi.alternatives([\n        Joi.string(),\n        Joi.object().regex()\n    ]).required(),\n    args: Joi.function(),\n    cast: Joi.object().pattern(internals.nameRx, Joi.object({\n        from: Joi.function().maxArity(1).required(),\n        to: Joi.function().minArity(1).maxArity(2).required()\n    })),\n    base: Joi.object().schema().when(\"type\", {\n        is: Joi.object().regex(),\n        then: Joi.forbidden()\n    }),\n    coerce: [\n        Joi.function().maxArity(3),\n        Joi.object({\n            method: Joi.function().maxArity(3).required(),\n            from: Joi.array().items(Joi.string()).single()\n        })\n    ],\n    flags: Joi.object().pattern(internals.nameRx, Joi.object({\n        setter: Joi.string(),\n        default: Joi.any()\n    })),\n    manifest: {\n        build: Joi.function().arity(2)\n    },\n    messages: [\n        Joi.object(),\n        Joi.string()\n    ],\n    modifiers: Joi.object().pattern(internals.nameRx, Joi.function().minArity(1).maxArity(2)),\n    overrides: Joi.object().pattern(internals.nameRx, Joi.function()),\n    prepare: Joi.function().maxArity(3),\n    rebuild: Joi.function().arity(1),\n    rules: Joi.object().pattern(internals.nameRx, internals.rule),\n    terms: Joi.object().pattern(internals.nameRx, Joi.object({\n        init: Joi.array().allow(null).required(),\n        manifest: Joi.object().pattern(/.+/, [\n            Joi.valid(\"schema\", \"single\"),\n            Joi.object({\n                mapped: Joi.object({\n                    from: Joi.string().required(),\n                    to: Joi.string().required()\n                }).required()\n            })\n        ])\n    })),\n    validate: Joi.function().maxArity(3)\n}).strict();\nexports.extensions = Joi.array().items(Joi.object(), Joi.function().arity(1)).strict();\n// Manifest\ninternals.desc = {\n    buffer: Joi.object({\n        buffer: Joi.string()\n    }),\n    func: Joi.object({\n        function: Joi.function().required(),\n        options: {\n            literal: true\n        }\n    }),\n    override: Joi.object({\n        override: true\n    }),\n    ref: Joi.object({\n        ref: Joi.object({\n            type: Joi.valid(\"value\", \"global\", \"local\"),\n            path: Joi.array().required(),\n            separator: Joi.string().length(1).allow(false),\n            ancestor: Joi.number().min(0).integer().allow(\"root\"),\n            map: Joi.array().items(Joi.array().length(2)).min(1),\n            adjust: Joi.function(),\n            iterables: Joi.boolean(),\n            in: Joi.boolean(),\n            render: Joi.boolean()\n        }).required()\n    }),\n    regex: Joi.object({\n        regex: Joi.string().min(3)\n    }),\n    special: Joi.object({\n        special: Joi.valid(\"deep\").required()\n    }),\n    template: Joi.object({\n        template: Joi.string().required(),\n        options: Joi.object()\n    }),\n    value: Joi.object({\n        value: Joi.alternatives([\n            Joi.object(),\n            Joi.array()\n        ]).required()\n    })\n};\ninternals.desc.entity = Joi.alternatives([\n    Joi.array().items(Joi.link(\"...\")),\n    Joi.boolean(),\n    Joi.function(),\n    Joi.number(),\n    Joi.string(),\n    internals.desc.buffer,\n    internals.desc.func,\n    internals.desc.ref,\n    internals.desc.regex,\n    internals.desc.special,\n    internals.desc.template,\n    internals.desc.value,\n    Joi.link(\"/\")\n]);\ninternals.desc.values = Joi.array().items(null, Joi.boolean(), Joi.function(), Joi.number().allow(Infinity, -Infinity), Joi.string().allow(\"\"), Joi.symbol(), internals.desc.buffer, internals.desc.func, internals.desc.override, internals.desc.ref, internals.desc.regex, internals.desc.template, internals.desc.value);\ninternals.desc.messages = Joi.object().pattern(/.+/, [\n    Joi.string(),\n    internals.desc.template,\n    Joi.object().pattern(/.+/, [\n        Joi.string(),\n        internals.desc.template\n    ])\n]);\nexports.description = Joi.object({\n    type: Joi.string().required(),\n    flags: Joi.object({\n        cast: Joi.string(),\n        default: Joi.any(),\n        description: Joi.string(),\n        empty: Joi.link(\"/\"),\n        failover: internals.desc.entity,\n        id: Joi.string(),\n        label: Joi.string(),\n        only: true,\n        presence: [\n            \"optional\",\n            \"required\",\n            \"forbidden\"\n        ],\n        result: [\n            \"raw\",\n            \"strip\"\n        ],\n        strip: Joi.boolean(),\n        unit: Joi.string()\n    }).unknown(),\n    preferences: {\n        allowUnknown: Joi.boolean(),\n        abortEarly: Joi.boolean(),\n        artifacts: Joi.boolean(),\n        cache: Joi.boolean(),\n        convert: Joi.boolean(),\n        dateFormat: [\n            \"date\",\n            \"iso\",\n            \"string\",\n            \"time\",\n            \"utc\"\n        ],\n        errors: {\n            escapeHtml: Joi.boolean(),\n            label: [\n                \"path\",\n                \"key\"\n            ],\n            language: [\n                Joi.string(),\n                internals.desc.ref\n            ],\n            wrap: {\n                label: internals.wrap,\n                array: internals.wrap\n            }\n        },\n        externals: Joi.boolean(),\n        messages: internals.desc.messages,\n        noDefaults: Joi.boolean(),\n        nonEnumerables: Joi.boolean(),\n        presence: [\n            \"required\",\n            \"optional\",\n            \"forbidden\"\n        ],\n        skipFunctions: Joi.boolean(),\n        stripUnknown: Joi.object({\n            arrays: Joi.boolean(),\n            objects: Joi.boolean()\n        }).or(\"arrays\", \"objects\").allow(true, false),\n        warnings: Joi.boolean()\n    },\n    allow: internals.desc.values,\n    invalid: internals.desc.values,\n    rules: Joi.array().min(1).items({\n        name: Joi.string().required(),\n        args: Joi.object().min(1),\n        keep: Joi.boolean(),\n        message: [\n            Joi.string(),\n            internals.desc.messages\n        ],\n        warn: Joi.boolean()\n    }),\n    // Terms\n    keys: Joi.object().pattern(/.*/, Joi.link(\"/\")),\n    link: internals.desc.ref\n}).pattern(/^[a-z]\\w*$/, Joi.any());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/state.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/state.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"(rsc)/./node_modules/@hapi/hoek/lib/reach.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {\n    value: Symbol(\"value\")\n};\nmodule.exports = internals.State = class {\n    constructor(path, ancestors, state){\n        this.path = path;\n        this.ancestors = ancestors; // [parent, ..., root]\n        this.mainstay = state.mainstay;\n        this.schemas = state.schemas; // [current, ..., root]\n        this.debug = null;\n    }\n    localize(path, ancestors = null, schema = null) {\n        const state = new internals.State(path, ancestors, this);\n        if (schema && state.schemas) {\n            state.schemas = [\n                internals.schemas(schema),\n                ...state.schemas\n            ];\n        }\n        return state;\n    }\n    nest(schema, debug) {\n        const state = new internals.State(this.path, this.ancestors, this);\n        state.schemas = state.schemas && [\n            internals.schemas(schema),\n            ...state.schemas\n        ];\n        state.debug = debug;\n        return state;\n    }\n    shadow(value, reason) {\n        this.mainstay.shadow = this.mainstay.shadow || new internals.Shadow();\n        this.mainstay.shadow.set(this.path, value, reason);\n    }\n    snapshot() {\n        if (this.mainstay.shadow) {\n            this._snapshot = Clone(this.mainstay.shadow.node(this.path));\n        }\n        this.mainstay.snapshot();\n    }\n    restore() {\n        if (this.mainstay.shadow) {\n            this.mainstay.shadow.override(this.path, this._snapshot);\n            this._snapshot = undefined;\n        }\n        this.mainstay.restore();\n    }\n    commit() {\n        if (this.mainstay.shadow) {\n            this.mainstay.shadow.override(this.path, this._snapshot);\n            this._snapshot = undefined;\n        }\n        this.mainstay.commit();\n    }\n};\ninternals.schemas = function(schema) {\n    if (Common.isSchema(schema)) {\n        return {\n            schema\n        };\n    }\n    return schema;\n};\ninternals.Shadow = class {\n    constructor(){\n        this._values = null;\n    }\n    set(path, value, reason) {\n        if (!path.length) {\n            return;\n        }\n        if (reason === \"strip\" && typeof path[path.length - 1] === \"number\") {\n            return;\n        }\n        this._values = this._values || new Map();\n        let node = this._values;\n        for(let i = 0; i < path.length; ++i){\n            const segment = path[i];\n            let next = node.get(segment);\n            if (!next) {\n                next = new Map();\n                node.set(segment, next);\n            }\n            node = next;\n        }\n        node[internals.value] = value;\n    }\n    get(path) {\n        const node = this.node(path);\n        if (node) {\n            return node[internals.value];\n        }\n    }\n    node(path) {\n        if (!this._values) {\n            return;\n        }\n        return Reach(this._values, path, {\n            iterables: true\n        });\n    }\n    override(path, node) {\n        if (!this._values) {\n            return;\n        }\n        const parents = path.slice(0, -1);\n        const own = path[path.length - 1];\n        const parent = Reach(this._values, parents, {\n            iterables: true\n        });\n        if (node) {\n            parent.set(own, node);\n            return;\n        }\n        if (parent) {\n            parent.delete(own);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/template.js":
/*!******************************************!*\
  !*** ./node_modules/joi/lib/template.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst EscapeHtml = __webpack_require__(/*! @hapi/hoek/lib/escapeHtml */ \"(rsc)/./node_modules/@hapi/hoek/lib/escapeHtml.js\");\nconst Formula = __webpack_require__(/*! @sideway/formula */ \"(rsc)/./node_modules/@sideway/formula/lib/index.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst Ref = __webpack_require__(/*! ./ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst internals = {\n    symbol: Symbol(\"template\"),\n    opens: new Array(1000).join(\"\\x00\"),\n    closes: new Array(1000).join(\"\\x01\"),\n    dateFormat: {\n        date: Date.prototype.toDateString,\n        iso: Date.prototype.toISOString,\n        string: Date.prototype.toString,\n        time: Date.prototype.toTimeString,\n        utc: Date.prototype.toUTCString\n    }\n};\nmodule.exports = exports = internals.Template = class {\n    constructor(source, options){\n        Assert(typeof source === \"string\", \"Template source must be a string\");\n        Assert(!source.includes(\"\\x00\") && !source.includes(\"\\x01\"), \"Template source cannot contain reserved control characters\");\n        this.source = source;\n        this.rendered = source;\n        this._template = null;\n        if (options) {\n            const { functions, ...opts } = options;\n            this._settings = Object.keys(opts).length ? Clone(opts) : undefined;\n            this._functions = functions;\n            if (this._functions) {\n                Assert(Object.keys(this._functions).every((key)=>typeof key === \"string\"), \"Functions keys must be strings\");\n                Assert(Object.values(this._functions).every((key)=>typeof key === \"function\"), \"Functions values must be functions\");\n            }\n        } else {\n            this._settings = undefined;\n            this._functions = undefined;\n        }\n        this._parse();\n    }\n    _parse() {\n        // 'text {raw} {{ref}} \\\\{{ignore}} {{ignore\\\\}} {{ignore {{ignore}'\n        if (!this.source.includes(\"{\")) {\n            return;\n        }\n        // Encode escaped \\\\{{{{{\n        const encoded = internals.encode(this.source);\n        // Split on first { in each set\n        const parts = internals.split(encoded);\n        // Process parts\n        let refs = false;\n        const processed = [];\n        const head = parts.shift();\n        if (head) {\n            processed.push(head);\n        }\n        for (const part of parts){\n            const raw = part[0] !== \"{\";\n            const ender = raw ? \"}\" : \"}}\";\n            const end = part.indexOf(ender);\n            if (end === -1 || // Ignore non-matching closing\n            part[1] === \"{\") {\n                processed.push(`{${internals.decode(part)}`);\n                continue;\n            }\n            let variable = part.slice(raw ? 0 : 1, end);\n            const wrapped = variable[0] === \":\";\n            if (wrapped) {\n                variable = variable.slice(1);\n            }\n            const dynamic = this._ref(internals.decode(variable), {\n                raw,\n                wrapped\n            });\n            processed.push(dynamic);\n            if (typeof dynamic !== \"string\") {\n                refs = true;\n            }\n            const rest = part.slice(end + ender.length);\n            if (rest) {\n                processed.push(internals.decode(rest));\n            }\n        }\n        if (!refs) {\n            this.rendered = processed.join(\"\");\n            return;\n        }\n        this._template = processed;\n    }\n    static date(date, prefs) {\n        return internals.dateFormat[prefs.dateFormat].call(date);\n    }\n    describe(options = {}) {\n        if (!this._settings && options.compact) {\n            return this.source;\n        }\n        const desc = {\n            template: this.source\n        };\n        if (this._settings) {\n            desc.options = this._settings;\n        }\n        if (this._functions) {\n            desc.functions = this._functions;\n        }\n        return desc;\n    }\n    static build(desc) {\n        return new internals.Template(desc.template, desc.options || desc.functions ? {\n            ...desc.options,\n            functions: desc.functions\n        } : undefined);\n    }\n    isDynamic() {\n        return !!this._template;\n    }\n    static isTemplate(template) {\n        return template ? !!template[Common.symbols.template] : false;\n    }\n    refs() {\n        if (!this._template) {\n            return;\n        }\n        const refs = [];\n        for (const part of this._template){\n            if (typeof part !== \"string\") {\n                refs.push(...part.refs);\n            }\n        }\n        return refs;\n    }\n    resolve(value, state, prefs, local) {\n        if (this._template && this._template.length === 1) {\n            return this._part(this._template[0], /* context -> [*/ value, state, prefs, local, {} /*] */ );\n        }\n        return this.render(value, state, prefs, local);\n    }\n    _part(part, ...args) {\n        if (part.ref) {\n            return part.ref.resolve(...args);\n        }\n        return part.formula.evaluate(args);\n    }\n    render(value, state, prefs, local, options = {}) {\n        if (!this.isDynamic()) {\n            return this.rendered;\n        }\n        const parts = [];\n        for (const part of this._template){\n            if (typeof part === \"string\") {\n                parts.push(part);\n            } else {\n                const rendered = this._part(part, /* context -> [*/ value, state, prefs, local, options /*] */ );\n                const string = internals.stringify(rendered, value, state, prefs, local, options);\n                if (string !== undefined) {\n                    const result = part.raw || (options.errors && options.errors.escapeHtml) === false ? string : EscapeHtml(string);\n                    parts.push(internals.wrap(result, part.wrapped && prefs.errors.wrap.label));\n                }\n            }\n        }\n        return parts.join(\"\");\n    }\n    _ref(content, { raw, wrapped }) {\n        const refs = [];\n        const reference = (variable)=>{\n            const ref = Ref.create(variable, this._settings);\n            refs.push(ref);\n            return (context)=>{\n                const resolved = ref.resolve(...context);\n                return resolved !== undefined ? resolved : null;\n            };\n        };\n        try {\n            const functions = this._functions ? {\n                ...internals.functions,\n                ...this._functions\n            } : internals.functions;\n            var formula = new Formula.Parser(content, {\n                reference,\n                functions,\n                constants: internals.constants\n            });\n        } catch (err) {\n            err.message = `Invalid template variable \"${content}\" fails due to: ${err.message}`;\n            throw err;\n        }\n        if (formula.single) {\n            if (formula.single.type === \"reference\") {\n                const ref = refs[0];\n                return {\n                    ref,\n                    raw,\n                    refs,\n                    wrapped: wrapped || ref.type === \"local\" && ref.key === \"label\"\n                };\n            }\n            return internals.stringify(formula.single.value);\n        }\n        return {\n            formula,\n            raw,\n            refs\n        };\n    }\n    toString() {\n        return this.source;\n    }\n};\ninternals.Template.prototype[Common.symbols.template] = true;\ninternals.Template.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects\ninternals.encode = function(string) {\n    return string.replace(/\\\\(\\{+)/g, ($0, $1)=>{\n        return internals.opens.slice(0, $1.length);\n    }).replace(/\\\\(\\}+)/g, ($0, $1)=>{\n        return internals.closes.slice(0, $1.length);\n    });\n};\ninternals.decode = function(string) {\n    return string.replace(/\\u0000/g, \"{\").replace(/\\u0001/g, \"}\");\n};\ninternals.split = function(string) {\n    const parts = [];\n    let current = \"\";\n    for(let i = 0; i < string.length; ++i){\n        const char = string[i];\n        if (char === \"{\") {\n            let next = \"\";\n            while(i + 1 < string.length && string[i + 1] === \"{\"){\n                next += \"{\";\n                ++i;\n            }\n            parts.push(current);\n            current = next;\n        } else {\n            current += char;\n        }\n    }\n    parts.push(current);\n    return parts;\n};\ninternals.wrap = function(value, ends) {\n    if (!ends) {\n        return value;\n    }\n    if (ends.length === 1) {\n        return `${ends}${value}${ends}`;\n    }\n    return `${ends[0]}${value}${ends[1]}`;\n};\ninternals.stringify = function(value, original, state, prefs, local, options = {}) {\n    const type = typeof value;\n    const wrap = prefs && prefs.errors && prefs.errors.wrap || {};\n    let skipWrap = false;\n    if (Ref.isRef(value) && value.render) {\n        skipWrap = value.in;\n        value = value.resolve(original, state, prefs, local, {\n            in: value.in,\n            ...options\n        });\n    }\n    if (value === null) {\n        return \"null\";\n    }\n    if (type === \"string\") {\n        return internals.wrap(value, options.arrayItems && wrap.string);\n    }\n    if (type === \"number\" || type === \"function\" || type === \"symbol\") {\n        return value.toString();\n    }\n    if (type !== \"object\") {\n        return JSON.stringify(value);\n    }\n    if (value instanceof Date) {\n        return internals.Template.date(value, prefs);\n    }\n    if (value instanceof Map) {\n        const pairs = [];\n        for (const [key, sym] of value.entries()){\n            pairs.push(`${key.toString()} -> ${sym.toString()}`);\n        }\n        value = pairs;\n    }\n    if (!Array.isArray(value)) {\n        return value.toString();\n    }\n    const values = [];\n    for (const item of value){\n        values.push(internals.stringify(item, original, state, prefs, local, {\n            arrayItems: true,\n            ...options\n        }));\n    }\n    return internals.wrap(values.join(\", \"), !skipWrap && wrap.array);\n};\ninternals.constants = {\n    true: true,\n    false: false,\n    null: null,\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 60 * 1000,\n    day: 24 * 60 * 60 * 1000\n};\ninternals.functions = {\n    if (condition, then, otherwise) {\n        return condition ? then : otherwise;\n    },\n    length (item) {\n        if (typeof item === \"string\") {\n            return item.length;\n        }\n        if (!item || typeof item !== \"object\") {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return item.length;\n        }\n        return Object.keys(item).length;\n    },\n    msg (code) {\n        const [value, state, prefs, local, options] = this;\n        const messages = options.messages;\n        if (!messages) {\n            return \"\";\n        }\n        const template = Errors.template(value, messages[0], code, state, prefs) || Errors.template(value, messages[1], code, state, prefs);\n        if (!template) {\n            return \"\";\n        }\n        return template.render(value, state, prefs, local, options);\n    },\n    number (value) {\n        if (typeof value === \"number\") {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            return parseFloat(value);\n        }\n        if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        }\n        if (value instanceof Date) {\n            return value.getTime();\n        }\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/trace.js":
/*!***************************************!*\
  !*** ./node_modules/joi/lib/trace.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"(rsc)/./node_modules/@hapi/hoek/lib/deepEqual.js\");\nconst Pinpoint = __webpack_require__(/*! @sideway/pinpoint */ \"(rsc)/./node_modules/@sideway/pinpoint/lib/index.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst internals = {\n    codes: {\n        error: 1,\n        pass: 2,\n        full: 3\n    },\n    labels: {\n        0: \"never used\",\n        1: \"always error\",\n        2: \"always pass\"\n    }\n};\nexports.setup = function(root) {\n    const trace = function() {\n        root._tracer = root._tracer || new internals.Tracer();\n        return root._tracer;\n    };\n    root.trace = trace;\n    root[Symbol.for(\"@hapi/lab/coverage/initialize\")] = trace;\n    root.untrace = ()=>{\n        root._tracer = null;\n    };\n};\nexports.location = function(schema) {\n    return schema.$_setFlag(\"_tracerLocation\", Pinpoint.location(2)); // base.tracer(), caller\n};\ninternals.Tracer = class {\n    constructor(){\n        this.name = \"Joi\";\n        this._schemas = new Map();\n    }\n    _register(schema) {\n        const existing = this._schemas.get(schema);\n        if (existing) {\n            return existing.store;\n        }\n        const store = new internals.Store(schema);\n        const { filename, line } = schema._flags._tracerLocation || Pinpoint.location(5); // internals.tracer(), internals.entry(), exports.entry(), validate(), caller\n        this._schemas.set(schema, {\n            filename,\n            line,\n            store\n        });\n        return store;\n    }\n    _combine(merged, sources) {\n        for (const { store } of this._schemas.values()){\n            store._combine(merged, sources);\n        }\n    }\n    report(file) {\n        const coverage = [];\n        // Process each registered schema\n        for (const { filename, line, store } of this._schemas.values()){\n            if (file && file !== filename) {\n                continue;\n            }\n            // Process sub schemas of the registered root\n            const missing = [];\n            const skipped = [];\n            for (const [schema, log] of store._sources.entries()){\n                // Check if sub schema parent skipped\n                if (internals.sub(log.paths, skipped)) {\n                    continue;\n                }\n                // Check if sub schema reached\n                if (!log.entry) {\n                    missing.push({\n                        status: \"never reached\",\n                        paths: [\n                            ...log.paths\n                        ]\n                    });\n                    skipped.push(...log.paths);\n                    continue;\n                }\n                // Check values\n                for (const type of [\n                    \"valid\",\n                    \"invalid\"\n                ]){\n                    const set = schema[`_${type}s`];\n                    if (!set) {\n                        continue;\n                    }\n                    const values = new Set(set._values);\n                    const refs = new Set(set._refs);\n                    for (const { value, ref } of log[type]){\n                        values.delete(value);\n                        refs.delete(ref);\n                    }\n                    if (values.size || refs.size) {\n                        missing.push({\n                            status: [\n                                ...values,\n                                ...[\n                                    ...refs\n                                ].map((ref)=>ref.display)\n                            ],\n                            rule: `${type}s`\n                        });\n                    }\n                }\n                // Check rules status\n                const rules = schema._rules.map((rule)=>rule.name);\n                for (const type of [\n                    \"default\",\n                    \"failover\"\n                ]){\n                    if (schema._flags[type] !== undefined) {\n                        rules.push(type);\n                    }\n                }\n                for (const name of rules){\n                    const status = internals.labels[log.rule[name] || 0];\n                    if (status) {\n                        const report = {\n                            rule: name,\n                            status\n                        };\n                        if (log.paths.size) {\n                            report.paths = [\n                                ...log.paths\n                            ];\n                        }\n                        missing.push(report);\n                    }\n                }\n            }\n            if (missing.length) {\n                coverage.push({\n                    filename,\n                    line,\n                    missing,\n                    severity: \"error\",\n                    message: `Schema missing tests for ${missing.map(internals.message).join(\", \")}`\n                });\n            }\n        }\n        return coverage.length ? coverage : null;\n    }\n};\ninternals.Store = class {\n    constructor(schema){\n        this.active = true;\n        this._sources = new Map(); // schema -> { paths, entry, rule, valid, invalid }\n        this._combos = new Map(); // merged -> [sources]\n        this._scan(schema);\n    }\n    debug(state, source, name, result) {\n        state.mainstay.debug && state.mainstay.debug.push({\n            type: source,\n            name,\n            result,\n            path: state.path\n        });\n    }\n    entry(schema, state) {\n        internals.debug(state, {\n            type: \"entry\"\n        });\n        this._record(schema, (log)=>{\n            log.entry = true;\n        });\n    }\n    filter(schema, state, source, value) {\n        internals.debug(state, {\n            type: source,\n            ...value\n        });\n        this._record(schema, (log)=>{\n            log[source].add(value);\n        });\n    }\n    log(schema, state, source, name, result) {\n        internals.debug(state, {\n            type: source,\n            name,\n            result: result === \"full\" ? \"pass\" : result\n        });\n        this._record(schema, (log)=>{\n            log[source][name] = log[source][name] || 0;\n            log[source][name] |= internals.codes[result];\n        });\n    }\n    resolve(state, ref, to) {\n        if (!state.mainstay.debug) {\n            return;\n        }\n        const log = {\n            type: \"resolve\",\n            ref: ref.display,\n            to,\n            path: state.path\n        };\n        state.mainstay.debug.push(log);\n    }\n    value(state, by, from, to, name) {\n        if (!state.mainstay.debug || DeepEqual(from, to)) {\n            return;\n        }\n        const log = {\n            type: \"value\",\n            by,\n            from,\n            to,\n            path: state.path\n        };\n        if (name) {\n            log.name = name;\n        }\n        state.mainstay.debug.push(log);\n    }\n    _record(schema, each) {\n        const log = this._sources.get(schema);\n        if (log) {\n            each(log);\n            return;\n        }\n        const sources = this._combos.get(schema);\n        for (const source of sources){\n            this._record(source, each);\n        }\n    }\n    _scan(schema, _path) {\n        const path = _path || [];\n        let log = this._sources.get(schema);\n        if (!log) {\n            log = {\n                paths: new Set(),\n                entry: false,\n                rule: {},\n                valid: new Set(),\n                invalid: new Set()\n            };\n            this._sources.set(schema, log);\n        }\n        if (path.length) {\n            log.paths.add(path);\n        }\n        const each = (sub, source)=>{\n            const subId = internals.id(sub, source);\n            this._scan(sub, path.concat(subId));\n        };\n        schema.$_modify({\n            each,\n            ref: false\n        });\n    }\n    _combine(merged, sources) {\n        this._combos.set(merged, sources);\n    }\n};\ninternals.message = function(item) {\n    const path = item.paths ? Errors.path(item.paths[0]) + (item.rule ? \":\" : \"\") : \"\";\n    return `${path}${item.rule || \"\"} (${item.status})`;\n};\ninternals.id = function(schema, { source, name, path, key }) {\n    if (schema._flags.id) {\n        return schema._flags.id;\n    }\n    if (key) {\n        return key;\n    }\n    name = `@${name}`;\n    if (source === \"terms\") {\n        return [\n            name,\n            path[Math.min(path.length - 1, 1)]\n        ];\n    }\n    return name;\n};\ninternals.sub = function(paths, skipped) {\n    for (const path of paths){\n        for (const skip of skipped){\n            if (DeepEqual(path.slice(0, skip.length), skip)) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\ninternals.debug = function(state, event) {\n    if (state.mainstay.debug) {\n        event.path = state.debug ? [\n            ...state.path,\n            state.debug\n        ] : state.path;\n        state.mainstay.debug.push(event);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/trace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/alternatives.js":
/*!****************************************************!*\
  !*** ./node_modules/joi/lib/types/alternatives.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Merge = __webpack_require__(/*! @hapi/hoek/lib/merge */ \"(rsc)/./node_modules/@hapi/hoek/lib/merge.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ../compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst Ref = __webpack_require__(/*! ../ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst internals = {};\nmodule.exports = Any.extend({\n    type: \"alternatives\",\n    flags: {\n        match: {\n            default: \"any\"\n        } // 'any', 'one', 'all'\n    },\n    terms: {\n        matches: {\n            init: [],\n            register: Ref.toSibling\n        }\n    },\n    args (schema, ...schemas) {\n        if (schemas.length === 1) {\n            if (Array.isArray(schemas[0])) {\n                return schema.try(...schemas[0]);\n            }\n        }\n        return schema.try(...schemas);\n    },\n    validate (value, helpers) {\n        const { schema, error, state, prefs } = helpers;\n        // Match all or one\n        if (schema._flags.match) {\n            const matched = [];\n            const failed = [];\n            for(let i = 0; i < schema.$_terms.matches.length; ++i){\n                const item = schema.$_terms.matches[i];\n                const localState = state.nest(item.schema, `match.${i}`);\n                localState.snapshot();\n                const result = item.schema.$_validate(value, localState, prefs);\n                if (!result.errors) {\n                    matched.push(result.value);\n                    localState.commit();\n                } else {\n                    failed.push(result.errors);\n                    localState.restore();\n                }\n            }\n            if (matched.length === 0) {\n                const context = {\n                    details: failed.map((f)=>Errors.details(f, {\n                            override: false\n                        }))\n                };\n                return {\n                    errors: error(\"alternatives.any\", context)\n                };\n            }\n            // Match one\n            if (schema._flags.match === \"one\") {\n                return matched.length === 1 ? {\n                    value: matched[0]\n                } : {\n                    errors: error(\"alternatives.one\")\n                };\n            }\n            // Match all\n            if (matched.length !== schema.$_terms.matches.length) {\n                const context = {\n                    details: failed.map((f)=>Errors.details(f, {\n                            override: false\n                        }))\n                };\n                return {\n                    errors: error(\"alternatives.all\", context)\n                };\n            }\n            const isAnyObj = (alternative)=>{\n                return alternative.$_terms.matches.some((v)=>{\n                    return v.schema.type === \"object\" || v.schema.type === \"alternatives\" && isAnyObj(v.schema);\n                });\n            };\n            return isAnyObj(schema) ? {\n                value: matched.reduce((acc, v)=>Merge(acc, v, {\n                        mergeArrays: false\n                    }))\n            } : {\n                value: matched[matched.length - 1]\n            };\n        }\n        // Match any\n        const errors = [];\n        for(let i = 0; i < schema.$_terms.matches.length; ++i){\n            const item = schema.$_terms.matches[i];\n            // Try\n            if (item.schema) {\n                const localState = state.nest(item.schema, `match.${i}`);\n                localState.snapshot();\n                const result = item.schema.$_validate(value, localState, prefs);\n                if (!result.errors) {\n                    localState.commit();\n                    return result;\n                }\n                localState.restore();\n                errors.push({\n                    schema: item.schema,\n                    reports: result.errors\n                });\n                continue;\n            }\n            // Conditional\n            const input = item.ref ? item.ref.resolve(value, state, prefs) : value;\n            const tests = item.is ? [\n                item\n            ] : item.switch;\n            for(let j = 0; j < tests.length; ++j){\n                const test = tests[j];\n                const { is, then, otherwise } = test;\n                const id = `match.${i}${item.switch ? \".\" + j : \"\"}`;\n                if (!is.$_match(input, state.nest(is, `${id}.is`), prefs)) {\n                    if (otherwise) {\n                        return otherwise.$_validate(value, state.nest(otherwise, `${id}.otherwise`), prefs);\n                    }\n                } else if (then) {\n                    return then.$_validate(value, state.nest(then, `${id}.then`), prefs);\n                }\n            }\n        }\n        return internals.errors(errors, helpers);\n    },\n    rules: {\n        conditional: {\n            method (condition, options) {\n                Assert(!this._flags._endedSwitch, \"Unreachable condition\");\n                Assert(!this._flags.match, \"Cannot combine match mode\", this._flags.match, \"with conditional rule\");\n                Assert(options.break === undefined, \"Cannot use break option with alternatives conditional\");\n                const obj = this.clone();\n                const match = Compile.when(obj, condition, options);\n                const conditions = match.is ? [\n                    match\n                ] : match.switch;\n                for (const item of conditions){\n                    if (item.then && item.otherwise) {\n                        obj.$_setFlag(\"_endedSwitch\", true, {\n                            clone: false\n                        });\n                        break;\n                    }\n                }\n                obj.$_terms.matches.push(match);\n                return obj.$_mutateRebuild();\n            }\n        },\n        match: {\n            method (mode) {\n                Assert([\n                    \"any\",\n                    \"one\",\n                    \"all\"\n                ].includes(mode), \"Invalid alternatives match mode\", mode);\n                if (mode !== \"any\") {\n                    for (const match of this.$_terms.matches){\n                        Assert(match.schema, \"Cannot combine match mode\", mode, \"with conditional rules\");\n                    }\n                }\n                return this.$_setFlag(\"match\", mode);\n            }\n        },\n        try: {\n            method (...schemas) {\n                Assert(schemas.length, \"Missing alternative schemas\");\n                Common.verifyFlat(schemas, \"try\");\n                Assert(!this._flags._endedSwitch, \"Unreachable condition\");\n                const obj = this.clone();\n                for (const schema of schemas){\n                    obj.$_terms.matches.push({\n                        schema: obj.$_compile(schema)\n                    });\n                }\n                return obj.$_mutateRebuild();\n            }\n        }\n    },\n    overrides: {\n        label (name) {\n            const obj = this.$_parent(\"label\", name);\n            const each = (item, source)=>{\n                return source.path[0] !== \"is\" && typeof item._flags.label !== \"string\" ? item.label(name) : undefined;\n            };\n            return obj.$_modify({\n                each,\n                ref: false\n            });\n        }\n    },\n    rebuild (schema) {\n        // Flag when an alternative type is an array\n        const each = (item)=>{\n            if (Common.isSchema(item) && item.type === \"array\") {\n                schema.$_setFlag(\"_arrayItems\", true, {\n                    clone: false\n                });\n            }\n        };\n        schema.$_modify({\n            each\n        });\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.matches) {\n                for (const match of desc.matches){\n                    const { schema, ref, is, not, then, otherwise } = match;\n                    if (schema) {\n                        obj = obj.try(schema);\n                    } else if (ref) {\n                        obj = obj.conditional(ref, {\n                            is,\n                            then,\n                            not,\n                            otherwise,\n                            switch: match.switch\n                        });\n                    } else {\n                        obj = obj.conditional(is, {\n                            then,\n                            otherwise\n                        });\n                    }\n                }\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"alternatives.all\": \"{{#label}} does not match all of the required types\",\n        \"alternatives.any\": \"{{#label}} does not match any of the allowed types\",\n        \"alternatives.match\": \"{{#label}} does not match any of the allowed types\",\n        \"alternatives.one\": \"{{#label}} matches more than one allowed type\",\n        \"alternatives.types\": \"{{#label}} must be one of {{#types}}\"\n    }\n});\n// Helpers\ninternals.errors = function(failures, { error, state }) {\n    // Nothing matched due to type criteria rules\n    if (!failures.length) {\n        return {\n            errors: error(\"alternatives.any\")\n        };\n    }\n    // Single error\n    if (failures.length === 1) {\n        return {\n            errors: failures[0].reports\n        };\n    }\n    // Analyze reasons\n    const valids = new Set();\n    const complex = [];\n    for (const { reports, schema } of failures){\n        // Multiple errors (!abortEarly)\n        if (reports.length > 1) {\n            return internals.unmatched(failures, error);\n        }\n        // Custom error\n        const report = reports[0];\n        if (report instanceof Errors.Report === false) {\n            return internals.unmatched(failures, error);\n        }\n        // Internal object or array error\n        if (report.state.path.length !== state.path.length) {\n            complex.push({\n                type: schema.type,\n                report\n            });\n            continue;\n        }\n        // Valids\n        if (report.code === \"any.only\") {\n            for (const valid of report.local.valids){\n                valids.add(valid);\n            }\n            continue;\n        }\n        // Base type\n        const [type, code] = report.code.split(\".\");\n        if (code !== \"base\") {\n            complex.push({\n                type: schema.type,\n                report\n            });\n        } else if (report.code === \"object.base\") {\n            valids.add(report.local.type);\n        } else {\n            valids.add(type);\n        }\n    }\n    // All errors are base types or valids\n    if (!complex.length) {\n        return {\n            errors: error(\"alternatives.types\", {\n                types: [\n                    ...valids\n                ]\n            })\n        };\n    }\n    // Single complex error\n    if (complex.length === 1) {\n        return {\n            errors: complex[0].report\n        };\n    }\n    return internals.unmatched(failures, error);\n};\ninternals.unmatched = function(failures, error) {\n    const errors = [];\n    for (const failure of failures){\n        errors.push(...failure.reports);\n    }\n    return {\n        errors: error(\"alternatives.match\", Errors.details(errors, {\n            override: false\n        }))\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9hbHRlcm5hdGl2ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUV0QixNQUFNRSxNQUFNRixtQkFBT0EsQ0FBQztBQUNwQixNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNSSxVQUFVSixtQkFBT0EsQ0FBQztBQUN4QixNQUFNSyxTQUFTTCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNTSxNQUFNTixtQkFBT0EsQ0FBQztBQUdwQixNQUFNTyxZQUFZLENBQUM7QUFHbkJDLE9BQU9DLE9BQU8sR0FBR1AsSUFBSVEsTUFBTSxDQUFDO0lBRXhCQyxNQUFNO0lBRU5DLE9BQU87UUFFSEMsT0FBTztZQUFFQyxTQUFTO1FBQU0sRUFBa0Isc0JBQXNCO0lBQ3BFO0lBRUFDLE9BQU87UUFFSEMsU0FBUztZQUFFQyxNQUFNLEVBQUU7WUFBRUMsVUFBVVosSUFBSWEsU0FBUztRQUFDO0lBQ2pEO0lBRUFDLE1BQUtDLE1BQU0sRUFBRSxHQUFHQyxPQUFPO1FBRW5CLElBQUlBLFFBQVFDLE1BQU0sS0FBSyxHQUFHO1lBQ3RCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsT0FBTyxDQUFDLEVBQUUsR0FBRztnQkFDM0IsT0FBT0QsT0FBT0ssR0FBRyxJQUFJSixPQUFPLENBQUMsRUFBRTtZQUNuQztRQUNKO1FBRUEsT0FBT0QsT0FBT0ssR0FBRyxJQUFJSjtJQUN6QjtJQUVBSyxVQUFTQyxLQUFLLEVBQUVDLE9BQU87UUFFbkIsTUFBTSxFQUFFUixNQUFNLEVBQUVTLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUUsR0FBR0g7UUFFeEMsbUJBQW1CO1FBRW5CLElBQUlSLE9BQU9ZLE1BQU0sQ0FBQ3BCLEtBQUssRUFBRTtZQUNyQixNQUFNcUIsVUFBVSxFQUFFO1lBQ2xCLE1BQU1DLFNBQVMsRUFBRTtZ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QUcsQ0FBQ3pHO1FBQ2Y7SUFDSjtJQUVBLHNDQUFzQztJQUV0QyxJQUFJLENBQUNrRyxRQUFRdEYsTUFBTSxFQUFFO1FBQ2pCLE9BQU87WUFBRXFCLFFBQVFkLE1BQU0sc0JBQXNCO2dCQUFFd0YsT0FBTzt1QkFBSVg7aUJBQU87WUFBQztRQUFHO0lBQ3pFO0lBRUEsdUJBQXVCO0lBRXZCLElBQUlFLFFBQVF0RixNQUFNLEtBQUssR0FBRztRQUN0QixPQUFPO1lBQUVxQixRQUFRaUUsT0FBTyxDQUFDLEVBQUUsQ0FBQ0UsTUFBTTtRQUFDO0lBQ3ZDO0lBRUEsT0FBT3hHLFVBQVV1RyxTQUFTLENBQUNKLFVBQVU1RTtBQUN6QztBQUdBdkIsVUFBVXVHLFNBQVMsR0FBRyxTQUFVSixRQUFRLEVBQUU1RSxLQUFLO0lBRTNDLE1BQU1jLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU0yRSxXQUFXYixTQUFVO1FBQzVCOUQsT0FBT0MsSUFBSSxJQUFJMEUsUUFBUTNELE9BQU87SUFDbEM7SUFFQSxPQUFPO1FBQUVoQixRQUFRZCxNQUFNLHNCQUFzQnpCLE9BQU80QyxPQUFPLENBQUNMLFFBQVE7WUFBRVEsVUFBVTtRQUFNO0lBQUk7QUFDOUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXN0ZWhlcm8vLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9hbHRlcm5hdGl2ZXMuanM/N2ExNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzc2VydCA9IHJlcXVpcmUoJ0BoYXBpL2hvZWsvbGliL2Fzc2VydCcpO1xuY29uc3QgTWVyZ2UgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9tZXJnZScpO1xuXG5jb25zdCBBbnkgPSByZXF1aXJlKCcuL2FueScpO1xuY29uc3QgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5jb25zdCBDb21waWxlID0gcmVxdWlyZSgnLi4vY29tcGlsZScpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5jb25zdCBSZWYgPSByZXF1aXJlKCcuLi9yZWYnKTtcblxuXG5jb25zdCBpbnRlcm5hbHMgPSB7fTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEFueS5leHRlbmQoe1xuXG4gICAgdHlwZTogJ2FsdGVybmF0aXZlcycsXG5cbiAgICBmbGFnczoge1xuXG4gICAgICAgIG1hdGNoOiB7IGRlZmF1bHQ6ICdhbnknIH0gICAgICAgICAgICAgICAgIC8vICdhbnknLCAnb25lJywgJ2FsbCdcbiAgICB9LFxuXG4gICAgdGVybXM6IHtcblxuICAgICAgICBtYXRjaGVzOiB7IGluaXQ6IFtdLCByZWdpc3RlcjogUmVmLnRvU2libGluZyB9XG4gICAgfSxcblxuICAgIGFyZ3Moc2NoZW1hLCAuLi5zY2hlbWFzKSB7XG5cbiAgICAgICAgaWYgKHNjaGVtYXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWFzWzBdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2hlbWEudHJ5KC4uLnNjaGVtYXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjaGVtYS50cnkoLi4uc2NoZW1hcyk7XG4gICAgfSxcblxuICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzKSB7XG5cbiAgICAgICAgY29uc3QgeyBzY2hlbWEsIGVycm9yLCBzdGF0ZSwgcHJlZnMgfSA9IGhlbHBlcnM7XG5cbiAgICAgICAgLy8gTWF0Y2ggYWxsIG9yIG9uZVxuXG4gICAgICAgIGlmIChzY2hlbWEuX2ZsYWdzLm1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkID0gW107XG4gICAgICAgICAgICBjb25zdCBmYWlsZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEuJF90ZXJtcy5tYXRjaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHNjaGVtYS4kX3Rlcm1zLm1hdGNoZXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxTdGF0ZSA9IHN0YXRlLm5lc3QoaXRlbS5zY2hlbWEsIGBtYXRjaC4ke2l9YCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdGF0ZS5zbmFwc2hvdCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaXRlbS5zY2hlbWEuJF92YWxpZGF0ZSh2YWx1ZSwgbG9jYWxTdGF0ZSwgcHJlZnMpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdGF0ZS5jb21taXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZC5wdXNoKHJlc3VsdC5lcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0YXRlLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGZhaWxlZC5tYXAoKGYpID0+IEVycm9ycy5kZXRhaWxzKGYsIHsgb3ZlcnJpZGU6IGZhbHNlIH0pKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvcnM6IGVycm9yKCdhbHRlcm5hdGl2ZXMuYW55JywgY29udGV4dCkgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF0Y2ggb25lXG5cbiAgICAgICAgICAgIGlmIChzY2hlbWEuX2ZsYWdzLm1hdGNoID09PSAnb25lJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVkLmxlbmd0aCA9PT0gMSA/IHsgdmFsdWU6IG1hdGNoZWRbMF0gfSA6IHsgZXJyb3JzOiBlcnJvcignYWx0ZXJuYXRpdmVzLm9uZScpIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1hdGNoIGFsbFxuXG4gICAgICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGggIT09IHNjaGVtYS4kX3Rlcm1zLm1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogZmFpbGVkLm1hcCgoZikgPT4gRXJyb3JzLmRldGFpbHMoZiwgeyBvdmVycmlkZTogZmFsc2UgfSkpXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yczogZXJyb3IoJ2FsdGVybmF0aXZlcy5hbGwnLCBjb250ZXh0KSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpc0FueU9iaiA9IChhbHRlcm5hdGl2ZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsdGVybmF0aXZlLiRfdGVybXMubWF0Y2hlcy5zb21lKCh2KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYuc2NoZW1hLnR5cGUgPT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAodi5zY2hlbWEudHlwZSA9PT0gJ2FsdGVybmF0aXZlcycgJiYgaXNBbnlPYmoodi5zY2hlbWEpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBpc0FueU9iaihzY2hlbWEpID8geyB2YWx1ZTogbWF0Y2hlZC5yZWR1Y2UoKGFjYywgdikgPT4gTWVyZ2UoYWNjLCB2LCB7IG1lcmdlQXJyYXlzOiBmYWxzZSB9KSkgfSA6IHsgdmFsdWU6IG1hdGNoZWRbbWF0Y2hlZC5sZW5ndGggLSAxXSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWF0Y2ggYW55XG5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hLiRfdGVybXMubWF0Y2hlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHNjaGVtYS4kX3Rlcm1zLm1hdGNoZXNbaV07XG5cbiAgICAgICAgICAgIC8vIFRyeVxuXG4gICAgICAgICAgICBpZiAoaXRlbS5zY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFN0YXRlID0gc3RhdGUubmVzdChpdGVtLnNjaGVtYSwgYG1hdGNoLiR7aX1gKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0YXRlLnNuYXBzaG90KCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVtLnNjaGVtYS4kX3ZhbGlkYXRlKHZhbHVlLCBsb2NhbFN0YXRlLCBwcmVmcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RhdGUuY29tbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbG9jYWxTdGF0ZS5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBzY2hlbWE6IGl0ZW0uc2NoZW1hLCByZXBvcnRzOiByZXN1bHQuZXJyb3JzIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb25kaXRpb25hbFxuXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGl0ZW0ucmVmID8gaXRlbS5yZWYucmVzb2x2ZSh2YWx1ZSwgc3RhdGUsIHByZWZzKSA6IHZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdGVzdHMgPSBpdGVtLmlzID8gW2l0ZW1dIDogaXRlbS5zd2l0Y2g7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGVzdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXN0ID0gdGVzdHNbal07XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpcywgdGhlbiwgb3RoZXJ3aXNlIH0gPSB0ZXN0O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBgbWF0Y2guJHtpfSR7aXRlbS5zd2l0Y2ggPyAnLicgKyBqIDogJyd9YDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzLiRfbWF0Y2goaW5wdXQsIHN0YXRlLm5lc3QoaXMsIGAke2lkfS5pc2ApLCBwcmVmcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyd2lzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyd2lzZS4kX3ZhbGlkYXRlKHZhbHVlLCBzdGF0ZS5uZXN0KG90aGVyd2lzZSwgYCR7aWR9Lm90aGVyd2lzZWApLCBwcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhlbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlbi4kX3ZhbGlkYXRlKHZhbHVlLCBzdGF0ZS5uZXN0KHRoZW4sIGAke2lkfS50aGVuYCksIHByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW50ZXJuYWxzLmVycm9ycyhlcnJvcnMsIGhlbHBlcnMpO1xuICAgIH0sXG5cbiAgICBydWxlczoge1xuXG4gICAgICAgIGNvbmRpdGlvbmFsOiB7XG4gICAgICAgICAgICBtZXRob2QoY29uZGl0aW9uLCBvcHRpb25zKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoIXRoaXMuX2ZsYWdzLl9lbmRlZFN3aXRjaCwgJ1VucmVhY2hhYmxlIGNvbmRpdGlvbicpO1xuICAgICAgICAgICAgICAgIEFzc2VydCghdGhpcy5fZmxhZ3MubWF0Y2gsICdDYW5ub3QgY29tYmluZSBtYXRjaCBtb2RlJywgdGhpcy5fZmxhZ3MubWF0Y2gsICd3aXRoIGNvbmRpdGlvbmFsIHJ1bGUnKTtcbiAgICAgICAgICAgICAgICBBc3NlcnQob3B0aW9ucy5icmVhayA9PT0gdW5kZWZpbmVkLCAnQ2Fubm90IHVzZSBicmVhayBvcHRpb24gd2l0aCBhbHRlcm5hdGl2ZXMgY29uZGl0aW9uYWwnKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gQ29tcGlsZS53aGVuKG9iaiwgY29uZGl0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25kaXRpb25zID0gbWF0Y2guaXMgPyBbbWF0Y2hdIDogbWF0Y2guc3dpdGNoO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjb25kaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRoZW4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3RoZXJ3aXNlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai4kX3NldEZsYWcoJ19lbmRlZFN3aXRjaCcsIHRydWUsIHsgY2xvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvYmouJF90ZXJtcy5tYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmouJF9tdXRhdGVSZWJ1aWxkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF0Y2g6IHtcbiAgICAgICAgICAgIG1ldGhvZChtb2RlKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoWydhbnknLCAnb25lJywgJ2FsbCddLmluY2x1ZGVzKG1vZGUpLCAnSW52YWxpZCBhbHRlcm5hdGl2ZXMgbWF0Y2ggbW9kZScsIG1vZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgIT09ICdhbnknKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgdGhpcy4kX3Rlcm1zLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFzc2VydChtYXRjaC5zY2hlbWEsICdDYW5ub3QgY29tYmluZSBtYXRjaCBtb2RlJywgbW9kZSwgJ3dpdGggY29uZGl0aW9uYWwgcnVsZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfc2V0RmxhZygnbWF0Y2gnLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cnk6IHtcbiAgICAgICAgICAgIG1ldGhvZCguLi5zY2hlbWFzKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoc2NoZW1hcy5sZW5ndGgsICdNaXNzaW5nIGFsdGVybmF0aXZlIHNjaGVtYXMnKTtcbiAgICAgICAgICAgICAgICBDb21tb24udmVyaWZ5RmxhdChzY2hlbWFzLCAndHJ5Jyk7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoIXRoaXMuX2ZsYWdzLl9lbmRlZFN3aXRjaCwgJ1VucmVhY2hhYmxlIGNvbmRpdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2NoZW1hIG9mIHNjaGVtYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLiRfdGVybXMubWF0Y2hlcy5wdXNoKHsgc2NoZW1hOiBvYmouJF9jb21waWxlKHNjaGVtYSkgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iai4kX211dGF0ZVJlYnVpbGQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvdmVycmlkZXM6IHtcblxuICAgICAgICBsYWJlbChuYW1lKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuJF9wYXJlbnQoJ2xhYmVsJywgbmFtZSk7XG4gICAgICAgICAgICBjb25zdCBlYWNoID0gKGl0ZW0sIHNvdXJjZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5wYXRoWzBdICE9PSAnaXMnICYmIHR5cGVvZiBpdGVtLl9mbGFncy5sYWJlbCAhPT0gJ3N0cmluZycgPyBpdGVtLmxhYmVsKG5hbWUpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iai4kX21vZGlmeSh7IGVhY2gsIHJlZjogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVidWlsZChzY2hlbWEpIHtcblxuICAgICAgICAvLyBGbGFnIHdoZW4gYW4gYWx0ZXJuYXRpdmUgdHlwZSBpcyBhbiBhcnJheVxuXG4gICAgICAgIGNvbnN0IGVhY2ggPSAoaXRlbSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoQ29tbW9uLmlzU2NoZW1hKGl0ZW0pICYmXG4gICAgICAgICAgICAgICAgaXRlbS50eXBlID09PSAnYXJyYXknKSB7XG5cbiAgICAgICAgICAgICAgICBzY2hlbWEuJF9zZXRGbGFnKCdfYXJyYXlJdGVtcycsIHRydWUsIHsgY2xvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNjaGVtYS4kX21vZGlmeSh7IGVhY2ggfSk7XG4gICAgfSxcblxuICAgIG1hbmlmZXN0OiB7XG5cbiAgICAgICAgYnVpbGQob2JqLCBkZXNjKSB7XG5cbiAgICAgICAgICAgIGlmIChkZXNjLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIGRlc2MubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNjaGVtYSwgcmVmLCBpcywgbm90LCB0aGVuLCBvdGhlcndpc2UgfSA9IG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmoudHJ5KHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmouY29uZGl0aW9uYWwocmVmLCB7IGlzLCB0aGVuLCBub3QsIG90aGVyd2lzZSwgc3dpdGNoOiBtYXRjaC5zd2l0Y2ggfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmouY29uZGl0aW9uYWwoaXMsIHsgdGhlbiwgb3RoZXJ3aXNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICdhbHRlcm5hdGl2ZXMuYWxsJzogJ3t7I2xhYmVsfX0gZG9lcyBub3QgbWF0Y2ggYWxsIG9mIHRoZSByZXF1aXJlZCB0eXBlcycsXG4gICAgICAgICdhbHRlcm5hdGl2ZXMuYW55JzogJ3t7I2xhYmVsfX0gZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBhbGxvd2VkIHR5cGVzJyxcbiAgICAgICAgJ2FsdGVybmF0aXZlcy5tYXRjaCc6ICd7eyNsYWJlbH19IGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgYWxsb3dlZCB0eXBlcycsXG4gICAgICAgICdhbHRlcm5hdGl2ZXMub25lJzogJ3t7I2xhYmVsfX0gbWF0Y2hlcyBtb3JlIHRoYW4gb25lIGFsbG93ZWQgdHlwZScsXG4gICAgICAgICdhbHRlcm5hdGl2ZXMudHlwZXMnOiAne3sjbGFiZWx9fSBtdXN0IGJlIG9uZSBvZiB7eyN0eXBlc319J1xuICAgIH1cbn0pO1xuXG5cbi8vIEhlbHBlcnNcblxuaW50ZXJuYWxzLmVycm9ycyA9IGZ1bmN0aW9uIChmYWlsdXJlcywgeyBlcnJvciwgc3RhdGUgfSkge1xuXG4gICAgLy8gTm90aGluZyBtYXRjaGVkIGR1ZSB0byB0eXBlIGNyaXRlcmlhIHJ1bGVzXG5cbiAgICBpZiAoIWZhaWx1cmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4geyBlcnJvcnM6IGVycm9yKCdhbHRlcm5hdGl2ZXMuYW55JykgfTtcbiAgICB9XG5cbiAgICAvLyBTaW5nbGUgZXJyb3JcblxuICAgIGlmIChmYWlsdXJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JzOiBmYWlsdXJlc1swXS5yZXBvcnRzIH07XG4gICAgfVxuXG4gICAgLy8gQW5hbHl6ZSByZWFzb25zXG5cbiAgICBjb25zdCB2YWxpZHMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgY29tcGxleCA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB7IHJlcG9ydHMsIHNjaGVtYSB9IG9mIGZhaWx1cmVzKSB7XG5cbiAgICAgICAgLy8gTXVsdGlwbGUgZXJyb3JzICghYWJvcnRFYXJseSlcblxuICAgICAgICBpZiAocmVwb3J0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzLnVubWF0Y2hlZChmYWlsdXJlcywgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3VzdG9tIGVycm9yXG5cbiAgICAgICAgY29uc3QgcmVwb3J0ID0gcmVwb3J0c1swXTtcbiAgICAgICAgaWYgKHJlcG9ydCBpbnN0YW5jZW9mIEVycm9ycy5SZXBvcnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzLnVubWF0Y2hlZChmYWlsdXJlcywgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJuYWwgb2JqZWN0IG9yIGFycmF5IGVycm9yXG5cbiAgICAgICAgaWYgKHJlcG9ydC5zdGF0ZS5wYXRoLmxlbmd0aCAhPT0gc3RhdGUucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbXBsZXgucHVzaCh7IHR5cGU6IHNjaGVtYS50eXBlLCByZXBvcnQgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkc1xuXG4gICAgICAgIGlmIChyZXBvcnQuY29kZSA9PT0gJ2FueS5vbmx5Jykge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWxpZCBvZiByZXBvcnQubG9jYWwudmFsaWRzKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRzLmFkZCh2YWxpZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmFzZSB0eXBlXG5cbiAgICAgICAgY29uc3QgW3R5cGUsIGNvZGVdID0gcmVwb3J0LmNvZGUuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKGNvZGUgIT09ICdiYXNlJykge1xuICAgICAgICAgICAgY29tcGxleC5wdXNoKHsgdHlwZTogc2NoZW1hLnR5cGUsIHJlcG9ydCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXBvcnQuY29kZSA9PT0gJ29iamVjdC5iYXNlJykge1xuICAgICAgICAgICAgdmFsaWRzLmFkZChyZXBvcnQubG9jYWwudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YWxpZHMuYWRkKHR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWxsIGVycm9ycyBhcmUgYmFzZSB0eXBlcyBvciB2YWxpZHNcblxuICAgIGlmICghY29tcGxleC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JzOiBlcnJvcignYWx0ZXJuYXRpdmVzLnR5cGVzJywgeyB0eXBlczogWy4uLnZhbGlkc10gfSkgfTtcbiAgICB9XG5cbiAgICAvLyBTaW5nbGUgY29tcGxleCBlcnJvclxuXG4gICAgaWYgKGNvbXBsZXgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yczogY29tcGxleFswXS5yZXBvcnQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJuYWxzLnVubWF0Y2hlZChmYWlsdXJlcywgZXJyb3IpO1xufTtcblxuXG5pbnRlcm5hbHMudW5tYXRjaGVkID0gZnVuY3Rpb24gKGZhaWx1cmVzLCBlcnJvcikge1xuXG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgZm9yIChjb25zdCBmYWlsdXJlIG9mIGZhaWx1cmVzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKC4uLmZhaWx1cmUucmVwb3J0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZXJyb3JzOiBlcnJvcignYWx0ZXJuYXRpdmVzLm1hdGNoJywgRXJyb3JzLmRldGFpbHMoZXJyb3JzLCB7IG92ZXJyaWRlOiBmYWxzZSB9KSkgfTtcbn07XG4iXSwibmFtZXMiOlsiQXNzZXJ0IiwicmVxdWlyZSIsIk1lcmdlIiwiQW55IiwiQ29tbW9uIiwiQ29tcGlsZSIsIkVycm9ycyIsIlJlZiIsImludGVybmFscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJleHRlbmQiLCJ0eXBlIiwiZmxhZ3MiLCJtYXRjaCIsImRlZmF1bHQiLCJ0ZXJtcyIsIm1hdGNoZXMiLCJpbml0IiwicmVnaXN0ZXIiLCJ0b1NpYmxpbmciLCJhcmdzIiwic2NoZW1hIiwic2NoZW1hcyIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsInRyeSIsInZhbGlkYXRlIiwidmFsdWUiLCJoZWxwZXJzIiwiZXJyb3IiLCJzdGF0ZSIsInByZWZzIiwiX2ZsYWdzIiwibWF0Y2hlZCIsImZhaWxlZCIsImkiLCIkX3Rlcm1zIiwiaXRlbSIsImxvY2FsU3RhdGUiLCJuZXN0Iiwic25hcHNob3QiLCJyZXN1bHQiLCIkX3ZhbGlkYXRlIiwiZXJyb3JzIiwicHVzaCIsImNvbW1pdCIsInJlc3RvcmUiLCJjb250ZXh0IiwiZGV0YWlscyIsIm1hcCIsImYiLCJvdmVycmlkZSIsImlzQW55T2JqIiwiYWx0ZXJuYXRpdmUiLCJzb21lIiwidiIsInJlZHVjZSIsImFjYyIsIm1lcmdlQXJyYXlzIiwicmVwb3J0cyIsImlucHV0IiwicmVmIiwicmVzb2x2ZSIsInRlc3RzIiwiaXMiLCJzd2l0Y2giLCJqIiwidGVzdCIsInRoZW4iLCJvdGhlcndpc2UiLCJpZCIsIiRfbWF0Y2giLCJydWxlcyIsImNvbmRpdGlvbmFsIiwibWV0aG9kIiwiY29uZGl0aW9uIiwib3B0aW9ucyIsIl9lbmRlZFN3aXRjaCIsImJyZWFrIiwidW5kZWZpbmVkIiwib2JqIiwiY2xvbmUiLCJ3aGVuIiwiY29uZGl0aW9ucyIsIiRfc2V0RmxhZyIsIiRfbXV0YXRlUmVidWlsZCIsIm1vZGUiLCJpbmNsdWRlcyIsInZlcmlmeUZsYXQiLCIkX2NvbXBpbGUiLCJvdmVycmlkZXMiLCJsYWJlbCIsIm5hbWUiLCIkX3BhcmVudCIsImVhY2giLCJzb3VyY2UiLCJwYXRoIiwiJF9tb2RpZnkiLCJyZWJ1aWxkIiwiaXNTY2hlbWEiLCJtYW5pZmVzdCIsImJ1aWxkIiwiZGVzYyIsIm5vdCIsIm1lc3NhZ2VzIiwiZmFpbHVyZXMiLCJ2YWxpZHMiLCJTZXQiLCJjb21wbGV4IiwidW5tYXRjaGVkIiwicmVwb3J0IiwiUmVwb3J0IiwiY29kZSIsInZhbGlkIiwibG9jYWwiLCJhZGQiLCJzcGxpdCIsInR5cGVzIiwiZmFpbHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/alternatives.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/any.js":
/*!*******************************************!*\
  !*** ./node_modules/joi/lib/types/any.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Base = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/joi/lib/base.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Messages = __webpack_require__(/*! ../messages */ \"(rsc)/./node_modules/joi/lib/messages.js\");\nconst internals = {};\nmodule.exports = Base.extend({\n    type: \"any\",\n    flags: {\n        only: {\n            default: false\n        }\n    },\n    terms: {\n        alterations: {\n            init: null\n        },\n        examples: {\n            init: null\n        },\n        externals: {\n            init: null\n        },\n        metas: {\n            init: []\n        },\n        notes: {\n            init: []\n        },\n        shared: {\n            init: null\n        },\n        tags: {\n            init: []\n        },\n        whens: {\n            init: null\n        }\n    },\n    rules: {\n        custom: {\n            method (method, description) {\n                Assert(typeof method === \"function\", \"Method must be a function\");\n                Assert(description === undefined || description && typeof description === \"string\", \"Description must be a non-empty string\");\n                return this.$_addRule({\n                    name: \"custom\",\n                    args: {\n                        method,\n                        description\n                    }\n                });\n            },\n            validate (value, helpers, { method }) {\n                try {\n                    return method(value, helpers);\n                } catch (err) {\n                    return helpers.error(\"any.custom\", {\n                        error: err\n                    });\n                }\n            },\n            args: [\n                \"method\",\n                \"description\"\n            ],\n            multi: true\n        },\n        messages: {\n            method (messages) {\n                return this.prefs({\n                    messages\n                });\n            }\n        },\n        shared: {\n            method (schema) {\n                Assert(Common.isSchema(schema) && schema._flags.id, \"Schema must be a schema with an id\");\n                const obj = this.clone();\n                obj.$_terms.shared = obj.$_terms.shared || [];\n                obj.$_terms.shared.push(schema);\n                obj.$_mutateRegister(schema);\n                return obj;\n            }\n        },\n        warning: {\n            method (code, local) {\n                Assert(code && typeof code === \"string\", \"Invalid warning code\");\n                return this.$_addRule({\n                    name: \"warning\",\n                    args: {\n                        code,\n                        local\n                    },\n                    warn: true\n                });\n            },\n            validate (value, helpers, { code, local }) {\n                return helpers.error(code, local);\n            },\n            args: [\n                \"code\",\n                \"local\"\n            ],\n            multi: true\n        }\n    },\n    modifiers: {\n        keep (rule, enabled = true) {\n            rule.keep = enabled;\n        },\n        message (rule, message) {\n            rule.message = Messages.compile(message);\n        },\n        warn (rule, enabled = true) {\n            rule.warn = enabled;\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            for(const key in desc){\n                const values = desc[key];\n                if ([\n                    \"examples\",\n                    \"externals\",\n                    \"metas\",\n                    \"notes\",\n                    \"tags\"\n                ].includes(key)) {\n                    for (const value of values){\n                        obj = obj[key.slice(0, -1)](value);\n                    }\n                    continue;\n                }\n                if (key === \"alterations\") {\n                    const alter = {};\n                    for (const { target, adjuster } of values){\n                        alter[target] = adjuster;\n                    }\n                    obj = obj.alter(alter);\n                    continue;\n                }\n                if (key === \"whens\") {\n                    for (const value of values){\n                        const { ref, is, not, then, otherwise, concat } = value;\n                        if (concat) {\n                            obj = obj.concat(concat);\n                        } else if (ref) {\n                            obj = obj.when(ref, {\n                                is,\n                                not,\n                                then,\n                                otherwise,\n                                switch: value.switch,\n                                break: value.break\n                            });\n                        } else {\n                            obj = obj.when(is, {\n                                then,\n                                otherwise,\n                                break: value.break\n                            });\n                        }\n                    }\n                    continue;\n                }\n                if (key === \"shared\") {\n                    for (const value of values){\n                        obj = obj.shared(value);\n                    }\n                }\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"any.custom\": \"{{#label}} failed custom validation because {{#error.message}}\",\n        \"any.default\": \"{{#label}} threw an error when running default method\",\n        \"any.failover\": \"{{#label}} threw an error when running failover method\",\n        \"any.invalid\": \"{{#label}} contains an invalid value\",\n        \"any.only\": '{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\n        \"any.ref\": \"{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}\",\n        \"any.required\": \"{{#label}} is required\",\n        \"any.unknown\": \"{{#label}} is not allowed\"\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9hbnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQztBQUd6QixNQUFNSSxZQUFZLENBQUM7QUFHbkJDLE9BQU9DLE9BQU8sR0FBR0wsS0FBS00sTUFBTSxDQUFDO0lBRXpCQyxNQUFNO0lBRU5DLE9BQU87UUFFSEMsTUFBTTtZQUFFQyxTQUFTO1FBQU07SUFDM0I7SUFFQUMsT0FBTztRQUVIQyxhQUFhO1lBQUVDLE1BQU07UUFBSztRQUMxQkMsVUFBVTtZQUFFRCxNQUFNO1FBQUs7UUFDdkJFLFdBQVc7WUFBRUYsTUFBTTtRQUFLO1FBQ3hCRyxPQUFPO1lBQUVILE1BQU0sRUFBRTtRQUFDO1FBQ2xCSSxPQUFPO1lBQUVKLE1BQU0sRUFBRTtRQUFDO1FBQ2xCSyxRQUFRO1lBQUVMLE1BQU07UUFBSztRQUNyQk0sTUFBTTtZQUFFTixNQUFNLEVBQUU7UUFBQztRQUNqQk8sT0FBTztZQUFFUCxNQUFNO1FBQUs7SUFDeEI7SUFFQVEsT0FBTztRQUVIQyxRQUFRO1lBQ0pDLFFBQU9BLE1BQU0sRUFBRUMsV0FBVztnQkFFdEIxQixPQUFPLE9BQU95QixXQUFXLFlBQVk7Z0JBQ3JDekIsT0FBTzBCLGdCQUFnQkMsYUFBYUQsZUFBZSxPQUFPQSxnQkFBZ0IsVUFBVTtnQkFFcEYsT0FBTyxJQUFJLENBQUNFLFNBQVMsQ0FBQztvQkFBRUMsTUFBTTtvQkFBVUMsTUFBTTt3QkFBRUw7d0JBQVFDO29CQUFZO2dCQUFFO1lBQzFFO1lBQ0FLLFVBQVNDLEtBQUssRUFBRUMsT0FBTyxFQUFFLEVBQUVSLE1BQU0sRUFBRTtnQkFFL0IsSUFBSTtvQkFDQSxPQUFPQSxPQUFPTyxPQUFPQztnQkFDekIsRUFDQSxPQUFPQyxL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QU1DO2dDQUFXRyxRQUFRM0MsTUFBTTJDLE1BQU07Z0NBQUVDLE9BQU81QyxNQUFNNEMsS0FBSzs0QkFBQzt3QkFDN0YsT0FDSzs0QkFDRGpDLE1BQU1BLElBQUkrQixJQUFJLENBQUNMLElBQUk7Z0NBQUVFO2dDQUFNQztnQ0FBV0ksT0FBTzVDLE1BQU00QyxLQUFLOzRCQUFDO3dCQUM3RDtvQkFDSjtvQkFFQTtnQkFDSjtnQkFFQSxJQUFJZixRQUFRLFVBQVU7b0JBQ2xCLEtBQUssTUFBTTdCLFNBQVM4QixPQUFRO3dCQUN4Qm5CLE1BQU1BLElBQUl2QixNQUFNLENBQUNZO29CQUNyQjtnQkFDSjtZQUNKO1lBRUEsT0FBT1c7UUFDWDtJQUNKO0lBRUFOLFVBQVU7UUFDTixjQUFjO1FBQ2QsZUFBZTtRQUNmLGdCQUFnQjtRQUNoQixlQUFlO1FBQ2YsWUFBWTtRQUNaLFdBQVc7UUFDWCxnQkFBZ0I7UUFDaEIsZUFBZTtJQUNuQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzdGVoZXJvLy4vbm9kZV9tb2R1bGVzL2pvaS9saWIvdHlwZXMvYW55LmpzPzg4ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NlcnQgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9hc3NlcnQnKTtcblxuY29uc3QgQmFzZSA9IHJlcXVpcmUoJy4uL2Jhc2UnKTtcbmNvbnN0IENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuY29uc3QgTWVzc2FnZXMgPSByZXF1aXJlKCcuLi9tZXNzYWdlcycpO1xuXG5cbmNvbnN0IGludGVybmFscyA9IHt9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZS5leHRlbmQoe1xuXG4gICAgdHlwZTogJ2FueScsXG5cbiAgICBmbGFnczoge1xuXG4gICAgICAgIG9ubHk6IHsgZGVmYXVsdDogZmFsc2UgfVxuICAgIH0sXG5cbiAgICB0ZXJtczoge1xuXG4gICAgICAgIGFsdGVyYXRpb25zOiB7IGluaXQ6IG51bGwgfSxcbiAgICAgICAgZXhhbXBsZXM6IHsgaW5pdDogbnVsbCB9LFxuICAgICAgICBleHRlcm5hbHM6IHsgaW5pdDogbnVsbCB9LFxuICAgICAgICBtZXRhczogeyBpbml0OiBbXSB9LFxuICAgICAgICBub3RlczogeyBpbml0OiBbXSB9LFxuICAgICAgICBzaGFyZWQ6IHsgaW5pdDogbnVsbCB9LFxuICAgICAgICB0YWdzOiB7IGluaXQ6IFtdIH0sXG4gICAgICAgIHdoZW5zOiB7IGluaXQ6IG51bGwgfVxuICAgIH0sXG5cbiAgICBydWxlczoge1xuXG4gICAgICAgIGN1c3RvbToge1xuICAgICAgICAgICAgbWV0aG9kKG1ldGhvZCwgZGVzY3JpcHRpb24pIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nLCAnTWV0aG9kIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgICAgIEFzc2VydChkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkIHx8IGRlc2NyaXB0aW9uICYmIHR5cGVvZiBkZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycsICdEZXNjcmlwdGlvbiBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2N1c3RvbScsIGFyZ3M6IHsgbWV0aG9kLCBkZXNjcmlwdGlvbiB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCB7IG1ldGhvZCB9KSB7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKHZhbHVlLCBoZWxwZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignYW55LmN1c3RvbScsIHsgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnczogWydtZXRob2QnLCAnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIG1ldGhvZChtZXNzYWdlcykge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlZnMoeyBtZXNzYWdlcyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzaGFyZWQ6IHtcbiAgICAgICAgICAgIG1ldGhvZChzY2hlbWEpIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydChDb21tb24uaXNTY2hlbWEoc2NoZW1hKSAmJiBzY2hlbWEuX2ZsYWdzLmlkLCAnU2NoZW1hIG11c3QgYmUgYSBzY2hlbWEgd2l0aCBhbiBpZCcpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIG9iai4kX3Rlcm1zLnNoYXJlZCA9IG9iai4kX3Rlcm1zLnNoYXJlZCB8fCBbXTtcbiAgICAgICAgICAgICAgICBvYmouJF90ZXJtcy5zaGFyZWQucHVzaChzY2hlbWEpO1xuICAgICAgICAgICAgICAgIG9iai4kX211dGF0ZVJlZ2lzdGVyKHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB3YXJuaW5nOiB7XG4gICAgICAgICAgICBtZXRob2QoY29kZSwgbG9jYWwpIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydChjb2RlICYmIHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJywgJ0ludmFsaWQgd2FybmluZyBjb2RlJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX2FkZFJ1bGUoeyBuYW1lOiAnd2FybmluZycsIGFyZ3M6IHsgY29kZSwgbG9jYWwgfSwgd2FybjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycywgeyBjb2RlLCBsb2NhbCB9KSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcihjb2RlLCBsb2NhbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnczogWydjb2RlJywgJ2xvY2FsJ10sXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1vZGlmaWVyczoge1xuXG4gICAgICAgIGtlZXAocnVsZSwgZW5hYmxlZCA9IHRydWUpIHtcblxuICAgICAgICAgICAgcnVsZS5rZWVwID0gZW5hYmxlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBtZXNzYWdlKHJ1bGUsIG1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgcnVsZS5tZXNzYWdlID0gTWVzc2FnZXMuY29tcGlsZShtZXNzYWdlKTtcbiAgICAgICAgfSxcblxuICAgICAgICB3YXJuKHJ1bGUsIGVuYWJsZWQgPSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHJ1bGUud2FybiA9IGVuYWJsZWQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWFuaWZlc3Q6IHtcblxuICAgICAgICBidWlsZChvYmosIGRlc2MpIHtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGVzYykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGRlc2Nba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChbJ2V4YW1wbGVzJywgJ2V4dGVybmFscycsICdtZXRhcycsICdub3RlcycsICd0YWdzJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gb2JqW2tleS5zbGljZSgwLCAtMSldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdhbHRlcmF0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWx0ZXIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHRhcmdldCwgYWRqdXN0ZXIgfSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVyW3RhcmdldF0gPSBhZGp1c3RlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IG9iai5hbHRlcihhbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd3aGVucycpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVmLCBpcywgbm90LCB0aGVuLCBvdGhlcndpc2UsIGNvbmNhdCB9ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uY2F0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gb2JqLmNvbmNhdChjb25jYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gb2JqLndoZW4ocmVmLCB7IGlzLCBub3QsIHRoZW4sIG90aGVyd2lzZSwgc3dpdGNoOiB2YWx1ZS5zd2l0Y2gsIGJyZWFrOiB2YWx1ZS5icmVhayB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IG9iai53aGVuKGlzLCB7IHRoZW4sIG90aGVyd2lzZSwgYnJlYWs6IHZhbHVlLmJyZWFrIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3NoYXJlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IG9iai5zaGFyZWQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICdhbnkuY3VzdG9tJzogJ3t7I2xhYmVsfX0gZmFpbGVkIGN1c3RvbSB2YWxpZGF0aW9uIGJlY2F1c2Uge3sjZXJyb3IubWVzc2FnZX19JyxcbiAgICAgICAgJ2FueS5kZWZhdWx0JzogJ3t7I2xhYmVsfX0gdGhyZXcgYW4gZXJyb3Igd2hlbiBydW5uaW5nIGRlZmF1bHQgbWV0aG9kJyxcbiAgICAgICAgJ2FueS5mYWlsb3Zlcic6ICd7eyNsYWJlbH19IHRocmV3IGFuIGVycm9yIHdoZW4gcnVubmluZyBmYWlsb3ZlciBtZXRob2QnLFxuICAgICAgICAnYW55LmludmFsaWQnOiAne3sjbGFiZWx9fSBjb250YWlucyBhbiBpbnZhbGlkIHZhbHVlJyxcbiAgICAgICAgJ2FueS5vbmx5JzogJ3t7I2xhYmVsfX0gbXVzdCBiZSB7aWYoI3ZhbGlkcy5sZW5ndGggPT0gMSwgXCJcIiwgXCJvbmUgb2YgXCIpfXt7I3ZhbGlkc319JyxcbiAgICAgICAgJ2FueS5yZWYnOiAne3sjbGFiZWx9fSB7eyNhcmd9fSByZWZlcmVuY2VzIHt7OiNyZWZ9fSB3aGljaCB7eyNyZWFzb259fScsXG4gICAgICAgICdhbnkucmVxdWlyZWQnOiAne3sjbGFiZWx9fSBpcyByZXF1aXJlZCcsXG4gICAgICAgICdhbnkudW5rbm93bic6ICd7eyNsYWJlbH19IGlzIG5vdCBhbGxvd2VkJ1xuICAgIH1cbn0pO1xuIl0sIm5hbWVzIjpbIkFzc2VydCIsInJlcXVpcmUiLCJCYXNlIiwiQ29tbW9uIiwiTWVzc2FnZXMiLCJpbnRlcm5hbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXh0ZW5kIiwidHlwZSIsImZsYWdzIiwib25seSIsImRlZmF1bHQiLCJ0ZXJtcyIsImFsdGVyYXRpb25zIiwiaW5pdCIsImV4YW1wbGVzIiwiZXh0ZXJuYWxzIiwibWV0YXMiLCJub3RlcyIsInNoYXJlZCIsInRhZ3MiLCJ3aGVucyIsInJ1bGVzIiwiY3VzdG9tIiwibWV0aG9kIiwiZGVzY3JpcHRpb24iLCJ1bmRlZmluZWQiLCIkX2FkZFJ1bGUiLCJuYW1lIiwiYXJncyIsInZhbGlkYXRlIiwidmFsdWUiLCJoZWxwZXJzIiwiZXJyIiwiZXJyb3IiLCJtdWx0aSIsIm1lc3NhZ2VzIiwicHJlZnMiLCJzY2hlbWEiLCJpc1NjaGVtYSIsIl9mbGFncyIsImlkIiwib2JqIiwiY2xvbmUiLCIkX3Rlcm1zIiwicHVzaCIsIiRfbXV0YXRlUmVnaXN0ZXIiLCJ3YXJuaW5nIiwiY29kZSIsImxvY2FsIiwid2FybiIsIm1vZGlmaWVycyIsImtlZXAiLCJydWxlIiwiZW5hYmxlZCIsIm1lc3NhZ2UiLCJjb21waWxlIiwibWFuaWZlc3QiLCJidWlsZCIsImRlc2MiLCJrZXkiLCJ2YWx1ZXMiLCJpbmNsdWRlcyIsInNsaWNlIiwiYWx0ZXIiLCJ0YXJnZXQiLCJhZGp1c3RlciIsInJlZiIsImlzIiwibm90IiwidGhlbiIsIm90aGVyd2lzZSIsImNvbmNhdCIsIndoZW4iLCJzd2l0Y2giLCJicmVhayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/any.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/array.js":
/*!*********************************************!*\
  !*** ./node_modules/joi/lib/types/array.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"(rsc)/./node_modules/@hapi/hoek/lib/deepEqual.js\");\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"(rsc)/./node_modules/@hapi/hoek/lib/reach.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ../compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst internals = {};\nmodule.exports = Any.extend({\n    type: \"array\",\n    flags: {\n        single: {\n            default: false\n        },\n        sparse: {\n            default: false\n        }\n    },\n    terms: {\n        items: {\n            init: [],\n            manifest: \"schema\"\n        },\n        ordered: {\n            init: [],\n            manifest: \"schema\"\n        },\n        _exclusions: {\n            init: []\n        },\n        _inclusions: {\n            init: []\n        },\n        _requireds: {\n            init: []\n        }\n    },\n    coerce: {\n        from: \"object\",\n        method (value, { schema, state, prefs }) {\n            if (!Array.isArray(value)) {\n                return;\n            }\n            const sort = schema.$_getRule(\"sort\");\n            if (!sort) {\n                return;\n            }\n            return internals.sort(schema, value, sort.args.options, state, prefs);\n        }\n    },\n    validate (value, { schema, error }) {\n        if (!Array.isArray(value)) {\n            if (schema._flags.single) {\n                const single = [\n                    value\n                ];\n                single[Common.symbols.arraySingle] = true;\n                return {\n                    value: single\n                };\n            }\n            return {\n                errors: error(\"array.base\")\n            };\n        }\n        if (!schema.$_getRule(\"items\") && !schema.$_terms.externals) {\n            return;\n        }\n        return {\n            value: value.slice()\n        }; // Clone the array so that we don't modify the original\n    },\n    rules: {\n        has: {\n            method (schema) {\n                schema = this.$_compile(schema, {\n                    appendPath: true\n                });\n                const obj = this.$_addRule({\n                    name: \"has\",\n                    args: {\n                        schema\n                    }\n                });\n                obj.$_mutateRegister(schema);\n                return obj;\n            },\n            validate (value, { state, prefs, error }, { schema: has }) {\n                const ancestors = [\n                    value,\n                    ...state.ancestors\n                ];\n                for(let i = 0; i < value.length; ++i){\n                    const localState = state.localize([\n                        ...state.path,\n                        i\n                    ], ancestors, has);\n                    if (has.$_match(value[i], localState, prefs)) {\n                        return value;\n                    }\n                }\n                const patternLabel = has._flags.label;\n                if (patternLabel) {\n                    return error(\"array.hasKnown\", {\n                        patternLabel\n                    });\n                }\n                return error(\"array.hasUnknown\", null);\n            },\n            multi: true\n        },\n        items: {\n            method (...schemas) {\n                Common.verifyFlat(schemas, \"items\");\n                const obj = this.$_addRule(\"items\");\n                for(let i = 0; i < schemas.length; ++i){\n                    const type = Common.tryWithPath(()=>this.$_compile(schemas[i]), i, {\n                        append: true\n                    });\n                    obj.$_terms.items.push(type);\n                }\n                return obj.$_mutateRebuild();\n            },\n            validate (value, { schema, error, state, prefs, errorsArray }) {\n                const requireds = schema.$_terms._requireds.slice();\n                const ordereds = schema.$_terms.ordered.slice();\n                const inclusions = [\n                    ...schema.$_terms._inclusions,\n                    ...requireds\n                ];\n                const wasArray = !value[Common.symbols.arraySingle];\n                delete value[Common.symbols.arraySingle];\n                const errors = errorsArray();\n                let il = value.length;\n                for(let i = 0; i < il; ++i){\n                    const item = value[i];\n                    let errored = false;\n                    let isValid = false;\n                    const key = wasArray ? i : new Number(i); // eslint-disable-line no-new-wrappers\n                    const path = [\n                        ...state.path,\n                        key\n                    ];\n                    // Sparse\n                    if (!schema._flags.sparse && item === undefined) {\n                        errors.push(error(\"array.sparse\", {\n                            key,\n                            path,\n                            pos: i,\n                            value: undefined\n                        }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n                        ordereds.shift();\n                        continue;\n                    }\n                    // Exclusions\n                    const ancestors = [\n                        value,\n                        ...state.ancestors\n                    ];\n                    for (const exclusion of schema.$_terms._exclusions){\n                        if (!exclusion.$_match(item, state.localize(path, ancestors, exclusion), prefs, {\n                            presence: \"ignore\"\n                        })) {\n                            continue;\n                        }\n                        errors.push(error(\"array.excludes\", {\n                            pos: i,\n                            value: item\n                        }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n                        errored = true;\n                        ordereds.shift();\n                        break;\n                    }\n                    if (errored) {\n                        continue;\n                    }\n                    // Ordered\n                    if (schema.$_terms.ordered.length) {\n                        if (ordereds.length) {\n                            const ordered = ordereds.shift();\n                            const res = ordered.$_validate(item, state.localize(path, ancestors, ordered), prefs);\n                            if (!res.errors) {\n                                if (ordered._flags.result === \"strip\") {\n                                    internals.fastSplice(value, i);\n                                    --i;\n                                    --il;\n                                } else if (!schema._flags.sparse && res.value === undefined) {\n                                    errors.push(error(\"array.sparse\", {\n                                        key,\n                                        path,\n                                        pos: i,\n                                        value: undefined\n                                    }, state.localize(path)));\n                                    if (prefs.abortEarly) {\n                                        return errors;\n                                    }\n                                    continue;\n                                } else {\n                                    value[i] = res.value;\n                                }\n                            } else {\n                                errors.push(...res.errors);\n                                if (prefs.abortEarly) {\n                                    return errors;\n                                }\n                            }\n                            continue;\n                        } else if (!schema.$_terms.items.length) {\n                            errors.push(error(\"array.orderedLength\", {\n                                pos: i,\n                                limit: schema.$_terms.ordered.length\n                            }));\n                            if (prefs.abortEarly) {\n                                return errors;\n                            }\n                            break; // No reason to continue since there are no other rules to validate other than array.orderedLength\n                        }\n                    }\n                    // Requireds\n                    const requiredChecks = [];\n                    let jl = requireds.length;\n                    for(let j = 0; j < jl; ++j){\n                        const localState = state.localize(path, ancestors, requireds[j]);\n                        localState.snapshot();\n                        const res = requireds[j].$_validate(item, localState, prefs);\n                        requiredChecks[j] = res;\n                        if (!res.errors) {\n                            localState.commit();\n                            value[i] = res.value;\n                            isValid = true;\n                            internals.fastSplice(requireds, j);\n                            --j;\n                            --jl;\n                            if (!schema._flags.sparse && res.value === undefined) {\n                                errors.push(error(\"array.sparse\", {\n                                    key,\n                                    path,\n                                    pos: i,\n                                    value: undefined\n                                }, state.localize(path)));\n                                if (prefs.abortEarly) {\n                                    return errors;\n                                }\n                            }\n                            break;\n                        }\n                        localState.restore();\n                    }\n                    if (isValid) {\n                        continue;\n                    }\n                    // Inclusions\n                    const stripUnknown = prefs.stripUnknown && !!prefs.stripUnknown.arrays || false;\n                    jl = inclusions.length;\n                    for (const inclusion of inclusions){\n                        // Avoid re-running requireds that already didn't match in the previous loop\n                        let res;\n                        const previousCheck = requireds.indexOf(inclusion);\n                        if (previousCheck !== -1) {\n                            res = requiredChecks[previousCheck];\n                        } else {\n                            const localState = state.localize(path, ancestors, inclusion);\n                            localState.snapshot();\n                            res = inclusion.$_validate(item, localState, prefs);\n                            if (!res.errors) {\n                                localState.commit();\n                                if (inclusion._flags.result === \"strip\") {\n                                    internals.fastSplice(value, i);\n                                    --i;\n                                    --il;\n                                } else if (!schema._flags.sparse && res.value === undefined) {\n                                    errors.push(error(\"array.sparse\", {\n                                        key,\n                                        path,\n                                        pos: i,\n                                        value: undefined\n                                    }, state.localize(path)));\n                                    errored = true;\n                                } else {\n                                    value[i] = res.value;\n                                }\n                                isValid = true;\n                                break;\n                            }\n                            localState.restore();\n                        }\n                        // Return the actual error if only one inclusion defined\n                        if (jl === 1) {\n                            if (stripUnknown) {\n                                internals.fastSplice(value, i);\n                                --i;\n                                --il;\n                                isValid = true;\n                                break;\n                            }\n                            errors.push(...res.errors);\n                            if (prefs.abortEarly) {\n                                return errors;\n                            }\n                            errored = true;\n                            break;\n                        }\n                    }\n                    if (errored) {\n                        continue;\n                    }\n                    if ((schema.$_terms._inclusions.length || schema.$_terms._requireds.length) && !isValid) {\n                        if (stripUnknown) {\n                            internals.fastSplice(value, i);\n                            --i;\n                            --il;\n                            continue;\n                        }\n                        errors.push(error(\"array.includes\", {\n                            pos: i,\n                            value: item\n                        }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n                    }\n                }\n                if (requireds.length) {\n                    internals.fillMissedErrors(schema, errors, requireds, value, state, prefs);\n                }\n                if (ordereds.length) {\n                    internals.fillOrderedErrors(schema, errors, ordereds, value, state, prefs);\n                    if (!errors.length) {\n                        internals.fillDefault(ordereds, value, state, prefs);\n                    }\n                }\n                return errors.length ? errors : value;\n            },\n            priority: true,\n            manifest: false\n        },\n        length: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"=\"\n                });\n            },\n            validate (value, helpers, { limit }, { name, operator, args }) {\n                if (Common.compare(value.length, limit, operator)) {\n                    return value;\n                }\n                return helpers.error(\"array.\" + name, {\n                    limit: args.limit,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"limit\",\n                    ref: true,\n                    assert: Common.limit,\n                    message: \"must be a positive integer\"\n                }\n            ]\n        },\n        max: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"max\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"<=\"\n                });\n            }\n        },\n        min: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"min\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \">=\"\n                });\n            }\n        },\n        ordered: {\n            method (...schemas) {\n                Common.verifyFlat(schemas, \"ordered\");\n                const obj = this.$_addRule(\"items\");\n                for(let i = 0; i < schemas.length; ++i){\n                    const type = Common.tryWithPath(()=>this.$_compile(schemas[i]), i, {\n                        append: true\n                    });\n                    internals.validateSingle(type, obj);\n                    obj.$_mutateRegister(type);\n                    obj.$_terms.ordered.push(type);\n                }\n                return obj.$_mutateRebuild();\n            }\n        },\n        single: {\n            method (enabled) {\n                const value = enabled === undefined ? true : !!enabled;\n                Assert(!value || !this._flags._arrayItems, \"Cannot specify single rule when array has array items\");\n                return this.$_setFlag(\"single\", value);\n            }\n        },\n        sort: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"by\",\n                    \"order\"\n                ]);\n                const settings = {\n                    order: options.order || \"ascending\"\n                };\n                if (options.by) {\n                    settings.by = Compile.ref(options.by, {\n                        ancestor: 0\n                    });\n                    Assert(!settings.by.ancestor, \"Cannot sort by ancestor\");\n                }\n                return this.$_addRule({\n                    name: \"sort\",\n                    args: {\n                        options: settings\n                    }\n                });\n            },\n            validate (value, { error, state, prefs, schema }, { options }) {\n                const { value: sorted, errors } = internals.sort(schema, value, options, state, prefs);\n                if (errors) {\n                    return errors;\n                }\n                for(let i = 0; i < value.length; ++i){\n                    if (value[i] !== sorted[i]) {\n                        return error(\"array.sort\", {\n                            order: options.order,\n                            by: options.by ? options.by.key : \"value\"\n                        });\n                    }\n                }\n                return value;\n            },\n            convert: true\n        },\n        sparse: {\n            method (enabled) {\n                const value = enabled === undefined ? true : !!enabled;\n                if (this._flags.sparse === value) {\n                    return this;\n                }\n                const obj = value ? this.clone() : this.$_addRule(\"items\");\n                return obj.$_setFlag(\"sparse\", value, {\n                    clone: false\n                });\n            }\n        },\n        unique: {\n            method (comparator, options = {}) {\n                Assert(!comparator || typeof comparator === \"function\" || typeof comparator === \"string\", \"comparator must be a function or a string\");\n                Common.assertOptions(options, [\n                    \"ignoreUndefined\",\n                    \"separator\"\n                ]);\n                const rule = {\n                    name: \"unique\",\n                    args: {\n                        options,\n                        comparator\n                    }\n                };\n                if (comparator) {\n                    if (typeof comparator === \"string\") {\n                        const separator = Common.default(options.separator, \".\");\n                        rule.path = separator ? comparator.split(separator) : [\n                            comparator\n                        ];\n                    } else {\n                        rule.comparator = comparator;\n                    }\n                }\n                return this.$_addRule(rule);\n            },\n            validate (value, { state, error, schema }, { comparator: raw, options }, { comparator, path }) {\n                const found = {\n                    string: Object.create(null),\n                    number: Object.create(null),\n                    undefined: Object.create(null),\n                    boolean: Object.create(null),\n                    bigint: Object.create(null),\n                    object: new Map(),\n                    function: new Map(),\n                    custom: new Map()\n                };\n                const compare = comparator || DeepEqual;\n                const ignoreUndefined = options.ignoreUndefined;\n                for(let i = 0; i < value.length; ++i){\n                    const item = path ? Reach(value[i], path) : value[i];\n                    const records = comparator ? found.custom : found[typeof item];\n                    Assert(records, \"Failed to find unique map container for type\", typeof item);\n                    if (records instanceof Map) {\n                        const entries = records.entries();\n                        let current;\n                        while(!(current = entries.next()).done){\n                            if (compare(current.value[0], item)) {\n                                const localState = state.localize([\n                                    ...state.path,\n                                    i\n                                ], [\n                                    value,\n                                    ...state.ancestors\n                                ]);\n                                const context = {\n                                    pos: i,\n                                    value: value[i],\n                                    dupePos: current.value[1],\n                                    dupeValue: value[current.value[1]]\n                                };\n                                if (path) {\n                                    context.path = raw;\n                                }\n                                return error(\"array.unique\", context, localState);\n                            }\n                        }\n                        records.set(item, i);\n                    } else {\n                        if ((!ignoreUndefined || item !== undefined) && records[item] !== undefined) {\n                            const context = {\n                                pos: i,\n                                value: value[i],\n                                dupePos: records[item],\n                                dupeValue: value[records[item]]\n                            };\n                            if (path) {\n                                context.path = raw;\n                            }\n                            const localState = state.localize([\n                                ...state.path,\n                                i\n                            ], [\n                                value,\n                                ...state.ancestors\n                            ]);\n                            return error(\"array.unique\", context, localState);\n                        }\n                        records[item] = i;\n                    }\n                }\n                return value;\n            },\n            args: [\n                \"comparator\",\n                \"options\"\n            ],\n            multi: true\n        }\n    },\n    cast: {\n        set: {\n            from: Array.isArray,\n            to (value, helpers) {\n                return new Set(value);\n            }\n        }\n    },\n    rebuild (schema) {\n        schema.$_terms._inclusions = [];\n        schema.$_terms._exclusions = [];\n        schema.$_terms._requireds = [];\n        for (const type of schema.$_terms.items){\n            internals.validateSingle(type, schema);\n            if (type._flags.presence === \"required\") {\n                schema.$_terms._requireds.push(type);\n            } else if (type._flags.presence === \"forbidden\") {\n                schema.$_terms._exclusions.push(type);\n            } else {\n                schema.$_terms._inclusions.push(type);\n            }\n        }\n        for (const type of schema.$_terms.ordered){\n            internals.validateSingle(type, schema);\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.items) {\n                obj = obj.items(...desc.items);\n            }\n            if (desc.ordered) {\n                obj = obj.ordered(...desc.ordered);\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"array.base\": \"{{#label}} must be an array\",\n        \"array.excludes\": \"{{#label}} contains an excluded value\",\n        \"array.hasKnown\": \"{{#label}} does not contain at least one required match for type {:#patternLabel}\",\n        \"array.hasUnknown\": \"{{#label}} does not contain at least one required match\",\n        \"array.includes\": \"{{#label}} does not match any of the allowed types\",\n        \"array.includesRequiredBoth\": \"{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)\",\n        \"array.includesRequiredKnowns\": \"{{#label}} does not contain {{#knownMisses}}\",\n        \"array.includesRequiredUnknowns\": \"{{#label}} does not contain {{#unknownMisses}} required value(s)\",\n        \"array.length\": \"{{#label}} must contain {{#limit}} items\",\n        \"array.max\": \"{{#label}} must contain less than or equal to {{#limit}} items\",\n        \"array.min\": \"{{#label}} must contain at least {{#limit}} items\",\n        \"array.orderedLength\": \"{{#label}} must contain at most {{#limit}} items\",\n        \"array.sort\": \"{{#label}} must be sorted in {#order} order by {{#by}}\",\n        \"array.sort.mismatching\": \"{{#label}} cannot be sorted due to mismatching types\",\n        \"array.sort.unsupported\": \"{{#label}} cannot be sorted due to unsupported type {#type}\",\n        \"array.sparse\": \"{{#label}} must not be a sparse array item\",\n        \"array.unique\": \"{{#label}} contains a duplicate value\"\n    }\n});\n// Helpers\ninternals.fillMissedErrors = function(schema, errors, requireds, value, state, prefs) {\n    const knownMisses = [];\n    let unknownMisses = 0;\n    for (const required of requireds){\n        const label = required._flags.label;\n        if (label) {\n            knownMisses.push(label);\n        } else {\n            ++unknownMisses;\n        }\n    }\n    if (knownMisses.length) {\n        if (unknownMisses) {\n            errors.push(schema.$_createError(\"array.includesRequiredBoth\", value, {\n                knownMisses,\n                unknownMisses\n            }, state, prefs));\n        } else {\n            errors.push(schema.$_createError(\"array.includesRequiredKnowns\", value, {\n                knownMisses\n            }, state, prefs));\n        }\n    } else {\n        errors.push(schema.$_createError(\"array.includesRequiredUnknowns\", value, {\n            unknownMisses\n        }, state, prefs));\n    }\n};\ninternals.fillOrderedErrors = function(schema, errors, ordereds, value, state, prefs) {\n    const requiredOrdereds = [];\n    for (const ordered of ordereds){\n        if (ordered._flags.presence === \"required\") {\n            requiredOrdereds.push(ordered);\n        }\n    }\n    if (requiredOrdereds.length) {\n        internals.fillMissedErrors(schema, errors, requiredOrdereds, value, state, prefs);\n    }\n};\ninternals.fillDefault = function(ordereds, value, state, prefs) {\n    const overrides = [];\n    let trailingUndefined = true;\n    for(let i = ordereds.length - 1; i >= 0; --i){\n        const ordered = ordereds[i];\n        const ancestors = [\n            value,\n            ...state.ancestors\n        ];\n        const override = ordered.$_validate(undefined, state.localize(state.path, ancestors, ordered), prefs).value;\n        if (trailingUndefined) {\n            if (override === undefined) {\n                continue;\n            }\n            trailingUndefined = false;\n        }\n        overrides.unshift(override);\n    }\n    if (overrides.length) {\n        value.push(...overrides);\n    }\n};\ninternals.fastSplice = function(arr, i) {\n    let pos = i;\n    while(pos < arr.length){\n        arr[pos++] = arr[pos];\n    }\n    --arr.length;\n};\ninternals.validateSingle = function(type, obj) {\n    if (type.type === \"array\" || type._flags._arrayItems) {\n        Assert(!obj._flags.single, \"Cannot specify array item with single rule enabled\");\n        obj.$_setFlag(\"_arrayItems\", true, {\n            clone: false\n        });\n    }\n};\ninternals.sort = function(schema, value, settings, state, prefs) {\n    const order = settings.order === \"ascending\" ? 1 : -1;\n    const aFirst = -1 * order;\n    const bFirst = order;\n    const sort = (a, b)=>{\n        let compare = internals.compare(a, b, aFirst, bFirst);\n        if (compare !== null) {\n            return compare;\n        }\n        if (settings.by) {\n            a = settings.by.resolve(a, state, prefs);\n            b = settings.by.resolve(b, state, prefs);\n        }\n        compare = internals.compare(a, b, aFirst, bFirst);\n        if (compare !== null) {\n            return compare;\n        }\n        const type = typeof a;\n        if (type !== typeof b) {\n            throw schema.$_createError(\"array.sort.mismatching\", value, null, state, prefs);\n        }\n        if (type !== \"number\" && type !== \"string\") {\n            throw schema.$_createError(\"array.sort.unsupported\", value, {\n                type\n            }, state, prefs);\n        }\n        if (type === \"number\") {\n            return (a - b) * order;\n        }\n        return a < b ? aFirst : bFirst;\n    };\n    try {\n        return {\n            value: value.slice().sort(sort)\n        };\n    } catch (err) {\n        return {\n            errors: err\n        };\n    }\n};\ninternals.compare = function(a, b, aFirst, bFirst) {\n    if (a === b) {\n        return 0;\n    }\n    if (a === undefined) {\n        return 1; // Always last regardless of sort order\n    }\n    if (b === undefined) {\n        return -1; // Always last regardless of sort order\n    }\n    if (a === null) {\n        return bFirst;\n    }\n    if (b === null) {\n        return aFirst;\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/binary.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/binary.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {};\nmodule.exports = Any.extend({\n    type: \"binary\",\n    coerce: {\n        from: [\n            \"string\",\n            \"object\"\n        ],\n        method (value, { schema }) {\n            if (typeof value === \"string\" || value !== null && value.type === \"Buffer\") {\n                try {\n                    return {\n                        value: Buffer.from(value, schema._flags.encoding)\n                    };\n                } catch (ignoreErr) {}\n            }\n        }\n    },\n    validate (value, { error }) {\n        if (!Buffer.isBuffer(value)) {\n            return {\n                value,\n                errors: error(\"binary.base\")\n            };\n        }\n    },\n    rules: {\n        encoding: {\n            method (encoding) {\n                Assert(Buffer.isEncoding(encoding), \"Invalid encoding:\", encoding);\n                return this.$_setFlag(\"encoding\", encoding);\n            }\n        },\n        length: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"length\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"=\"\n                });\n            },\n            validate (value, helpers, { limit }, { name, operator, args }) {\n                if (Common.compare(value.length, limit, operator)) {\n                    return value;\n                }\n                return helpers.error(\"binary.\" + name, {\n                    limit: args.limit,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"limit\",\n                    ref: true,\n                    assert: Common.limit,\n                    message: \"must be a positive integer\"\n                }\n            ]\n        },\n        max: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"max\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"<=\"\n                });\n            }\n        },\n        min: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"min\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \">=\"\n                });\n            }\n        }\n    },\n    cast: {\n        string: {\n            from: (value)=>Buffer.isBuffer(value),\n            to (value, helpers) {\n                return value.toString();\n            }\n        }\n    },\n    messages: {\n        \"binary.base\": \"{{#label}} must be a buffer or a string\",\n        \"binary.length\": \"{{#label}} must be {{#limit}} bytes\",\n        \"binary.max\": \"{{#label}} must be less than or equal to {{#limit}} bytes\",\n        \"binary.min\": \"{{#label}} must be at least {{#limit}} bytes\"\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9iaW5hcnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QixNQUFNQyxNQUFNRCxtQkFBT0EsQ0FBQztBQUNwQixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUd2QixNQUFNRyxZQUFZLENBQUM7QUFHbkJDLE9BQU9DLE9BQU8sR0FBR0osSUFBSUssTUFBTSxDQUFDO0lBRXhCQyxNQUFNO0lBRU5DLFFBQVE7UUFDSkMsTUFBTTtZQUFDO1lBQVU7U0FBUztRQUMxQkMsUUFBT0MsS0FBSyxFQUFFLEVBQUVDLE1BQU0sRUFBRTtZQUVwQixJQUFJLE9BQU9ELFVBQVUsWUFBYUEsVUFBVSxRQUFRQSxNQUFNSixJQUFJLEtBQUssVUFBVztnQkFDMUUsSUFBSTtvQkFDQSxPQUFPO3dCQUFFSSxPQUFPRSxPQUFPSixJQUFJLENBQUNFLE9BQU9DLE9BQU9FLE1BQU0sQ0FBQ0MsUUFBUTtvQkFBRTtnQkFDL0QsRUFDQSxPQUFPQyxXQUFXLENBQUU7WUFDeEI7UUFDSjtJQUNKO0lBRUFDLFVBQVNOLEtBQUssRUFBRSxFQUFFTyxLQUFLLEVBQUU7UUFFckIsSUFBSSxDQUFDTCxPQUFPTSxRQUFRLENBQUNSLFFBQVE7WUFDekIsT0FBTztnQkFBRUE7Z0JBQU9TLFFBQVFGLE1BQU07WUFBZTtRQUNqRDtJQUNKO0lBRUFHLE9BQU87UUFDSE4sVUFBVTtZQUNOTCxRQUFPSyxRQUFRO2dCQUVYaEIsT0FBT2MsT0FBT1MsVUFBVSxDQUFDUCxXQUFXLHFCQUFxQkE7Z0JBRXpELE9BQU8sSUFBSSxDQUFDUSxTQUFTLENBQUMsWUFBWVI7WUFDdEM7UUFDSjtRQUVBUyxRQUFRO1lBQ0pkLFFBQU9lLEtBQUs7Z0JBRVIsT0FBTyxJQUFJLENBQUNDLFNBQVMsQ0FBQztvQkFBRUMsTUFBTTtvQkFBVWpCLFFBQVE7b0JBQVVrQixNQUFNO3dCQUFFSDtvQkFBTTtvQkFBR0ksVUFBVTtnQkFBSTtZQUM3RjtZQUNBWixVQUFTTixLQUFLLEVBQUVtQixPQUFPLEVBQUUsRUFBRUwsS0FBSyxFQUFFLEVBQUUsRUFBRUUsSUFBSSxFQUFFRSxRQUFRLEVBQUVELElBQUksRUFBRTtnQkFFeEQsSUFBSTFCLE9BQU82QixPQUFPLENBQUNwQixNQUFNYSxNQUFNLEVBQUVDLE9BQU9JLFdBQVc7b0JBQy9DLE9BQU9sQjtnQkFDWDtnQkFFQSxPQUFPbUIsUUFBUVosS0FBSyxDQUFDLFlBQVlTLE1BQU07b0JBQUVGLE9BQU9HLEtBQUtILEtBQUs7b0JBQUVkO2dCQUFNO1lBQ3RFO1lBQ0FpQixNQUFNO2dCQUNGO29CQUNJRCxNQUFNO29CQUNOSyxLQUFLO29CQUNMQyxRQUFRL0IsT0FBT3VCLEtBQUs7b0JBQ3BCUyxTQUFTO2dCQUNiO2FBQ0g7UUFDTDtRQUVBQyxLQUFLO1lBQ0R6QixRQUFPZSxLQUFLO2dCQUVSLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUM7b0JBQUVDLE1BQU07b0JBQU9qQixRQUFRO29CQUFVa0IsTUFBTTt3QkFBRUg7b0JBQU07b0JBQUdJLFVBQVU7Z0JBQUs7WUFDM0Y7UUFDSjtRQUVBTyxLQUFLO1lBQ0QxQixRQUFPZSxLQUFLO2dCQUVSLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUM7b0JBQUVDLE1BQU07b0JBQU9qQixRQUFRO29CQUFVa0IsTUFBTTt3QkFBRUg7b0JBQU07b0JBQUdJLFVBQVU7Z0JBQUs7WUFDM0Y7UUFDSjtJQUNKO0lBRUFRLE1BQU07UUFDRkMsUUFBUTtZQUNKN0IsTUFBTSxDQUFDRSxRQUFVRSxPQUFPTSxRQUFRLENBQUNSO1lBQ2pDNEIsSUFBRzVCLEtBQUssRUFBRW1CLE9BQU87Z0JBRWIsT0FBT25CLE1BQU02QixRQUFRO1lBQ3pCO1FBQ0o7SUFDSjtJQUVBQyxVQUFVO1FBQ04sZUFBZTtRQUNmLGlCQUFpQjtRQUNqQixjQUFjO1FBQ2QsY0FBYztJQUNsQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzdGVoZXJvLy4vbm9kZV9tb2R1bGVzL2pvaS9saWIvdHlwZXMvYmluYXJ5LmpzPzY1NWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NlcnQgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9hc3NlcnQnKTtcblxuY29uc3QgQW55ID0gcmVxdWlyZSgnLi9hbnknKTtcbmNvbnN0IENvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5cbmNvbnN0IGludGVybmFscyA9IHt9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQW55LmV4dGVuZCh7XG5cbiAgICB0eXBlOiAnYmluYXJ5JyxcblxuICAgIGNvZXJjZToge1xuICAgICAgICBmcm9tOiBbJ3N0cmluZycsICdvYmplY3QnXSxcbiAgICAgICAgbWV0aG9kKHZhbHVlLCB7IHNjaGVtYSB9KSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8ICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS50eXBlID09PSAnQnVmZmVyJykpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogQnVmZmVyLmZyb20odmFsdWUsIHNjaGVtYS5fZmxhZ3MuZW5jb2RpbmcpIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVFcnIpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlKHZhbHVlLCB7IGVycm9yIH0pIHtcblxuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlLCBlcnJvcnM6IGVycm9yKCdiaW5hcnkuYmFzZScpIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcnVsZXM6IHtcbiAgICAgICAgZW5jb2Rpbmc6IHtcbiAgICAgICAgICAgIG1ldGhvZChlbmNvZGluZykge1xuXG4gICAgICAgICAgICAgICAgQXNzZXJ0KEJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSwgJ0ludmFsaWQgZW5jb2Rpbmc6JywgZW5jb2RpbmcpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9zZXRGbGFnKCdlbmNvZGluZycsIGVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBsZW5ndGg6IHtcbiAgICAgICAgICAgIG1ldGhvZChsaW1pdCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2xlbmd0aCcsIG1ldGhvZDogJ2xlbmd0aCcsIGFyZ3M6IHsgbGltaXQgfSwgb3BlcmF0b3I6ICc9JyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycywgeyBsaW1pdCB9LCB7IG5hbWUsIG9wZXJhdG9yLCBhcmdzIH0pIHtcblxuICAgICAgICAgICAgICAgIGlmIChDb21tb24uY29tcGFyZSh2YWx1ZS5sZW5ndGgsIGxpbWl0LCBvcGVyYXRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdiaW5hcnkuJyArIG5hbWUsIHsgbGltaXQ6IGFyZ3MubGltaXQsIHZhbHVlIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdsaW1pdCcsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBDb21tb24ubGltaXQsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF4OiB7XG4gICAgICAgICAgICBtZXRob2QobGltaXQpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdtYXgnLCBtZXRob2Q6ICdsZW5ndGgnLCBhcmdzOiB7IGxpbWl0IH0sIG9wZXJhdG9yOiAnPD0nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1pbjoge1xuICAgICAgICAgICAgbWV0aG9kKGxpbWl0KSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX2FkZFJ1bGUoeyBuYW1lOiAnbWluJywgbWV0aG9kOiAnbGVuZ3RoJywgYXJnczogeyBsaW1pdCB9LCBvcGVyYXRvcjogJz49JyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjYXN0OiB7XG4gICAgICAgIHN0cmluZzoge1xuICAgICAgICAgICAgZnJvbTogKHZhbHVlKSA9PiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgICAgdG8odmFsdWUsIGhlbHBlcnMpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICdiaW5hcnkuYmFzZSc6ICd7eyNsYWJlbH19IG11c3QgYmUgYSBidWZmZXIgb3IgYSBzdHJpbmcnLFxuICAgICAgICAnYmluYXJ5Lmxlbmd0aCc6ICd7eyNsYWJlbH19IG11c3QgYmUge3sjbGltaXR9fSBieXRlcycsXG4gICAgICAgICdiaW5hcnkubWF4JzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge3sjbGltaXR9fSBieXRlcycsXG4gICAgICAgICdiaW5hcnkubWluJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBhdCBsZWFzdCB7eyNsaW1pdH19IGJ5dGVzJ1xuICAgIH1cbn0pO1xuIl0sIm5hbWVzIjpbIkFzc2VydCIsInJlcXVpcmUiLCJBbnkiLCJDb21tb24iLCJpbnRlcm5hbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXh0ZW5kIiwidHlwZSIsImNvZXJjZSIsImZyb20iLCJtZXRob2QiLCJ2YWx1ZSIsInNjaGVtYSIsIkJ1ZmZlciIsIl9mbGFncyIsImVuY29kaW5nIiwiaWdub3JlRXJyIiwidmFsaWRhdGUiLCJlcnJvciIsImlzQnVmZmVyIiwiZXJyb3JzIiwicnVsZXMiLCJpc0VuY29kaW5nIiwiJF9zZXRGbGFnIiwibGVuZ3RoIiwibGltaXQiLCIkX2FkZFJ1bGUiLCJuYW1lIiwiYXJncyIsIm9wZXJhdG9yIiwiaGVscGVycyIsImNvbXBhcmUiLCJyZWYiLCJhc3NlcnQiLCJtZXNzYWdlIiwibWF4IiwibWluIiwiY2FzdCIsInN0cmluZyIsInRvIiwidG9TdHJpbmciLCJtZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/binary.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/boolean.js":
/*!***********************************************!*\
  !*** ./node_modules/joi/lib/types/boolean.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Values = __webpack_require__(/*! ../values */ \"(rsc)/./node_modules/joi/lib/values.js\");\nconst internals = {};\ninternals.isBool = function(value) {\n    return typeof value === \"boolean\";\n};\nmodule.exports = Any.extend({\n    type: \"boolean\",\n    flags: {\n        sensitive: {\n            default: false\n        }\n    },\n    terms: {\n        falsy: {\n            init: null,\n            manifest: \"values\"\n        },\n        truthy: {\n            init: null,\n            manifest: \"values\"\n        }\n    },\n    coerce (value, { schema }) {\n        if (typeof value === \"boolean\") {\n            return;\n        }\n        if (typeof value === \"string\") {\n            const normalized = schema._flags.sensitive ? value : value.toLowerCase();\n            value = normalized === \"true\" ? true : normalized === \"false\" ? false : value;\n        }\n        if (typeof value !== \"boolean\") {\n            value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) || (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);\n        }\n        return {\n            value\n        };\n    },\n    validate (value, { error }) {\n        if (typeof value !== \"boolean\") {\n            return {\n                value,\n                errors: error(\"boolean.base\")\n            };\n        }\n    },\n    rules: {\n        truthy: {\n            method (...values) {\n                Common.verifyFlat(values, \"truthy\");\n                const obj = this.clone();\n                obj.$_terms.truthy = obj.$_terms.truthy || new Values();\n                for(let i = 0; i < values.length; ++i){\n                    const value = values[i];\n                    Assert(value !== undefined, \"Cannot call truthy with undefined\");\n                    obj.$_terms.truthy.add(value);\n                }\n                return obj;\n            }\n        },\n        falsy: {\n            method (...values) {\n                Common.verifyFlat(values, \"falsy\");\n                const obj = this.clone();\n                obj.$_terms.falsy = obj.$_terms.falsy || new Values();\n                for(let i = 0; i < values.length; ++i){\n                    const value = values[i];\n                    Assert(value !== undefined, \"Cannot call falsy with undefined\");\n                    obj.$_terms.falsy.add(value);\n                }\n                return obj;\n            }\n        },\n        sensitive: {\n            method (enabled = true) {\n                return this.$_setFlag(\"sensitive\", enabled);\n            }\n        }\n    },\n    cast: {\n        number: {\n            from: internals.isBool,\n            to (value, helpers) {\n                return value ? 1 : 0;\n            }\n        },\n        string: {\n            from: internals.isBool,\n            to (value, helpers) {\n                return value ? \"true\" : \"false\";\n            }\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.truthy) {\n                obj = obj.truthy(...desc.truthy);\n            }\n            if (desc.falsy) {\n                obj = obj.falsy(...desc.falsy);\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"boolean.base\": \"{{#label}} must be a boolean\"\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/boolean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/date.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/date.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Template = __webpack_require__(/*! ../template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nconst internals = {};\ninternals.isDate = function(value) {\n    return value instanceof Date;\n};\nmodule.exports = Any.extend({\n    type: \"date\",\n    coerce: {\n        from: [\n            \"number\",\n            \"string\"\n        ],\n        method (value, { schema }) {\n            return {\n                value: internals.parse(value, schema._flags.format) || value\n            };\n        }\n    },\n    validate (value, { schema, error, prefs }) {\n        if (value instanceof Date && !isNaN(value.getTime())) {\n            return;\n        }\n        const format = schema._flags.format;\n        if (!prefs.convert || !format || typeof value !== \"string\") {\n            return {\n                value,\n                errors: error(\"date.base\")\n            };\n        }\n        return {\n            value,\n            errors: error(\"date.format\", {\n                format\n            })\n        };\n    },\n    rules: {\n        compare: {\n            method: false,\n            validate (value, helpers, { date }, { name, operator, args }) {\n                const to = date === \"now\" ? Date.now() : date.getTime();\n                if (Common.compare(value.getTime(), to, operator)) {\n                    return value;\n                }\n                return helpers.error(\"date.\" + name, {\n                    limit: args.date,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"date\",\n                    ref: true,\n                    normalize: (date)=>{\n                        return date === \"now\" ? date : internals.parse(date);\n                    },\n                    assert: (date)=>date !== null,\n                    message: \"must have a valid date format\"\n                }\n            ]\n        },\n        format: {\n            method (format) {\n                Assert([\n                    \"iso\",\n                    \"javascript\",\n                    \"unix\"\n                ].includes(format), \"Unknown date format\", format);\n                return this.$_setFlag(\"format\", format);\n            }\n        },\n        greater: {\n            method (date) {\n                return this.$_addRule({\n                    name: \"greater\",\n                    method: \"compare\",\n                    args: {\n                        date\n                    },\n                    operator: \">\"\n                });\n            }\n        },\n        iso: {\n            method () {\n                return this.format(\"iso\");\n            }\n        },\n        less: {\n            method (date) {\n                return this.$_addRule({\n                    name: \"less\",\n                    method: \"compare\",\n                    args: {\n                        date\n                    },\n                    operator: \"<\"\n                });\n            }\n        },\n        max: {\n            method (date) {\n                return this.$_addRule({\n                    name: \"max\",\n                    method: \"compare\",\n                    args: {\n                        date\n                    },\n                    operator: \"<=\"\n                });\n            }\n        },\n        min: {\n            method (date) {\n                return this.$_addRule({\n                    name: \"min\",\n                    method: \"compare\",\n                    args: {\n                        date\n                    },\n                    operator: \">=\"\n                });\n            }\n        },\n        timestamp: {\n            method (type = \"javascript\") {\n                Assert([\n                    \"javascript\",\n                    \"unix\"\n                ].includes(type), '\"type\" must be one of \"javascript, unix\"');\n                return this.format(type);\n            }\n        }\n    },\n    cast: {\n        number: {\n            from: internals.isDate,\n            to (value, helpers) {\n                return value.getTime();\n            }\n        },\n        string: {\n            from: internals.isDate,\n            to (value, { prefs }) {\n                return Template.date(value, prefs);\n            }\n        }\n    },\n    messages: {\n        \"date.base\": \"{{#label}} must be a valid date\",\n        \"date.format\": '{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\n        \"date.greater\": \"{{#label}} must be greater than {{:#limit}}\",\n        \"date.less\": \"{{#label}} must be less than {{:#limit}}\",\n        \"date.max\": \"{{#label}} must be less than or equal to {{:#limit}}\",\n        \"date.min\": \"{{#label}} must be greater than or equal to {{:#limit}}\",\n        // Messages used in date.format\n        \"date.format.iso\": \"ISO 8601 date\",\n        \"date.format.javascript\": \"timestamp or number of milliseconds\",\n        \"date.format.unix\": \"timestamp or number of seconds\"\n    }\n});\n// Helpers\ninternals.parse = function(value, format) {\n    if (value instanceof Date) {\n        return value;\n    }\n    if (typeof value !== \"string\" && (isNaN(value) || !isFinite(value))) {\n        return null;\n    }\n    if (/^\\s*$/.test(value)) {\n        return null;\n    }\n    // ISO\n    if (format === \"iso\") {\n        if (!Common.isIsoDate(value)) {\n            return null;\n        }\n        return internals.date(value.toString());\n    }\n    // Normalize number string\n    const original = value;\n    if (typeof value === \"string\" && /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n        value = parseFloat(value);\n    }\n    // Timestamp\n    if (format) {\n        if (format === \"javascript\") {\n            return internals.date(1 * value); // Casting to number\n        }\n        if (format === \"unix\") {\n            return internals.date(1000 * value);\n        }\n        if (typeof original === \"string\") {\n            return null;\n        }\n    }\n    // Plain\n    return internals.date(value);\n};\ninternals.date = function(value) {\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n        return date;\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/date.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/function.js":
/*!************************************************!*\
  !*** ./node_modules/joi/lib/types/function.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Keys = __webpack_require__(/*! ./keys */ \"(rsc)/./node_modules/joi/lib/types/keys.js\");\nconst internals = {};\nmodule.exports = Keys.extend({\n    type: \"function\",\n    properties: {\n        typeof: \"function\"\n    },\n    rules: {\n        arity: {\n            method (n) {\n                Assert(Number.isSafeInteger(n) && n >= 0, \"n must be a positive integer\");\n                return this.$_addRule({\n                    name: \"arity\",\n                    args: {\n                        n\n                    }\n                });\n            },\n            validate (value, helpers, { n }) {\n                if (value.length === n) {\n                    return value;\n                }\n                return helpers.error(\"function.arity\", {\n                    n\n                });\n            }\n        },\n        class: {\n            method () {\n                return this.$_addRule(\"class\");\n            },\n            validate (value, helpers) {\n                if (/^\\s*class\\s/.test(value.toString())) {\n                    return value;\n                }\n                return helpers.error(\"function.class\", {\n                    value\n                });\n            }\n        },\n        minArity: {\n            method (n) {\n                Assert(Number.isSafeInteger(n) && n > 0, \"n must be a strict positive integer\");\n                return this.$_addRule({\n                    name: \"minArity\",\n                    args: {\n                        n\n                    }\n                });\n            },\n            validate (value, helpers, { n }) {\n                if (value.length >= n) {\n                    return value;\n                }\n                return helpers.error(\"function.minArity\", {\n                    n\n                });\n            }\n        },\n        maxArity: {\n            method (n) {\n                Assert(Number.isSafeInteger(n) && n >= 0, \"n must be a positive integer\");\n                return this.$_addRule({\n                    name: \"maxArity\",\n                    args: {\n                        n\n                    }\n                });\n            },\n            validate (value, helpers, { n }) {\n                if (value.length <= n) {\n                    return value;\n                }\n                return helpers.error(\"function.maxArity\", {\n                    n\n                });\n            }\n        }\n    },\n    messages: {\n        \"function.arity\": \"{{#label}} must have an arity of {{#n}}\",\n        \"function.class\": \"{{#label}} must be a class\",\n        \"function.maxArity\": \"{{#label}} must have an arity lesser or equal to {{#n}}\",\n        \"function.minArity\": \"{{#label}} must have an arity greater or equal to {{#n}}\"\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9mdW5jdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXZCLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDO0FBR3JCLE1BQU1FLFlBQVksQ0FBQztBQUduQkMsT0FBT0MsT0FBTyxHQUFHSCxLQUFLSSxNQUFNLENBQUM7SUFFekJDLE1BQU07SUFFTkMsWUFBWTtRQUNSQyxRQUFRO0lBQ1o7SUFFQUMsT0FBTztRQUNIQyxPQUFPO1lBQ0hDLFFBQU9DLENBQUM7Z0JBRUpiLE9BQU9jLE9BQU9DLGFBQWEsQ0FBQ0YsTUFBTUEsS0FBSyxHQUFHO2dCQUUxQyxPQUFPLElBQUksQ0FBQ0csU0FBUyxDQUFDO29CQUFFQyxNQUFNO29CQUFTQyxNQUFNO3dCQUFFTDtvQkFBRTtnQkFBRTtZQUN2RDtZQUNBTSxVQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxFQUFFUixDQUFDLEVBQUU7Z0JBRTFCLElBQUlPLE1BQU1FLE1BQU0sS0FBS1QsR0FBRztvQkFDcEIsT0FBT087Z0JBQ1g7Z0JBRUEsT0FBT0MsUUFBUUUsS0FBSyxDQUFDLGtCQUFrQjtvQkFBRVY7Z0JBQUU7WUFDL0M7UUFDSjtRQUVBVyxPQUFPO1lBQ0haO2dCQUVJLE9BQU8sSUFBSSxDQUFDSSxTQUFTLENBQUM7WUFDMUI7WUFDQUcsVUFBU0MsS0FBSyxFQUFFQyxPQUFPO2dCQUVuQixJQUFJLGNBQWdCSSxJQUFJLENBQUNMLE1BQU1NLFFBQVEsS0FBSztvQkFDeEMsT0FBT047Z0JBQ1g7Z0JBRUEsT0FBT0MsUUFBUUUsS0FBSyxDQUFDLGtCQUFrQjtvQkFBRUg7Z0JBQU07WUFDbkQ7UUFDSjtRQUVBTyxVQUFVO1lBQ05mLFFBQU9DLENBQUM7Z0JBRUpiLE9BQU9jLE9BQU9DLGFBQWEsQ0FBQ0YsTUFBTUEsSUFBSSxHQUFHO2dCQUV6QyxPQUFPLElBQUksQ0FBQ0csU0FBUyxDQUFDO29CQUFFQyxNQUFNO29CQUFZQyxNQUFNO3dCQUFFTDtvQkFBRTtnQkFBRTtZQUMxRDtZQUNBTSxVQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxFQUFFUixDQUFDLEVBQUU7Z0JBRTFCLElBQUlPLE1BQU1FLE1BQU0sSUFBSVQsR0FBRztvQkFDbkIsT0FBT087Z0JBQ1g7Z0JBRUEsT0FBT0MsUUFBUUUsS0FBSyxDQUFDLHFCQUFxQjtvQkFBRVY7Z0JBQUU7WUFDbEQ7UUFDSjtRQUVBZSxVQUFVO1lBQ05oQixRQUFPQyxDQUFDO2dCQUVKYixPQUFPYyxPQUFPQyxhQUFhLENBQUNGLE1BQU1BLEtBQUssR0FBRztnQkFFMUMsT0FBTyxJQUFJLENBQUNHLFNBQVMsQ0FBQztvQkFBRUMsTUFBTTtvQkFBWUMsTUFBTTt3QkFBRUw7b0JBQUU7Z0JBQUU7WUFDMUQ7WUFDQU0sVUFBU0MsS0FBSyxFQUFFQyxPQUFPLEVBQUUsRUFBRVIsQ0FBQyxFQUFFO2dCQUUxQixJQUFJTyxNQUFNRSxNQUFNLElBQUlULEdBQUc7b0JBQ25CLE9BQU9PO2dCQUNYO2dCQUVBLE9BQU9DLFFBQVFFLEtBQUssQ0FBQyxxQkFBcUI7b0JBQUVWO2dCQUFFO1lBQ2xEO1FBQ0o7SUFDSjtJQUVBZ0IsVUFBVTtRQUNOLGtCQUFrQjtRQUNsQixrQkFBa0I7UUFDbEIscUJBQXFCO1FBQ3JCLHFCQUFxQjtJQUN6QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzdGVoZXJvLy4vbm9kZV9tb2R1bGVzL2pvaS9saWIvdHlwZXMvZnVuY3Rpb24uanM/MmJhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzc2VydCA9IHJlcXVpcmUoJ0BoYXBpL2hvZWsvbGliL2Fzc2VydCcpO1xuXG5jb25zdCBLZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cblxuY29uc3QgaW50ZXJuYWxzID0ge307XG5cblxubW9kdWxlLmV4cG9ydHMgPSBLZXlzLmV4dGVuZCh7XG5cbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICB0eXBlb2Y6ICdmdW5jdGlvbidcbiAgICB9LFxuXG4gICAgcnVsZXM6IHtcbiAgICAgICAgYXJpdHk6IHtcbiAgICAgICAgICAgIG1ldGhvZChuKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoTnVtYmVyLmlzU2FmZUludGVnZXIobikgJiYgbiA+PSAwLCAnbiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2FyaXR5JywgYXJnczogeyBuIH0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgbiB9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSBuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignZnVuY3Rpb24uYXJpdHknLCB7IG4gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAgIG1ldGhvZCgpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSgnY2xhc3MnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycykge1xuXG4gICAgICAgICAgICAgICAgaWYgKCgvXlxccypjbGFzc1xccy8pLnRlc3QodmFsdWUudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdmdW5jdGlvbi5jbGFzcycsIHsgdmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWluQXJpdHk6IHtcbiAgICAgICAgICAgIG1ldGhvZChuKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoTnVtYmVyLmlzU2FmZUludGVnZXIobikgJiYgbiA+IDAsICduIG11c3QgYmUgYSBzdHJpY3QgcG9zaXRpdmUgaW50ZWdlcicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ21pbkFyaXR5JywgYXJnczogeyBuIH0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgbiB9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID49IG4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdmdW5jdGlvbi5taW5Bcml0eScsIHsgbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtYXhBcml0eToge1xuICAgICAgICAgICAgbWV0aG9kKG4pIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydChOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSAmJiBuID49IDAsICduIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX2FkZFJ1bGUoeyBuYW1lOiAnbWF4QXJpdHknLCBhcmdzOiB7IG4gfSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycywgeyBuIH0pIHtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPD0gbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ2Z1bmN0aW9uLm1heEFyaXR5JywgeyBuIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICdmdW5jdGlvbi5hcml0eSc6ICd7eyNsYWJlbH19IG11c3QgaGF2ZSBhbiBhcml0eSBvZiB7eyNufX0nLFxuICAgICAgICAnZnVuY3Rpb24uY2xhc3MnOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgY2xhc3MnLFxuICAgICAgICAnZnVuY3Rpb24ubWF4QXJpdHknOiAne3sjbGFiZWx9fSBtdXN0IGhhdmUgYW4gYXJpdHkgbGVzc2VyIG9yIGVxdWFsIHRvIHt7I259fScsXG4gICAgICAgICdmdW5jdGlvbi5taW5Bcml0eSc6ICd7eyNsYWJlbH19IG11c3QgaGF2ZSBhbiBhcml0eSBncmVhdGVyIG9yIGVxdWFsIHRvIHt7I259fSdcbiAgICB9XG59KTtcbiJdLCJuYW1lcyI6WyJBc3NlcnQiLCJyZXF1aXJlIiwiS2V5cyIsImludGVybmFscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJleHRlbmQiLCJ0eXBlIiwicHJvcGVydGllcyIsInR5cGVvZiIsInJ1bGVzIiwiYXJpdHkiLCJtZXRob2QiLCJuIiwiTnVtYmVyIiwiaXNTYWZlSW50ZWdlciIsIiRfYWRkUnVsZSIsIm5hbWUiLCJhcmdzIiwidmFsaWRhdGUiLCJ2YWx1ZSIsImhlbHBlcnMiLCJsZW5ndGgiLCJlcnJvciIsImNsYXNzIiwidGVzdCIsInRvU3RyaW5nIiwibWluQXJpdHkiLCJtYXhBcml0eSIsIm1lc3NhZ2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/keys.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/keys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ApplyToDefaults = __webpack_require__(/*! @hapi/hoek/lib/applyToDefaults */ \"(rsc)/./node_modules/@hapi/hoek/lib/applyToDefaults.js\");\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Topo = __webpack_require__(/*! @hapi/topo */ \"(rsc)/./node_modules/@hapi/topo/lib/index.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ../compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst Ref = __webpack_require__(/*! ../ref */ \"(rsc)/./node_modules/joi/lib/ref.js\");\nconst Template = __webpack_require__(/*! ../template */ \"(rsc)/./node_modules/joi/lib/template.js\");\nconst internals = {\n    renameDefaults: {\n        alias: false,\n        multiple: false,\n        override: false // Overrides an existing key\n    }\n};\nmodule.exports = Any.extend({\n    type: \"_keys\",\n    properties: {\n        typeof: \"object\"\n    },\n    flags: {\n        unknown: {\n            default: undefined\n        }\n    },\n    terms: {\n        dependencies: {\n            init: null\n        },\n        keys: {\n            init: null,\n            manifest: {\n                mapped: {\n                    from: \"schema\",\n                    to: \"key\"\n                }\n            }\n        },\n        patterns: {\n            init: null\n        },\n        renames: {\n            init: null\n        }\n    },\n    args (schema, keys) {\n        return schema.keys(keys);\n    },\n    validate (value, { schema, error, state, prefs }) {\n        if (!value || typeof value !== schema.$_property(\"typeof\") || Array.isArray(value)) {\n            return {\n                value,\n                errors: error(\"object.base\", {\n                    type: schema.$_property(\"typeof\")\n                })\n            };\n        }\n        // Skip if there are no other rules to test\n        if (!schema.$_terms.renames && !schema.$_terms.dependencies && !schema.$_terms.keys && // null allows any keys\n        !schema.$_terms.patterns && !schema.$_terms.externals) {\n            return;\n        }\n        // Shallow clone value\n        value = internals.clone(value, prefs);\n        const errors = [];\n        // Rename keys\n        if (schema.$_terms.renames && !internals.rename(schema, value, state, prefs, errors)) {\n            return {\n                value,\n                errors\n            };\n        }\n        // Anything allowed\n        if (!schema.$_terms.keys && // null allows any keys\n        !schema.$_terms.patterns && !schema.$_terms.dependencies) {\n            return {\n                value,\n                errors\n            };\n        }\n        // Defined keys\n        const unprocessed = new Set(Object.keys(value));\n        if (schema.$_terms.keys) {\n            const ancestors = [\n                value,\n                ...state.ancestors\n            ];\n            for (const child of schema.$_terms.keys){\n                const key = child.key;\n                const item = value[key];\n                unprocessed.delete(key);\n                const localState = state.localize([\n                    ...state.path,\n                    key\n                ], ancestors, child);\n                const result = child.schema.$_validate(item, localState, prefs);\n                if (result.errors) {\n                    if (prefs.abortEarly) {\n                        return {\n                            value,\n                            errors: result.errors\n                        };\n                    }\n                    if (result.value !== undefined) {\n                        value[key] = result.value;\n                    }\n                    errors.push(...result.errors);\n                } else if (child.schema._flags.result === \"strip\" || result.value === undefined && item !== undefined) {\n                    delete value[key];\n                } else if (result.value !== undefined) {\n                    value[key] = result.value;\n                }\n            }\n        }\n        // Unknown keys\n        if (unprocessed.size || schema._flags._hasPatternMatch) {\n            const early = internals.unknown(schema, value, unprocessed, errors, state, prefs);\n            if (early) {\n                return early;\n            }\n        }\n        // Validate dependencies\n        if (schema.$_terms.dependencies) {\n            for (const dep of schema.$_terms.dependencies){\n                if (dep.key !== null && internals.isPresent(dep.options)(dep.key.resolve(value, state, prefs, null, {\n                    shadow: false\n                })) === false) {\n                    continue;\n                }\n                const failed = internals.dependencies[dep.rel](schema, dep, value, state, prefs);\n                if (failed) {\n                    const report = schema.$_createError(failed.code, value, failed.context, state, prefs);\n                    if (prefs.abortEarly) {\n                        return {\n                            value,\n                            errors: report\n                        };\n                    }\n                    errors.push(report);\n                }\n            }\n        }\n        return {\n            value,\n            errors\n        };\n    },\n    rules: {\n        and: {\n            method (...peers /*, [options] */ ) {\n                Common.verifyFlat(peers, \"and\");\n                return internals.dependency(this, \"and\", null, peers);\n            }\n        },\n        append: {\n            method (schema) {\n                if (schema === null || schema === undefined || Object.keys(schema).length === 0) {\n                    return this;\n                }\n                return this.keys(schema);\n            }\n        },\n        assert: {\n            method (subject, schema, message) {\n                if (!Template.isTemplate(subject)) {\n                    subject = Compile.ref(subject);\n                }\n                Assert(message === undefined || typeof message === \"string\", \"Message must be a string\");\n                schema = this.$_compile(schema, {\n                    appendPath: true\n                });\n                const obj = this.$_addRule({\n                    name: \"assert\",\n                    args: {\n                        subject,\n                        schema,\n                        message\n                    }\n                });\n                obj.$_mutateRegister(subject);\n                obj.$_mutateRegister(schema);\n                return obj;\n            },\n            validate (value, { error, prefs, state }, { subject, schema, message }) {\n                const about = subject.resolve(value, state, prefs);\n                const path = Ref.isRef(subject) ? subject.absolute(state) : [];\n                if (schema.$_match(about, state.localize(path, [\n                    value,\n                    ...state.ancestors\n                ], schema), prefs)) {\n                    return value;\n                }\n                return error(\"object.assert\", {\n                    subject,\n                    message\n                });\n            },\n            args: [\n                \"subject\",\n                \"schema\",\n                \"message\"\n            ],\n            multi: true\n        },\n        instance: {\n            method (constructor, name) {\n                Assert(typeof constructor === \"function\", \"constructor must be a function\");\n                name = name || constructor.name;\n                return this.$_addRule({\n                    name: \"instance\",\n                    args: {\n                        constructor,\n                        name\n                    }\n                });\n            },\n            validate (value, helpers, { constructor, name }) {\n                if (value instanceof constructor) {\n                    return value;\n                }\n                return helpers.error(\"object.instance\", {\n                    type: name,\n                    value\n                });\n            },\n            args: [\n                \"constructor\",\n                \"name\"\n            ]\n        },\n        keys: {\n            method (schema) {\n                Assert(schema === undefined || typeof schema === \"object\", \"Object schema must be a valid object\");\n                Assert(!Common.isSchema(schema), \"Object schema cannot be a joi schema\");\n                const obj = this.clone();\n                if (!schema) {\n                    obj.$_terms.keys = null;\n                } else if (!Object.keys(schema).length) {\n                    obj.$_terms.keys = new internals.Keys();\n                } else {\n                    obj.$_terms.keys = obj.$_terms.keys ? obj.$_terms.keys.filter((child)=>!schema.hasOwnProperty(child.key)) : new internals.Keys();\n                    for(const key in schema){\n                        Common.tryWithPath(()=>obj.$_terms.keys.push({\n                                key,\n                                schema: this.$_compile(schema[key])\n                            }), key);\n                    }\n                }\n                return obj.$_mutateRebuild();\n            }\n        },\n        length: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"=\"\n                });\n            },\n            validate (value, helpers, { limit }, { name, operator, args }) {\n                if (Common.compare(Object.keys(value).length, limit, operator)) {\n                    return value;\n                }\n                return helpers.error(\"object.\" + name, {\n                    limit: args.limit,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"limit\",\n                    ref: true,\n                    assert: Common.limit,\n                    message: \"must be a positive integer\"\n                }\n            ]\n        },\n        max: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"max\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \"<=\"\n                });\n            }\n        },\n        min: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"min\",\n                    method: \"length\",\n                    args: {\n                        limit\n                    },\n                    operator: \">=\"\n                });\n            }\n        },\n        nand: {\n            method (...peers /*, [options] */ ) {\n                Common.verifyFlat(peers, \"nand\");\n                return internals.dependency(this, \"nand\", null, peers);\n            }\n        },\n        or: {\n            method (...peers /*, [options] */ ) {\n                Common.verifyFlat(peers, \"or\");\n                return internals.dependency(this, \"or\", null, peers);\n            }\n        },\n        oxor: {\n            method (...peers /*, [options] */ ) {\n                return internals.dependency(this, \"oxor\", null, peers);\n            }\n        },\n        pattern: {\n            method (pattern, schema, options = {}) {\n                const isRegExp = pattern instanceof RegExp;\n                if (!isRegExp) {\n                    pattern = this.$_compile(pattern, {\n                        appendPath: true\n                    });\n                }\n                Assert(schema !== undefined, \"Invalid rule\");\n                Common.assertOptions(options, [\n                    \"fallthrough\",\n                    \"matches\"\n                ]);\n                if (isRegExp) {\n                    Assert(!pattern.flags.includes(\"g\") && !pattern.flags.includes(\"y\"), \"pattern should not use global or sticky mode\");\n                }\n                schema = this.$_compile(schema, {\n                    appendPath: true\n                });\n                const obj = this.clone();\n                obj.$_terms.patterns = obj.$_terms.patterns || [];\n                const config = {\n                    [isRegExp ? \"regex\" : \"schema\"]: pattern,\n                    rule: schema\n                };\n                if (options.matches) {\n                    config.matches = this.$_compile(options.matches);\n                    if (config.matches.type !== \"array\") {\n                        config.matches = config.matches.$_root.array().items(config.matches);\n                    }\n                    obj.$_mutateRegister(config.matches);\n                    obj.$_setFlag(\"_hasPatternMatch\", true, {\n                        clone: false\n                    });\n                }\n                if (options.fallthrough) {\n                    config.fallthrough = true;\n                }\n                obj.$_terms.patterns.push(config);\n                obj.$_mutateRegister(schema);\n                return obj;\n            }\n        },\n        ref: {\n            method () {\n                return this.$_addRule(\"ref\");\n            },\n            validate (value, helpers) {\n                if (Ref.isRef(value)) {\n                    return value;\n                }\n                return helpers.error(\"object.refType\", {\n                    value\n                });\n            }\n        },\n        regex: {\n            method () {\n                return this.$_addRule(\"regex\");\n            },\n            validate (value, helpers) {\n                if (value instanceof RegExp) {\n                    return value;\n                }\n                return helpers.error(\"object.regex\", {\n                    value\n                });\n            }\n        },\n        rename: {\n            method (from, to, options = {}) {\n                Assert(typeof from === \"string\" || from instanceof RegExp, \"Rename missing the from argument\");\n                Assert(typeof to === \"string\" || to instanceof Template, \"Invalid rename to argument\");\n                Assert(to !== from, \"Cannot rename key to same name:\", from);\n                Common.assertOptions(options, [\n                    \"alias\",\n                    \"ignoreUndefined\",\n                    \"override\",\n                    \"multiple\"\n                ]);\n                const obj = this.clone();\n                obj.$_terms.renames = obj.$_terms.renames || [];\n                for (const rename of obj.$_terms.renames){\n                    Assert(rename.from !== from, \"Cannot rename the same key multiple times\");\n                }\n                if (to instanceof Template) {\n                    obj.$_mutateRegister(to);\n                }\n                obj.$_terms.renames.push({\n                    from,\n                    to,\n                    options: ApplyToDefaults(internals.renameDefaults, options)\n                });\n                return obj;\n            }\n        },\n        schema: {\n            method (type = \"any\") {\n                return this.$_addRule({\n                    name: \"schema\",\n                    args: {\n                        type\n                    }\n                });\n            },\n            validate (value, helpers, { type }) {\n                if (Common.isSchema(value) && (type === \"any\" || value.type === type)) {\n                    return value;\n                }\n                return helpers.error(\"object.schema\", {\n                    type\n                });\n            }\n        },\n        unknown: {\n            method (allow) {\n                return this.$_setFlag(\"unknown\", allow !== false);\n            }\n        },\n        with: {\n            method (key, peers, options = {}) {\n                return internals.dependency(this, \"with\", key, peers, options);\n            }\n        },\n        without: {\n            method (key, peers, options = {}) {\n                return internals.dependency(this, \"without\", key, peers, options);\n            }\n        },\n        xor: {\n            method (...peers /*, [options] */ ) {\n                Common.verifyFlat(peers, \"xor\");\n                return internals.dependency(this, \"xor\", null, peers);\n            }\n        }\n    },\n    overrides: {\n        default (value, options) {\n            if (value === undefined) {\n                value = Common.symbols.deepDefault;\n            }\n            return this.$_parent(\"default\", value, options);\n        }\n    },\n    rebuild (schema) {\n        if (schema.$_terms.keys) {\n            const topo = new Topo.Sorter();\n            for (const child of schema.$_terms.keys){\n                Common.tryWithPath(()=>topo.add(child, {\n                        after: child.schema.$_rootReferences(),\n                        group: child.key\n                    }), child.key);\n            }\n            schema.$_terms.keys = new internals.Keys(...topo.nodes);\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.keys) {\n                obj = obj.keys(desc.keys);\n            }\n            if (desc.dependencies) {\n                for (const { rel, key = null, peers, options } of desc.dependencies){\n                    obj = internals.dependency(obj, rel, key, peers, options);\n                }\n            }\n            if (desc.patterns) {\n                for (const { regex, schema, rule, fallthrough, matches } of desc.patterns){\n                    obj = obj.pattern(regex || schema, rule, {\n                        fallthrough,\n                        matches\n                    });\n                }\n            }\n            if (desc.renames) {\n                for (const { from, to, options } of desc.renames){\n                    obj = obj.rename(from, to, options);\n                }\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"object.and\": \"{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}\",\n        \"object.assert\": '{{#label}} is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}',\n        \"object.base\": \"{{#label}} must be of type {{#type}}\",\n        \"object.instance\": \"{{#label}} must be an instance of {{:#type}}\",\n        \"object.length\": '{{#label}} must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        \"object.max\": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        \"object.min\": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        \"object.missing\": \"{{#label}} must contain at least one of {{#peersWithLabels}}\",\n        \"object.nand\": \"{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}\",\n        \"object.oxor\": \"{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}\",\n        \"object.pattern.match\": \"{{#label}} keys failed to match pattern requirements\",\n        \"object.refType\": \"{{#label}} must be a Joi reference\",\n        \"object.regex\": \"{{#label}} must be a RegExp object\",\n        \"object.rename.multiple\": \"{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}\",\n        \"object.rename.override\": \"{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists\",\n        \"object.schema\": \"{{#label}} must be a Joi schema of {{#type}} type\",\n        \"object.unknown\": \"{{#label}} is not allowed\",\n        \"object.with\": \"{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}\",\n        \"object.without\": \"{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}\",\n        \"object.xor\": \"{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}\"\n    }\n});\n// Helpers\ninternals.clone = function(value, prefs) {\n    // Object\n    if (typeof value === \"object\") {\n        if (prefs.nonEnumerables) {\n            return Clone(value, {\n                shallow: true\n            });\n        }\n        const clone = Object.create(Object.getPrototypeOf(value));\n        Object.assign(clone, value);\n        return clone;\n    }\n    // Function\n    const clone = function(...args) {\n        return value.apply(this, args);\n    };\n    clone.prototype = Clone(value.prototype);\n    Object.defineProperty(clone, \"name\", {\n        value: value.name,\n        writable: false\n    });\n    Object.defineProperty(clone, \"length\", {\n        value: value.length,\n        writable: false\n    });\n    Object.assign(clone, value);\n    return clone;\n};\ninternals.dependency = function(schema, rel, key, peers, options) {\n    Assert(key === null || typeof key === \"string\", rel, \"key must be a strings\");\n    // Extract options from peers array\n    if (!options) {\n        options = peers.length > 1 && typeof peers[peers.length - 1] === \"object\" ? peers.pop() : {};\n    }\n    Common.assertOptions(options, [\n        \"separator\",\n        \"isPresent\"\n    ]);\n    peers = [].concat(peers);\n    // Cast peer paths\n    const separator = Common.default(options.separator, \".\");\n    const paths = [];\n    for (const peer of peers){\n        Assert(typeof peer === \"string\", rel, \"peers must be strings\");\n        paths.push(Compile.ref(peer, {\n            separator,\n            ancestor: 0,\n            prefix: false\n        }));\n    }\n    // Cast key\n    if (key !== null) {\n        key = Compile.ref(key, {\n            separator,\n            ancestor: 0,\n            prefix: false\n        });\n    }\n    // Add rule\n    const obj = schema.clone();\n    obj.$_terms.dependencies = obj.$_terms.dependencies || [];\n    obj.$_terms.dependencies.push(new internals.Dependency(rel, key, paths, peers, options));\n    return obj;\n};\ninternals.dependencies = {\n    and (schema, dep, value, state, prefs) {\n        const missing = [];\n        const present = [];\n        const count = dep.peers.length;\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            })) === false) {\n                missing.push(peer.key);\n            } else {\n                present.push(peer.key);\n            }\n        }\n        if (missing.length !== count && present.length !== count) {\n            return {\n                code: \"object.and\",\n                context: {\n                    present,\n                    presentWithLabels: internals.keysToLabels(schema, present),\n                    missing,\n                    missingWithLabels: internals.keysToLabels(schema, missing)\n                }\n            };\n        }\n    },\n    nand (schema, dep, value, state, prefs) {\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            }))) {\n                present.push(peer.key);\n            }\n        }\n        if (present.length !== dep.peers.length) {\n            return;\n        }\n        const main = dep.paths[0];\n        const values = dep.paths.slice(1);\n        return {\n            code: \"object.nand\",\n            context: {\n                main,\n                mainWithLabel: internals.keysToLabels(schema, main),\n                peers: values,\n                peersWithLabels: internals.keysToLabels(schema, values)\n            }\n        };\n    },\n    or (schema, dep, value, state, prefs) {\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            }))) {\n                return;\n            }\n        }\n        return {\n            code: \"object.missing\",\n            context: {\n                peers: dep.paths,\n                peersWithLabels: internals.keysToLabels(schema, dep.paths)\n            }\n        };\n    },\n    oxor (schema, dep, value, state, prefs) {\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            }))) {\n                present.push(peer.key);\n            }\n        }\n        if (!present.length || present.length === 1) {\n            return;\n        }\n        const context = {\n            peers: dep.paths,\n            peersWithLabels: internals.keysToLabels(schema, dep.paths)\n        };\n        context.present = present;\n        context.presentWithLabels = internals.keysToLabels(schema, present);\n        return {\n            code: \"object.oxor\",\n            context\n        };\n    },\n    with (schema, dep, value, state, prefs) {\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            })) === false) {\n                return {\n                    code: \"object.with\",\n                    context: {\n                        main: dep.key.key,\n                        mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n                        peer: peer.key,\n                        peerWithLabel: internals.keysToLabels(schema, peer.key)\n                    }\n                };\n            }\n        }\n    },\n    without (schema, dep, value, state, prefs) {\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            }))) {\n                return {\n                    code: \"object.without\",\n                    context: {\n                        main: dep.key.key,\n                        mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n                        peer: peer.key,\n                        peerWithLabel: internals.keysToLabels(schema, peer.key)\n                    }\n                };\n            }\n        }\n    },\n    xor (schema, dep, value, state, prefs) {\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers){\n            if (isPresent(peer.resolve(value, state, prefs, null, {\n                shadow: false\n            }))) {\n                present.push(peer.key);\n            }\n        }\n        if (present.length === 1) {\n            return;\n        }\n        const context = {\n            peers: dep.paths,\n            peersWithLabels: internals.keysToLabels(schema, dep.paths)\n        };\n        if (present.length === 0) {\n            return {\n                code: \"object.missing\",\n                context\n            };\n        }\n        context.present = present;\n        context.presentWithLabels = internals.keysToLabels(schema, present);\n        return {\n            code: \"object.xor\",\n            context\n        };\n    }\n};\ninternals.keysToLabels = function(schema, keys) {\n    if (Array.isArray(keys)) {\n        return keys.map((key)=>schema.$_mapLabels(key));\n    }\n    return schema.$_mapLabels(keys);\n};\ninternals.isPresent = function(options) {\n    return typeof options.isPresent === \"function\" ? options.isPresent : (resolved)=>resolved !== undefined;\n};\ninternals.rename = function(schema, value, state, prefs, errors) {\n    const renamed = {};\n    for (const rename of schema.$_terms.renames){\n        const matches = [];\n        const pattern = typeof rename.from !== \"string\";\n        if (!pattern) {\n            if (Object.prototype.hasOwnProperty.call(value, rename.from) && (value[rename.from] !== undefined || !rename.options.ignoreUndefined)) {\n                matches.push(rename);\n            }\n        } else {\n            for(const from in value){\n                if (value[from] === undefined && rename.options.ignoreUndefined) {\n                    continue;\n                }\n                if (from === rename.to) {\n                    continue;\n                }\n                const match = rename.from.exec(from);\n                if (!match) {\n                    continue;\n                }\n                matches.push({\n                    from,\n                    to: rename.to,\n                    match\n                });\n            }\n        }\n        for (const match of matches){\n            const from = match.from;\n            let to = match.to;\n            if (to instanceof Template) {\n                to = to.render(value, state, prefs, match.match);\n            }\n            if (from === to) {\n                continue;\n            }\n            if (!rename.options.multiple && renamed[to]) {\n                errors.push(schema.$_createError(\"object.rename.multiple\", value, {\n                    from,\n                    to,\n                    pattern\n                }, state, prefs));\n                if (prefs.abortEarly) {\n                    return false;\n                }\n            }\n            if (Object.prototype.hasOwnProperty.call(value, to) && !rename.options.override && !renamed[to]) {\n                errors.push(schema.$_createError(\"object.rename.override\", value, {\n                    from,\n                    to,\n                    pattern\n                }, state, prefs));\n                if (prefs.abortEarly) {\n                    return false;\n                }\n            }\n            if (value[from] === undefined) {\n                delete value[to];\n            } else {\n                value[to] = value[from];\n            }\n            renamed[to] = true;\n            if (!rename.options.alias) {\n                delete value[from];\n            }\n        }\n    }\n    return true;\n};\ninternals.unknown = function(schema, value, unprocessed, errors, state, prefs) {\n    if (schema.$_terms.patterns) {\n        let hasMatches = false;\n        const matches = schema.$_terms.patterns.map((pattern)=>{\n            if (pattern.matches) {\n                hasMatches = true;\n                return [];\n            }\n        });\n        const ancestors = [\n            value,\n            ...state.ancestors\n        ];\n        for (const key of unprocessed){\n            const item = value[key];\n            const path = [\n                ...state.path,\n                key\n            ];\n            for(let i = 0; i < schema.$_terms.patterns.length; ++i){\n                const pattern = schema.$_terms.patterns[i];\n                if (pattern.regex) {\n                    const match = pattern.regex.test(key);\n                    state.mainstay.tracer.debug(state, \"rule\", `pattern.${i}`, match ? \"pass\" : \"error\");\n                    if (!match) {\n                        continue;\n                    }\n                } else {\n                    if (!pattern.schema.$_match(key, state.nest(pattern.schema, `pattern.${i}`), prefs)) {\n                        continue;\n                    }\n                }\n                unprocessed.delete(key);\n                const localState = state.localize(path, ancestors, {\n                    schema: pattern.rule,\n                    key\n                });\n                const result = pattern.rule.$_validate(item, localState, prefs);\n                if (result.errors) {\n                    if (prefs.abortEarly) {\n                        return {\n                            value,\n                            errors: result.errors\n                        };\n                    }\n                    errors.push(...result.errors);\n                }\n                if (pattern.matches) {\n                    matches[i].push(key);\n                }\n                value[key] = result.value;\n                if (!pattern.fallthrough) {\n                    break;\n                }\n            }\n        }\n        // Validate pattern matches rules\n        if (hasMatches) {\n            for(let i = 0; i < matches.length; ++i){\n                const match = matches[i];\n                if (!match) {\n                    continue;\n                }\n                const stpm = schema.$_terms.patterns[i].matches;\n                const localState = state.localize(state.path, ancestors, stpm);\n                const result = stpm.$_validate(match, localState, prefs);\n                if (result.errors) {\n                    const details = Errors.details(result.errors, {\n                        override: false\n                    });\n                    details.matches = match;\n                    const report = schema.$_createError(\"object.pattern.match\", value, details, state, prefs);\n                    if (prefs.abortEarly) {\n                        return {\n                            value,\n                            errors: report\n                        };\n                    }\n                    errors.push(report);\n                }\n            }\n        }\n    }\n    if (!unprocessed.size || !schema.$_terms.keys && !schema.$_terms.patterns) {\n        return;\n    }\n    if (prefs.stripUnknown && typeof schema._flags.unknown === \"undefined\" || prefs.skipFunctions) {\n        const stripUnknown = prefs.stripUnknown ? prefs.stripUnknown === true ? true : !!prefs.stripUnknown.objects : false;\n        for (const key of unprocessed){\n            if (stripUnknown) {\n                delete value[key];\n                unprocessed.delete(key);\n            } else if (typeof value[key] === \"function\") {\n                unprocessed.delete(key);\n            }\n        }\n    }\n    const forbidUnknown = !Common.default(schema._flags.unknown, prefs.allowUnknown);\n    if (forbidUnknown) {\n        for (const unprocessedKey of unprocessed){\n            const localState = state.localize([\n                ...state.path,\n                unprocessedKey\n            ], []);\n            const report = schema.$_createError(\"object.unknown\", value[unprocessedKey], {\n                child: unprocessedKey\n            }, localState, prefs, {\n                flags: false\n            });\n            if (prefs.abortEarly) {\n                return {\n                    value,\n                    errors: report\n                };\n            }\n            errors.push(report);\n        }\n    }\n};\ninternals.Dependency = class {\n    constructor(rel, key, peers, paths, options){\n        this.rel = rel;\n        this.key = key;\n        this.peers = peers;\n        this.paths = paths;\n        this.options = options;\n    }\n    describe() {\n        const desc = {\n            rel: this.rel,\n            peers: this.paths\n        };\n        if (this.key !== null) {\n            desc.key = this.key.key;\n        }\n        if (this.peers[0].separator !== \".\") {\n            desc.options = {\n                ...desc.options,\n                separator: this.peers[0].separator\n            };\n        }\n        if (this.options.isPresent) {\n            desc.options = {\n                ...desc.options,\n                isPresent: this.options.isPresent\n            };\n        }\n        return desc;\n    }\n};\ninternals.Keys = class extends Array {\n    concat(source) {\n        const result = this.slice();\n        const keys = new Map();\n        for(let i = 0; i < result.length; ++i){\n            keys.set(result[i].key, i);\n        }\n        for (const item of source){\n            const key = item.key;\n            const pos = keys.get(key);\n            if (pos !== undefined) {\n                result[pos] = {\n                    key,\n                    schema: result[pos].schema.concat(item.schema)\n                };\n            } else {\n                result.push(item);\n            }\n        }\n        return result;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/link.js":
/*!********************************************!*\
  !*** ./node_modules/joi/lib/types/link.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Compile = __webpack_require__(/*! ../compile */ \"(rsc)/./node_modules/joi/lib/compile.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst internals = {};\nmodule.exports = Any.extend({\n    type: \"link\",\n    properties: {\n        schemaChain: true\n    },\n    terms: {\n        link: {\n            init: null,\n            manifest: \"single\",\n            register: false\n        }\n    },\n    args (schema, ref) {\n        return schema.ref(ref);\n    },\n    validate (value, { schema, state, prefs }) {\n        Assert(schema.$_terms.link, \"Uninitialized link schema\");\n        const linked = internals.generate(schema, value, state, prefs);\n        const ref = schema.$_terms.link[0].ref;\n        return linked.$_validate(value, state.nest(linked, `link:${ref.display}:${linked.type}`), prefs);\n    },\n    generate (schema, value, state, prefs) {\n        return internals.generate(schema, value, state, prefs);\n    },\n    rules: {\n        ref: {\n            method (ref) {\n                Assert(!this.$_terms.link, \"Cannot reinitialize schema\");\n                ref = Compile.ref(ref);\n                Assert(ref.type === \"value\" || ref.type === \"local\", \"Invalid reference type:\", ref.type);\n                Assert(ref.type === \"local\" || ref.ancestor === \"root\" || ref.ancestor > 0, \"Link cannot reference itself\");\n                const obj = this.clone();\n                obj.$_terms.link = [\n                    {\n                        ref\n                    }\n                ];\n                return obj;\n            }\n        },\n        relative: {\n            method (enabled = true) {\n                return this.$_setFlag(\"relative\", enabled);\n            }\n        }\n    },\n    overrides: {\n        concat (source) {\n            Assert(this.$_terms.link, \"Uninitialized link schema\");\n            Assert(Common.isSchema(source), \"Invalid schema object\");\n            Assert(source.type !== \"link\", \"Cannot merge type link with another link\");\n            const obj = this.clone();\n            if (!obj.$_terms.whens) {\n                obj.$_terms.whens = [];\n            }\n            obj.$_terms.whens.push({\n                concat: source\n            });\n            return obj.$_mutateRebuild();\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            Assert(desc.link, \"Invalid link description missing link\");\n            return obj.ref(desc.link);\n        }\n    }\n});\n// Helpers\ninternals.generate = function(schema, value, state, prefs) {\n    let linked = state.mainstay.links.get(schema);\n    if (linked) {\n        return linked._generate(value, state, prefs).schema;\n    }\n    const ref = schema.$_terms.link[0].ref;\n    const { perspective, path } = internals.perspective(ref, state);\n    internals.assert(perspective, \"which is outside of schema boundaries\", ref, schema, state, prefs);\n    try {\n        linked = path.length ? perspective.$_reach(path) : perspective;\n    } catch (ignoreErr) {\n        internals.assert(false, \"to non-existing schema\", ref, schema, state, prefs);\n    }\n    internals.assert(linked.type !== \"link\", \"which is another link\", ref, schema, state, prefs);\n    if (!schema._flags.relative) {\n        state.mainstay.links.set(schema, linked);\n    }\n    return linked._generate(value, state, prefs).schema;\n};\ninternals.perspective = function(ref, state) {\n    if (ref.type === \"local\") {\n        for (const { schema, key } of state.schemas){\n            const id = schema._flags.id || key;\n            if (id === ref.path[0]) {\n                return {\n                    perspective: schema,\n                    path: ref.path.slice(1)\n                };\n            }\n            if (schema.$_terms.shared) {\n                for (const shared of schema.$_terms.shared){\n                    if (shared._flags.id === ref.path[0]) {\n                        return {\n                            perspective: shared,\n                            path: ref.path.slice(1)\n                        };\n                    }\n                }\n            }\n        }\n        return {\n            perspective: null,\n            path: null\n        };\n    }\n    if (ref.ancestor === \"root\") {\n        return {\n            perspective: state.schemas[state.schemas.length - 1].schema,\n            path: ref.path\n        };\n    }\n    return {\n        perspective: state.schemas[ref.ancestor] && state.schemas[ref.ancestor].schema,\n        path: ref.path\n    };\n};\ninternals.assert = function(condition, message, ref, schema, state, prefs) {\n    if (condition) {\n        return;\n    }\n    Assert(false, `\"${Errors.label(schema._flags, state, prefs)}\" contains link reference \"${ref.display}\" ${message}`);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/link.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/number.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/number.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {\n    numberRx: /^\\s*[+-]?(?:(?:\\d+(?:\\.\\d*)?)|(?:\\.\\d+))(?:e([+-]?\\d+))?\\s*$/i,\n    precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n    exponentialPartRegex: /[eE][+-]?\\d+$/,\n    leadingSignAndZerosRegex: /^[+-]?(0*)?/,\n    dotRegex: /\\./,\n    trailingZerosRegex: /0+$/,\n    decimalPlaces (value) {\n        const str = value.toString();\n        const dindex = str.indexOf(\".\");\n        const eindex = str.indexOf(\"e\");\n        return (dindex < 0 ? 0 : (eindex < 0 ? str.length : eindex) - dindex - 1) + (eindex < 0 ? 0 : Math.max(0, -parseInt(str.slice(eindex + 1))));\n    }\n};\nmodule.exports = Any.extend({\n    type: \"number\",\n    flags: {\n        unsafe: {\n            default: false\n        }\n    },\n    coerce: {\n        from: \"string\",\n        method (value, { schema, error }) {\n            const matches = value.match(internals.numberRx);\n            if (!matches) {\n                return;\n            }\n            value = value.trim();\n            const result = {\n                value: parseFloat(value)\n            };\n            if (result.value === 0) {\n                result.value = 0; // -0\n            }\n            if (!schema._flags.unsafe) {\n                if (value.match(/e/i)) {\n                    if (internals.extractSignificantDigits(value) !== internals.extractSignificantDigits(String(result.value))) {\n                        result.errors = error(\"number.unsafe\");\n                        return result;\n                    }\n                } else {\n                    const string = result.value.toString();\n                    if (string.match(/e/i)) {\n                        return result;\n                    }\n                    if (string !== internals.normalizeDecimal(value)) {\n                        result.errors = error(\"number.unsafe\");\n                        return result;\n                    }\n                }\n            }\n            return result;\n        }\n    },\n    validate (value, { schema, error, prefs }) {\n        if (value === Infinity || value === -Infinity) {\n            return {\n                value,\n                errors: error(\"number.infinity\")\n            };\n        }\n        if (!Common.isNumber(value)) {\n            return {\n                value,\n                errors: error(\"number.base\")\n            };\n        }\n        const result = {\n            value\n        };\n        if (prefs.convert) {\n            const rule = schema.$_getRule(\"precision\");\n            if (rule) {\n                const precision = Math.pow(10, rule.args.limit); // This is conceptually equivalent to using toFixed but it should be much faster\n                result.value = Math.round(result.value * precision) / precision;\n            }\n        }\n        if (result.value === 0) {\n            result.value = 0; // -0\n        }\n        if (!schema._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n            result.errors = error(\"number.unsafe\");\n        }\n        return result;\n    },\n    rules: {\n        compare: {\n            method: false,\n            validate (value, helpers, { limit }, { name, operator, args }) {\n                if (Common.compare(value, limit, operator)) {\n                    return value;\n                }\n                return helpers.error(\"number.\" + name, {\n                    limit: args.limit,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"limit\",\n                    ref: true,\n                    assert: Common.isNumber,\n                    message: \"must be a number\"\n                }\n            ]\n        },\n        greater: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"greater\",\n                    method: \"compare\",\n                    args: {\n                        limit\n                    },\n                    operator: \">\"\n                });\n            }\n        },\n        integer: {\n            method () {\n                return this.$_addRule(\"integer\");\n            },\n            validate (value, helpers) {\n                if (Math.trunc(value) - value === 0) {\n                    return value;\n                }\n                return helpers.error(\"number.integer\");\n            }\n        },\n        less: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"less\",\n                    method: \"compare\",\n                    args: {\n                        limit\n                    },\n                    operator: \"<\"\n                });\n            }\n        },\n        max: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"max\",\n                    method: \"compare\",\n                    args: {\n                        limit\n                    },\n                    operator: \"<=\"\n                });\n            }\n        },\n        min: {\n            method (limit) {\n                return this.$_addRule({\n                    name: \"min\",\n                    method: \"compare\",\n                    args: {\n                        limit\n                    },\n                    operator: \">=\"\n                });\n            }\n        },\n        multiple: {\n            method (base) {\n                const baseDecimalPlace = typeof base === \"number\" ? internals.decimalPlaces(base) : null;\n                const pfactor = Math.pow(10, baseDecimalPlace);\n                return this.$_addRule({\n                    name: \"multiple\",\n                    args: {\n                        base,\n                        baseDecimalPlace,\n                        pfactor\n                    }\n                });\n            },\n            validate (value, helpers, { base, baseDecimalPlace, pfactor }, options) {\n                const valueDecimalPlace = internals.decimalPlaces(value);\n                if (valueDecimalPlace > baseDecimalPlace) {\n                    // Value with higher precision than base can never be a multiple\n                    return helpers.error(\"number.multiple\", {\n                        multiple: options.args.base,\n                        value\n                    });\n                }\n                return Math.round(pfactor * value) % Math.round(pfactor * base) === 0 ? value : helpers.error(\"number.multiple\", {\n                    multiple: options.args.base,\n                    value\n                });\n            },\n            args: [\n                {\n                    name: \"base\",\n                    ref: true,\n                    assert: (value)=>typeof value === \"number\" && isFinite(value) && value > 0,\n                    message: \"must be a positive number\"\n                },\n                \"baseDecimalPlace\",\n                \"pfactor\"\n            ],\n            multi: true\n        },\n        negative: {\n            method () {\n                return this.sign(\"negative\");\n            }\n        },\n        port: {\n            method () {\n                return this.$_addRule(\"port\");\n            },\n            validate (value, helpers) {\n                if (Number.isSafeInteger(value) && value >= 0 && value <= 65535) {\n                    return value;\n                }\n                return helpers.error(\"number.port\");\n            }\n        },\n        positive: {\n            method () {\n                return this.sign(\"positive\");\n            }\n        },\n        precision: {\n            method (limit) {\n                Assert(Number.isSafeInteger(limit), \"limit must be an integer\");\n                return this.$_addRule({\n                    name: \"precision\",\n                    args: {\n                        limit\n                    }\n                });\n            },\n            validate (value, helpers, { limit }) {\n                const places = value.toString().match(internals.precisionRx);\n                const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n                if (decimals <= limit) {\n                    return value;\n                }\n                return helpers.error(\"number.precision\", {\n                    limit,\n                    value\n                });\n            },\n            convert: true\n        },\n        sign: {\n            method (sign) {\n                Assert([\n                    \"negative\",\n                    \"positive\"\n                ].includes(sign), \"Invalid sign\", sign);\n                return this.$_addRule({\n                    name: \"sign\",\n                    args: {\n                        sign\n                    }\n                });\n            },\n            validate (value, helpers, { sign }) {\n                if (sign === \"negative\" && value < 0 || sign === \"positive\" && value > 0) {\n                    return value;\n                }\n                return helpers.error(`number.${sign}`);\n            }\n        },\n        unsafe: {\n            method (enabled = true) {\n                Assert(typeof enabled === \"boolean\", \"enabled must be a boolean\");\n                return this.$_setFlag(\"unsafe\", enabled);\n            }\n        }\n    },\n    cast: {\n        string: {\n            from: (value)=>typeof value === \"number\",\n            to (value, helpers) {\n                return value.toString();\n            }\n        }\n    },\n    messages: {\n        \"number.base\": \"{{#label}} must be a number\",\n        \"number.greater\": \"{{#label}} must be greater than {{#limit}}\",\n        \"number.infinity\": \"{{#label}} cannot be infinity\",\n        \"number.integer\": \"{{#label}} must be an integer\",\n        \"number.less\": \"{{#label}} must be less than {{#limit}}\",\n        \"number.max\": \"{{#label}} must be less than or equal to {{#limit}}\",\n        \"number.min\": \"{{#label}} must be greater than or equal to {{#limit}}\",\n        \"number.multiple\": \"{{#label}} must be a multiple of {{#multiple}}\",\n        \"number.negative\": \"{{#label}} must be a negative number\",\n        \"number.port\": \"{{#label}} must be a valid port\",\n        \"number.positive\": \"{{#label}} must be a positive number\",\n        \"number.precision\": \"{{#label}} must have no more than {{#limit}} decimal places\",\n        \"number.unsafe\": \"{{#label}} must be a safe number\"\n    }\n});\n// Helpers\ninternals.extractSignificantDigits = function(value) {\n    return value.replace(internals.exponentialPartRegex, \"\").replace(internals.dotRegex, \"\").replace(internals.trailingZerosRegex, \"\").replace(internals.leadingSignAndZerosRegex, \"\");\n};\ninternals.normalizeDecimal = function(str) {\n    str = str// Remove leading plus signs\n    .replace(/^\\+/, \"\")// Remove trailing zeros if there is a decimal point and unecessary decimal points\n    .replace(/\\.0*$/, \"\")// Add a integer 0 if the numbers starts with a decimal point\n    .replace(/^(-?)\\.([^\\.]*)$/, \"$10.$2\")// Remove leading zeros\n    .replace(/^(-?)0+([0-9])/, \"$1$2\");\n    if (str.includes(\".\") && str.endsWith(\"0\")) {\n        str = str.replace(/0+$/, \"\");\n    }\n    if (str === \"-0\") {\n        return \"0\";\n    }\n    return str;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/object.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/object.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Keys = __webpack_require__(/*! ./keys */ \"(rsc)/./node_modules/joi/lib/types/keys.js\");\nconst internals = {};\nmodule.exports = Keys.extend({\n    type: \"object\",\n    cast: {\n        map: {\n            from: (value)=>value && typeof value === \"object\",\n            to (value, helpers) {\n                return new Map(Object.entries(value));\n            }\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9vYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUdyQixNQUFNQyxZQUFZLENBQUM7QUFHbkJDLE9BQU9DLE9BQU8sR0FBR0osS0FBS0ssTUFBTSxDQUFDO0lBRXpCQyxNQUFNO0lBRU5DLE1BQU07UUFDRkMsS0FBSztZQUNEQyxNQUFNLENBQUNDLFFBQVVBLFNBQVMsT0FBT0EsVUFBVTtZQUMzQ0MsSUFBR0QsS0FBSyxFQUFFRSxPQUFPO2dCQUViLE9BQU8sSUFBSUMsSUFBSUMsT0FBT0MsT0FBTyxDQUFDTDtZQUNsQztRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc3RlaGVyby8uL25vZGVfbW9kdWxlcy9qb2kvbGliL3R5cGVzL29iamVjdC5qcz9hZGQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgS2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG5cbmNvbnN0IGludGVybmFscyA9IHt9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gS2V5cy5leHRlbmQoe1xuXG4gICAgdHlwZTogJ29iamVjdCcsXG5cbiAgICBjYXN0OiB7XG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICAgZnJvbTogKHZhbHVlKSA9PiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnLFxuICAgICAgICAgICAgdG8odmFsdWUsIGhlbHBlcnMpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiJdLCJuYW1lcyI6WyJLZXlzIiwicmVxdWlyZSIsImludGVybmFscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJleHRlbmQiLCJ0eXBlIiwiY2FzdCIsIm1hcCIsImZyb20iLCJ2YWx1ZSIsInRvIiwiaGVscGVycyIsIk1hcCIsIk9iamVjdCIsImVudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/string.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/string.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Domain = __webpack_require__(/*! @sideway/address/lib/domain */ \"(rsc)/./node_modules/@sideway/address/lib/domain.js\");\nconst Email = __webpack_require__(/*! @sideway/address/lib/email */ \"(rsc)/./node_modules/@sideway/address/lib/email.js\");\nconst Ip = __webpack_require__(/*! @sideway/address/lib/ip */ \"(rsc)/./node_modules/@sideway/address/lib/ip.js\");\nconst EscapeRegex = __webpack_require__(/*! @hapi/hoek/lib/escapeRegex */ \"(rsc)/./node_modules/@hapi/hoek/lib/escapeRegex.js\");\nconst Tlds = __webpack_require__(/*! @sideway/address/lib/tlds */ \"(rsc)/./node_modules/@sideway/address/lib/tlds.js\");\nconst Uri = __webpack_require__(/*! @sideway/address/lib/uri */ \"(rsc)/./node_modules/@sideway/address/lib/uri.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst Common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {\n    tlds: Tlds instanceof Set ? {\n        tlds: {\n            allow: Tlds,\n            deny: null\n        }\n    } : false,\n    base64Regex: {\n        // paddingRequired\n        true: {\n            // urlSafe\n            true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}==|[\\w\\-]{3}=)?$/,\n            false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/\n        },\n        false: {\n            true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}(==)?|[\\w\\-]{3}=?)?$/,\n            false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?$/\n        }\n    },\n    dataUriRegex: /^data:[\\w+.-]+\\/[\\w+.-]+;((charset=[\\w-]+|base64),)?(.*)$/,\n    hexRegex: {\n        withPrefix: /^0x[0-9a-f]+$/i,\n        withOptionalPrefix: /^(?:0x)?[0-9a-f]+$/i,\n        withoutPrefix: /^[0-9a-f]+$/i\n    },\n    ipRegex: Ip.regex({\n        cidr: \"forbidden\"\n    }).regex,\n    isoDurationRegex: /^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/,\n    guidBrackets: {\n        \"{\": \"}\",\n        \"[\": \"]\",\n        \"(\": \")\",\n        \"\": \"\"\n    },\n    guidVersions: {\n        uuidv1: \"1\",\n        uuidv2: \"2\",\n        uuidv3: \"3\",\n        uuidv4: \"4\",\n        uuidv5: \"5\",\n        uuidv6: \"6\",\n        uuidv7: \"7\",\n        uuidv8: \"8\"\n    },\n    guidSeparators: new Set([\n        undefined,\n        true,\n        false,\n        \"-\",\n        \":\"\n    ]),\n    normalizationForms: [\n        \"NFC\",\n        \"NFD\",\n        \"NFKC\",\n        \"NFKD\"\n    ]\n};\nmodule.exports = Any.extend({\n    type: \"string\",\n    flags: {\n        insensitive: {\n            default: false\n        },\n        truncate: {\n            default: false\n        }\n    },\n    terms: {\n        replacements: {\n            init: null\n        }\n    },\n    coerce: {\n        from: \"string\",\n        method (value, { schema, state, prefs }) {\n            const normalize = schema.$_getRule(\"normalize\");\n            if (normalize) {\n                value = value.normalize(normalize.args.form);\n            }\n            const casing = schema.$_getRule(\"case\");\n            if (casing) {\n                value = casing.args.direction === \"upper\" ? value.toLocaleUpperCase() : value.toLocaleLowerCase();\n            }\n            const trim = schema.$_getRule(\"trim\");\n            if (trim && trim.args.enabled) {\n                value = value.trim();\n            }\n            if (schema.$_terms.replacements) {\n                for (const replacement of schema.$_terms.replacements){\n                    value = value.replace(replacement.pattern, replacement.replacement);\n                }\n            }\n            const hex = schema.$_getRule(\"hex\");\n            if (hex && hex.args.options.byteAligned && value.length % 2 !== 0) {\n                value = `0${value}`;\n            }\n            if (schema.$_getRule(\"isoDate\")) {\n                const iso = internals.isoDate(value);\n                if (iso) {\n                    value = iso;\n                }\n            }\n            if (schema._flags.truncate) {\n                const rule = schema.$_getRule(\"max\");\n                if (rule) {\n                    let limit = rule.args.limit;\n                    if (Common.isResolvable(limit)) {\n                        limit = limit.resolve(value, state, prefs);\n                        if (!Common.limit(limit)) {\n                            return {\n                                value,\n                                errors: schema.$_createError(\"any.ref\", limit, {\n                                    ref: rule.args.limit,\n                                    arg: \"limit\",\n                                    reason: \"must be a positive integer\"\n                                }, state, prefs)\n                            };\n                        }\n                    }\n                    value = value.slice(0, limit);\n                }\n            }\n            return {\n                value\n            };\n        }\n    },\n    validate (value, { schema, error }) {\n        if (typeof value !== \"string\") {\n            return {\n                value,\n                errors: error(\"string.base\")\n            };\n        }\n        if (value === \"\") {\n            const min = schema.$_getRule(\"min\");\n            if (min && min.args.limit === 0) {\n                return;\n            }\n            return {\n                value,\n                errors: error(\"string.empty\")\n            };\n        }\n    },\n    rules: {\n        alphanum: {\n            method () {\n                return this.$_addRule(\"alphanum\");\n            },\n            validate (value, helpers) {\n                if (/^[a-zA-Z0-9]+$/.test(value)) {\n                    return value;\n                }\n                return helpers.error(\"string.alphanum\");\n            }\n        },\n        base64: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"paddingRequired\",\n                    \"urlSafe\"\n                ]);\n                options = {\n                    urlSafe: false,\n                    paddingRequired: true,\n                    ...options\n                };\n                Assert(typeof options.paddingRequired === \"boolean\", \"paddingRequired must be boolean\");\n                Assert(typeof options.urlSafe === \"boolean\", \"urlSafe must be boolean\");\n                return this.$_addRule({\n                    name: \"base64\",\n                    args: {\n                        options\n                    }\n                });\n            },\n            validate (value, helpers, { options }) {\n                const regex = internals.base64Regex[options.paddingRequired][options.urlSafe];\n                if (regex.test(value)) {\n                    return value;\n                }\n                return helpers.error(\"string.base64\");\n            }\n        },\n        case: {\n            method (direction) {\n                Assert([\n                    \"lower\",\n                    \"upper\"\n                ].includes(direction), \"Invalid case:\", direction);\n                return this.$_addRule({\n                    name: \"case\",\n                    args: {\n                        direction\n                    }\n                });\n            },\n            validate (value, helpers, { direction }) {\n                if (direction === \"lower\" && value === value.toLocaleLowerCase() || direction === \"upper\" && value === value.toLocaleUpperCase()) {\n                    return value;\n                }\n                return helpers.error(`string.${direction}case`);\n            },\n            convert: true\n        },\n        creditCard: {\n            method () {\n                return this.$_addRule(\"creditCard\");\n            },\n            validate (value, helpers) {\n                let i = value.length;\n                let sum = 0;\n                let mul = 1;\n                while(i--){\n                    const char = value.charAt(i) * mul;\n                    sum = sum + (char - (char > 9) * 9);\n                    mul = mul ^ 3;\n                }\n                if (sum > 0 && sum % 10 === 0) {\n                    return value;\n                }\n                return helpers.error(\"string.creditCard\");\n            }\n        },\n        dataUri: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"paddingRequired\"\n                ]);\n                options = {\n                    paddingRequired: true,\n                    ...options\n                };\n                Assert(typeof options.paddingRequired === \"boolean\", \"paddingRequired must be boolean\");\n                return this.$_addRule({\n                    name: \"dataUri\",\n                    args: {\n                        options\n                    }\n                });\n            },\n            validate (value, helpers, { options }) {\n                const matches = value.match(internals.dataUriRegex);\n                if (matches) {\n                    if (!matches[2]) {\n                        return value;\n                    }\n                    if (matches[2] !== \"base64\") {\n                        return value;\n                    }\n                    const base64regex = internals.base64Regex[options.paddingRequired].false;\n                    if (base64regex.test(matches[3])) {\n                        return value;\n                    }\n                }\n                return helpers.error(\"string.dataUri\");\n            }\n        },\n        domain: {\n            method (options) {\n                if (options) {\n                    Common.assertOptions(options, [\n                        \"allowFullyQualified\",\n                        \"allowUnicode\",\n                        \"maxDomainSegments\",\n                        \"minDomainSegments\",\n                        \"tlds\"\n                    ]);\n                }\n                const address = internals.addressOptions(options);\n                return this.$_addRule({\n                    name: \"domain\",\n                    args: {\n                        options\n                    },\n                    address\n                });\n            },\n            validate (value, helpers, args, { address }) {\n                if (Domain.isValid(value, address)) {\n                    return value;\n                }\n                return helpers.error(\"string.domain\");\n            }\n        },\n        email: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"allowFullyQualified\",\n                    \"allowUnicode\",\n                    \"ignoreLength\",\n                    \"maxDomainSegments\",\n                    \"minDomainSegments\",\n                    \"multiple\",\n                    \"separator\",\n                    \"tlds\"\n                ]);\n                Assert(options.multiple === undefined || typeof options.multiple === \"boolean\", \"multiple option must be an boolean\");\n                const address = internals.addressOptions(options);\n                const regex = new RegExp(`\\\\s*[${options.separator ? EscapeRegex(options.separator) : \",\"}]\\\\s*`);\n                return this.$_addRule({\n                    name: \"email\",\n                    args: {\n                        options\n                    },\n                    regex,\n                    address\n                });\n            },\n            validate (value, helpers, { options }, { regex, address }) {\n                const emails = options.multiple ? value.split(regex) : [\n                    value\n                ];\n                const invalids = [];\n                for (const email of emails){\n                    if (!Email.isValid(email, address)) {\n                        invalids.push(email);\n                    }\n                }\n                if (!invalids.length) {\n                    return value;\n                }\n                return helpers.error(\"string.email\", {\n                    value,\n                    invalids\n                });\n            }\n        },\n        guid: {\n            alias: \"uuid\",\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"version\",\n                    \"separator\"\n                ]);\n                let versionNumbers = \"\";\n                if (options.version) {\n                    const versions = [].concat(options.version);\n                    Assert(versions.length >= 1, \"version must have at least 1 valid version specified\");\n                    const set = new Set();\n                    for(let i = 0; i < versions.length; ++i){\n                        const version = versions[i];\n                        Assert(typeof version === \"string\", \"version at position \" + i + \" must be a string\");\n                        const versionNumber = internals.guidVersions[version.toLowerCase()];\n                        Assert(versionNumber, \"version at position \" + i + \" must be one of \" + Object.keys(internals.guidVersions).join(\", \"));\n                        Assert(!set.has(versionNumber), \"version at position \" + i + \" must not be a duplicate\");\n                        versionNumbers += versionNumber;\n                        set.add(versionNumber);\n                    }\n                }\n                Assert(internals.guidSeparators.has(options.separator), 'separator must be one of true, false, \"-\", or \":\"');\n                const separator = options.separator === undefined ? \"[:-]?\" : options.separator === true ? \"[:-]\" : options.separator === false ? \"[]?\" : `\\\\${options.separator}`;\n                const regex = new RegExp(`^([\\\\[{\\\\(]?)[0-9A-F]{8}(${separator})[0-9A-F]{4}\\\\2?[${versionNumbers || \"0-9A-F\"}][0-9A-F]{3}\\\\2?[${versionNumbers ? \"89AB\" : \"0-9A-F\"}][0-9A-F]{3}\\\\2?[0-9A-F]{12}([\\\\]}\\\\)]?)$`, \"i\");\n                return this.$_addRule({\n                    name: \"guid\",\n                    args: {\n                        options\n                    },\n                    regex\n                });\n            },\n            validate (value, helpers, args, { regex }) {\n                const results = regex.exec(value);\n                if (!results) {\n                    return helpers.error(\"string.guid\");\n                }\n                // Matching braces\n                if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {\n                    return helpers.error(\"string.guid\");\n                }\n                return value;\n            }\n        },\n        hex: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"byteAligned\",\n                    \"prefix\"\n                ]);\n                options = {\n                    byteAligned: false,\n                    prefix: false,\n                    ...options\n                };\n                Assert(typeof options.byteAligned === \"boolean\", \"byteAligned must be boolean\");\n                Assert(typeof options.prefix === \"boolean\" || options.prefix === \"optional\", 'prefix must be boolean or \"optional\"');\n                return this.$_addRule({\n                    name: \"hex\",\n                    args: {\n                        options\n                    }\n                });\n            },\n            validate (value, helpers, { options }) {\n                const re = options.prefix === \"optional\" ? internals.hexRegex.withOptionalPrefix : options.prefix === true ? internals.hexRegex.withPrefix : internals.hexRegex.withoutPrefix;\n                if (!re.test(value)) {\n                    return helpers.error(\"string.hex\");\n                }\n                if (options.byteAligned && value.length % 2 !== 0) {\n                    return helpers.error(\"string.hexAlign\");\n                }\n                return value;\n            }\n        },\n        hostname: {\n            method () {\n                return this.$_addRule(\"hostname\");\n            },\n            validate (value, helpers) {\n                if (Domain.isValid(value, {\n                    minDomainSegments: 1\n                }) || internals.ipRegex.test(value)) {\n                    return value;\n                }\n                return helpers.error(\"string.hostname\");\n            }\n        },\n        insensitive: {\n            method () {\n                return this.$_setFlag(\"insensitive\", true);\n            }\n        },\n        ip: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"cidr\",\n                    \"version\"\n                ]);\n                const { cidr, versions, regex } = Ip.regex(options);\n                const version = options.version ? versions : undefined;\n                return this.$_addRule({\n                    name: \"ip\",\n                    args: {\n                        options: {\n                            cidr,\n                            version\n                        }\n                    },\n                    regex\n                });\n            },\n            validate (value, helpers, { options }, { regex }) {\n                if (regex.test(value)) {\n                    return value;\n                }\n                if (options.version) {\n                    return helpers.error(\"string.ipVersion\", {\n                        value,\n                        cidr: options.cidr,\n                        version: options.version\n                    });\n                }\n                return helpers.error(\"string.ip\", {\n                    value,\n                    cidr: options.cidr\n                });\n            }\n        },\n        isoDate: {\n            method () {\n                return this.$_addRule(\"isoDate\");\n            },\n            validate (value, { error }) {\n                if (internals.isoDate(value)) {\n                    return value;\n                }\n                return error(\"string.isoDate\");\n            }\n        },\n        isoDuration: {\n            method () {\n                return this.$_addRule(\"isoDuration\");\n            },\n            validate (value, helpers) {\n                if (internals.isoDurationRegex.test(value)) {\n                    return value;\n                }\n                return helpers.error(\"string.isoDuration\");\n            }\n        },\n        length: {\n            method (limit, encoding) {\n                return internals.length(this, \"length\", limit, \"=\", encoding);\n            },\n            validate (value, helpers, { limit, encoding }, { name, operator, args }) {\n                const length = encoding ? Buffer && Buffer.byteLength(value, encoding) : value.length; // $lab:coverage:ignore$\n                if (Common.compare(length, limit, operator)) {\n                    return value;\n                }\n                return helpers.error(\"string.\" + name, {\n                    limit: args.limit,\n                    value,\n                    encoding\n                });\n            },\n            args: [\n                {\n                    name: \"limit\",\n                    ref: true,\n                    assert: Common.limit,\n                    message: \"must be a positive integer\"\n                },\n                \"encoding\"\n            ]\n        },\n        lowercase: {\n            method () {\n                return this.case(\"lower\");\n            }\n        },\n        max: {\n            method (limit, encoding) {\n                return internals.length(this, \"max\", limit, \"<=\", encoding);\n            },\n            args: [\n                \"limit\",\n                \"encoding\"\n            ]\n        },\n        min: {\n            method (limit, encoding) {\n                return internals.length(this, \"min\", limit, \">=\", encoding);\n            },\n            args: [\n                \"limit\",\n                \"encoding\"\n            ]\n        },\n        normalize: {\n            method (form = \"NFC\") {\n                Assert(internals.normalizationForms.includes(form), \"normalization form must be one of \" + internals.normalizationForms.join(\", \"));\n                return this.$_addRule({\n                    name: \"normalize\",\n                    args: {\n                        form\n                    }\n                });\n            },\n            validate (value, { error }, { form }) {\n                if (value === value.normalize(form)) {\n                    return value;\n                }\n                return error(\"string.normalize\", {\n                    value,\n                    form\n                });\n            },\n            convert: true\n        },\n        pattern: {\n            alias: \"regex\",\n            method (regex, options = {}) {\n                Assert(regex instanceof RegExp, \"regex must be a RegExp\");\n                Assert(!regex.flags.includes(\"g\") && !regex.flags.includes(\"y\"), \"regex should not use global or sticky mode\");\n                if (typeof options === \"string\") {\n                    options = {\n                        name: options\n                    };\n                }\n                Common.assertOptions(options, [\n                    \"invert\",\n                    \"name\"\n                ]);\n                const errorCode = [\n                    \"string.pattern\",\n                    options.invert ? \".invert\" : \"\",\n                    options.name ? \".name\" : \".base\"\n                ].join(\"\");\n                return this.$_addRule({\n                    name: \"pattern\",\n                    args: {\n                        regex,\n                        options\n                    },\n                    errorCode\n                });\n            },\n            validate (value, helpers, { regex, options }, { errorCode }) {\n                const patternMatch = regex.test(value);\n                if (patternMatch ^ options.invert) {\n                    return value;\n                }\n                return helpers.error(errorCode, {\n                    name: options.name,\n                    regex,\n                    value\n                });\n            },\n            args: [\n                \"regex\",\n                \"options\"\n            ],\n            multi: true\n        },\n        replace: {\n            method (pattern, replacement) {\n                if (typeof pattern === \"string\") {\n                    pattern = new RegExp(EscapeRegex(pattern), \"g\");\n                }\n                Assert(pattern instanceof RegExp, \"pattern must be a RegExp\");\n                Assert(typeof replacement === \"string\", \"replacement must be a String\");\n                const obj = this.clone();\n                if (!obj.$_terms.replacements) {\n                    obj.$_terms.replacements = [];\n                }\n                obj.$_terms.replacements.push({\n                    pattern,\n                    replacement\n                });\n                return obj;\n            }\n        },\n        token: {\n            method () {\n                return this.$_addRule(\"token\");\n            },\n            validate (value, helpers) {\n                if (/^\\w+$/.test(value)) {\n                    return value;\n                }\n                return helpers.error(\"string.token\");\n            }\n        },\n        trim: {\n            method (enabled = true) {\n                Assert(typeof enabled === \"boolean\", \"enabled must be a boolean\");\n                return this.$_addRule({\n                    name: \"trim\",\n                    args: {\n                        enabled\n                    }\n                });\n            },\n            validate (value, helpers, { enabled }) {\n                if (!enabled || value === value.trim()) {\n                    return value;\n                }\n                return helpers.error(\"string.trim\");\n            },\n            convert: true\n        },\n        truncate: {\n            method (enabled = true) {\n                Assert(typeof enabled === \"boolean\", \"enabled must be a boolean\");\n                return this.$_setFlag(\"truncate\", enabled);\n            }\n        },\n        uppercase: {\n            method () {\n                return this.case(\"upper\");\n            }\n        },\n        uri: {\n            method (options = {}) {\n                Common.assertOptions(options, [\n                    \"allowRelative\",\n                    \"allowQuerySquareBrackets\",\n                    \"domain\",\n                    \"relativeOnly\",\n                    \"scheme\",\n                    \"encodeUri\"\n                ]);\n                if (options.domain) {\n                    Common.assertOptions(options.domain, [\n                        \"allowFullyQualified\",\n                        \"allowUnicode\",\n                        \"maxDomainSegments\",\n                        \"minDomainSegments\",\n                        \"tlds\"\n                    ]);\n                }\n                const { regex, scheme } = Uri.regex(options);\n                const domain = options.domain ? internals.addressOptions(options.domain) : null;\n                return this.$_addRule({\n                    name: \"uri\",\n                    args: {\n                        options\n                    },\n                    regex,\n                    domain,\n                    scheme\n                });\n            },\n            validate (value, helpers, { options }, { regex, domain, scheme }) {\n                if ([\n                    \"http:/\",\n                    \"https:/\"\n                ].includes(value)) {\n                    return helpers.error(\"string.uri\");\n                }\n                let match = regex.exec(value);\n                if (!match && helpers.prefs.convert && options.encodeUri) {\n                    const encoded = encodeURI(value);\n                    match = regex.exec(encoded);\n                    if (match) {\n                        value = encoded;\n                    }\n                }\n                if (match) {\n                    const matched = match[1] || match[2];\n                    if (domain && (!options.allowRelative || matched) && !Domain.isValid(matched, domain)) {\n                        return helpers.error(\"string.domain\", {\n                            value: matched\n                        });\n                    }\n                    return value;\n                }\n                if (options.relativeOnly) {\n                    return helpers.error(\"string.uriRelativeOnly\");\n                }\n                if (options.scheme) {\n                    return helpers.error(\"string.uriCustomScheme\", {\n                        scheme,\n                        value\n                    });\n                }\n                return helpers.error(\"string.uri\");\n            }\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.replacements) {\n                for (const { pattern, replacement } of desc.replacements){\n                    obj = obj.replace(pattern, replacement);\n                }\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"string.alphanum\": \"{{#label}} must only contain alpha-numeric characters\",\n        \"string.base\": \"{{#label}} must be a string\",\n        \"string.base64\": \"{{#label}} must be a valid base64 string\",\n        \"string.creditCard\": \"{{#label}} must be a credit card\",\n        \"string.dataUri\": \"{{#label}} must be a valid dataUri string\",\n        \"string.domain\": \"{{#label}} must contain a valid domain name\",\n        \"string.email\": \"{{#label}} must be a valid email\",\n        \"string.empty\": \"{{#label}} is not allowed to be empty\",\n        \"string.guid\": \"{{#label}} must be a valid GUID\",\n        \"string.hex\": \"{{#label}} must only contain hexadecimal characters\",\n        \"string.hexAlign\": \"{{#label}} hex decoded representation must be byte aligned\",\n        \"string.hostname\": \"{{#label}} must be a valid hostname\",\n        \"string.ip\": \"{{#label}} must be a valid ip address with a {{#cidr}} CIDR\",\n        \"string.ipVersion\": \"{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR\",\n        \"string.isoDate\": \"{{#label}} must be in iso format\",\n        \"string.isoDuration\": \"{{#label}} must be a valid ISO 8601 duration\",\n        \"string.length\": \"{{#label}} length must be {{#limit}} characters long\",\n        \"string.lowercase\": \"{{#label}} must only contain lowercase characters\",\n        \"string.max\": \"{{#label}} length must be less than or equal to {{#limit}} characters long\",\n        \"string.min\": \"{{#label}} length must be at least {{#limit}} characters long\",\n        \"string.normalize\": \"{{#label}} must be unicode normalized in the {{#form}} form\",\n        \"string.token\": \"{{#label}} must only contain alpha-numeric and underscore characters\",\n        \"string.pattern.base\": \"{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}\",\n        \"string.pattern.name\": \"{{#label}} with value {:[.]} fails to match the {{#name}} pattern\",\n        \"string.pattern.invert.base\": \"{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}\",\n        \"string.pattern.invert.name\": \"{{#label}} with value {:[.]} matches the inverted {{#name}} pattern\",\n        \"string.trim\": \"{{#label}} must not have leading or trailing whitespace\",\n        \"string.uri\": \"{{#label}} must be a valid uri\",\n        \"string.uriCustomScheme\": \"{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern\",\n        \"string.uriRelativeOnly\": \"{{#label}} must be a valid relative uri\",\n        \"string.uppercase\": \"{{#label}} must only contain uppercase characters\"\n    }\n});\n// Helpers\ninternals.addressOptions = function(options) {\n    if (!options) {\n        return internals.tlds || options; // $lab:coverage:ignore$\n    }\n    // minDomainSegments\n    Assert(options.minDomainSegments === undefined || Number.isSafeInteger(options.minDomainSegments) && options.minDomainSegments > 0, \"minDomainSegments must be a positive integer\");\n    // maxDomainSegments\n    Assert(options.maxDomainSegments === undefined || Number.isSafeInteger(options.maxDomainSegments) && options.maxDomainSegments > 0, \"maxDomainSegments must be a positive integer\");\n    // tlds\n    if (options.tlds === false) {\n        return options;\n    }\n    if (options.tlds === true || options.tlds === undefined) {\n        Assert(internals.tlds, \"Built-in TLD list disabled\");\n        return Object.assign({}, options, internals.tlds);\n    }\n    Assert(typeof options.tlds === \"object\", \"tlds must be true, false, or an object\");\n    const deny = options.tlds.deny;\n    if (deny) {\n        if (Array.isArray(deny)) {\n            options = Object.assign({}, options, {\n                tlds: {\n                    deny: new Set(deny)\n                }\n            });\n        }\n        Assert(options.tlds.deny instanceof Set, \"tlds.deny must be an array, Set, or boolean\");\n        Assert(!options.tlds.allow, \"Cannot specify both tlds.allow and tlds.deny lists\");\n        internals.validateTlds(options.tlds.deny, \"tlds.deny\");\n        return options;\n    }\n    const allow = options.tlds.allow;\n    if (!allow) {\n        return options;\n    }\n    if (allow === true) {\n        Assert(internals.tlds, \"Built-in TLD list disabled\");\n        return Object.assign({}, options, internals.tlds);\n    }\n    if (Array.isArray(allow)) {\n        options = Object.assign({}, options, {\n            tlds: {\n                allow: new Set(allow)\n            }\n        });\n    }\n    Assert(options.tlds.allow instanceof Set, \"tlds.allow must be an array, Set, or boolean\");\n    internals.validateTlds(options.tlds.allow, \"tlds.allow\");\n    return options;\n};\ninternals.validateTlds = function(set, source) {\n    for (const tld of set){\n        Assert(Domain.isValid(tld, {\n            minDomainSegments: 1,\n            maxDomainSegments: 1\n        }), `${source} must contain valid top level domain names`);\n    }\n};\ninternals.isoDate = function(value) {\n    if (!Common.isIsoDate(value)) {\n        return null;\n    }\n    if (/.*T.*[+-]\\d\\d$/.test(value)) {\n        value += \"00\";\n    }\n    const date = new Date(value);\n    if (isNaN(date.getTime())) {\n        return null;\n    }\n    return date.toISOString();\n};\ninternals.length = function(schema, name, limit, operator, encoding) {\n    Assert(!encoding || Buffer && Buffer.isEncoding(encoding), \"Invalid encoding:\", encoding); // $lab:coverage:ignore$\n    return schema.$_addRule({\n        name,\n        method: \"length\",\n        args: {\n            limit,\n            encoding\n        },\n        operator\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxRQUFRRixtQkFBT0EsQ0FBQztBQUN0QixNQUFNRyxLQUFLSCxtQkFBT0EsQ0FBQztBQUNuQixNQUFNSSxjQUFjSixtQkFBT0EsQ0FBQztBQUM1QixNQUFNSyxPQUFPTCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNTSxNQUFNTixtQkFBT0EsQ0FBQztBQUVwQixNQUFNTyxNQUFNUCxtQkFBT0EsQ0FBQztBQUNwQixNQUFNUSxTQUFTUixtQkFBT0EsQ0FBQztBQUd2QixNQUFNUyxZQUFZO0lBQ2RDLE1BQU1MLGdCQUFnQk0sTUFBTTtRQUFFRCxNQUFNO1lBQUVFLE9BQU9QO1lBQU1RLE1BQU07UUFBSztJQUFFLElBQUk7SUFDcEVDLGFBQWE7UUFDVCxrQkFBa0I7UUFDbEJDLE1BQU07WUFDRixVQUFVO1lBQ1ZBLE1BQU07WUFDTkMsT0FBTztRQUNYO1FBQ0FBLE9BQU87WUFDSEQsTUFBTTtZQUNOQyxPQUFPO1FBQ1g7SUFDSjtJQUNBQyxjQUFjO0lBQ2RDLFVBQVU7UUFDTkMsWUFBWTtRQUNaQyxvQkFBb0I7UUFDcEJDLGVBQWU7SUFDbkI7SUFDQUMsU0FBU25CLEdBQUdvQixLQUFLLENBQUM7UUFBRUMsTUFBTTtJQUFZLEdBQUdELEtBQUs7SUFDOUNFLGtCQUFrQjtJQUVsQkMsY0FBYztRQUNWLEtBQUs7UUFBSyxLQUFLO1FBQUssS0FBSztRQUFLLElBQUk7SUFDdEM7SUFDQUMsY0FBYztRQUNWQyxRQUFRO1FBQ1JDLFFBQVE7UUFDUkMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7UUFDUkMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7SUFDWjtJQUNBQyxnQkFBZ0IsSUFBSXpCLElBQUk7UUFBQzBCO1FBQVc7UUFBTTtR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LEVBQUV1RSxRQUFRLEVBQUVELFFBQVE7SUFFaEV0SixPQUFPLENBQUNzSixZQUFZRSxVQUFVQSxPQUFPMEMsVUFBVSxDQUFDNUMsV0FBVyxxQkFBcUJBLFdBQWdCLHdCQUF3QjtJQUV4SCxPQUFPL0YsT0FBT3VDLFNBQVMsQ0FBQztRQUFFTztRQUFNaEQsUUFBUTtRQUFVTyxNQUFNO1lBQUVvQjtZQUFPc0U7UUFBUztRQUFHQztJQUFTO0FBQzFGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzdGVoZXJvLy4vbm9kZV9tb2R1bGVzL2pvaS9saWIvdHlwZXMvc3RyaW5nLmpzPzI3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NlcnQgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9hc3NlcnQnKTtcbmNvbnN0IERvbWFpbiA9IHJlcXVpcmUoJ0BzaWRld2F5L2FkZHJlc3MvbGliL2RvbWFpbicpO1xuY29uc3QgRW1haWwgPSByZXF1aXJlKCdAc2lkZXdheS9hZGRyZXNzL2xpYi9lbWFpbCcpO1xuY29uc3QgSXAgPSByZXF1aXJlKCdAc2lkZXdheS9hZGRyZXNzL2xpYi9pcCcpO1xuY29uc3QgRXNjYXBlUmVnZXggPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9lc2NhcGVSZWdleCcpO1xuY29uc3QgVGxkcyA9IHJlcXVpcmUoJ0BzaWRld2F5L2FkZHJlc3MvbGliL3RsZHMnKTtcbmNvbnN0IFVyaSA9IHJlcXVpcmUoJ0BzaWRld2F5L2FkZHJlc3MvbGliL3VyaScpO1xuXG5jb25zdCBBbnkgPSByZXF1aXJlKCcuL2FueScpO1xuY29uc3QgQ29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cblxuY29uc3QgaW50ZXJuYWxzID0ge1xuICAgIHRsZHM6IFRsZHMgaW5zdGFuY2VvZiBTZXQgPyB7IHRsZHM6IHsgYWxsb3c6IFRsZHMsIGRlbnk6IG51bGwgfSB9IDogZmFsc2UsICAgICAgICAgICAgICAvLyAkbGFiOmNvdmVyYWdlOmlnbm9yZSRcbiAgICBiYXNlNjRSZWdleDoge1xuICAgICAgICAvLyBwYWRkaW5nUmVxdWlyZWRcbiAgICAgICAgdHJ1ZToge1xuICAgICAgICAgICAgLy8gdXJsU2FmZVxuICAgICAgICAgICAgdHJ1ZTogL14oPzpbXFx3XFwtXXsyfVtcXHdcXC1dezJ9KSooPzpbXFx3XFwtXXsyfT09fFtcXHdcXC1dezN9PSk/JC8sXG4gICAgICAgICAgICBmYWxzZTogL14oPzpbQS1aYS16MC05K1xcL117Mn1bQS1aYS16MC05K1xcL117Mn0pKig/OltBLVphLXowLTkrXFwvXXsyfT09fFtBLVphLXowLTkrXFwvXXszfT0pPyQvXG4gICAgICAgIH0sXG4gICAgICAgIGZhbHNlOiB7XG4gICAgICAgICAgICB0cnVlOiAvXig/OltcXHdcXC1dezJ9W1xcd1xcLV17Mn0pKig/OltcXHdcXC1dezJ9KD09KT98W1xcd1xcLV17M309Pyk/JC8sXG4gICAgICAgICAgICBmYWxzZTogL14oPzpbQS1aYS16MC05K1xcL117Mn1bQS1aYS16MC05K1xcL117Mn0pKig/OltBLVphLXowLTkrXFwvXXsyfSg9PSk/fFtBLVphLXowLTkrXFwvXXszfT0/KT8kL1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXRhVXJpUmVnZXg6IC9eZGF0YTpbXFx3Ky4tXStcXC9bXFx3Ky4tXSs7KChjaGFyc2V0PVtcXHctXSt8YmFzZTY0KSwpPyguKikkLyxcbiAgICBoZXhSZWdleDoge1xuICAgICAgICB3aXRoUHJlZml4OiAvXjB4WzAtOWEtZl0rJC9pLFxuICAgICAgICB3aXRoT3B0aW9uYWxQcmVmaXg6IC9eKD86MHgpP1swLTlhLWZdKyQvaSxcbiAgICAgICAgd2l0aG91dFByZWZpeDogL15bMC05YS1mXSskL2lcbiAgICB9LFxuICAgIGlwUmVnZXg6IElwLnJlZ2V4KHsgY2lkcjogJ2ZvcmJpZGRlbicgfSkucmVnZXgsXG4gICAgaXNvRHVyYXRpb25SZWdleDogL15QKD8hJCkoXFxkK1kpPyhcXGQrTSk/KFxcZCtXKT8oXFxkK0QpPyhUKD89XFxkKShcXGQrSCk/KFxcZCtNKT8oXFxkK1MpPyk/JC8sXG5cbiAgICBndWlkQnJhY2tldHM6IHtcbiAgICAgICAgJ3snOiAnfScsICdbJzogJ10nLCAnKCc6ICcpJywgJyc6ICcnXG4gICAgfSxcbiAgICBndWlkVmVyc2lvbnM6IHtcbiAgICAgICAgdXVpZHYxOiAnMScsXG4gICAgICAgIHV1aWR2MjogJzInLFxuICAgICAgICB1dWlkdjM6ICczJyxcbiAgICAgICAgdXVpZHY0OiAnNCcsXG4gICAgICAgIHV1aWR2NTogJzUnLFxuICAgICAgICB1dWlkdjY6ICc2JyxcbiAgICAgICAgdXVpZHY3OiAnNycsXG4gICAgICAgIHV1aWR2ODogJzgnXG4gICAgfSxcbiAgICBndWlkU2VwYXJhdG9yczogbmV3IFNldChbdW5kZWZpbmVkLCB0cnVlLCBmYWxzZSwgJy0nLCAnOiddKSxcblxuICAgIG5vcm1hbGl6YXRpb25Gb3JtczogWydORkMnLCAnTkZEJywgJ05GS0MnLCAnTkZLRCddXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQW55LmV4dGVuZCh7XG5cbiAgICB0eXBlOiAnc3RyaW5nJyxcblxuICAgIGZsYWdzOiB7XG5cbiAgICAgICAgaW5zZW5zaXRpdmU6IHsgZGVmYXVsdDogZmFsc2UgfSxcbiAgICAgICAgdHJ1bmNhdGU6IHsgZGVmYXVsdDogZmFsc2UgfVxuICAgIH0sXG5cbiAgICB0ZXJtczoge1xuXG4gICAgICAgIHJlcGxhY2VtZW50czogeyBpbml0OiBudWxsIH1cbiAgICB9LFxuXG4gICAgY29lcmNlOiB7XG4gICAgICAgIGZyb206ICdzdHJpbmcnLFxuICAgICAgICBtZXRob2QodmFsdWUsIHsgc2NoZW1hLCBzdGF0ZSwgcHJlZnMgfSkge1xuXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemUgPSBzY2hlbWEuJF9nZXRSdWxlKCdub3JtYWxpemUnKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLm5vcm1hbGl6ZShub3JtYWxpemUuYXJncy5mb3JtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2FzaW5nID0gc2NoZW1hLiRfZ2V0UnVsZSgnY2FzZScpO1xuICAgICAgICAgICAgaWYgKGNhc2luZykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY2FzaW5nLmFyZ3MuZGlyZWN0aW9uID09PSAndXBwZXInID8gdmFsdWUudG9Mb2NhbGVVcHBlckNhc2UoKSA6IHZhbHVlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRyaW0gPSBzY2hlbWEuJF9nZXRSdWxlKCd0cmltJyk7XG4gICAgICAgICAgICBpZiAodHJpbSAmJlxuICAgICAgICAgICAgICAgIHRyaW0uYXJncy5lbmFibGVkKSB7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjaGVtYS4kX3Rlcm1zLnJlcGxhY2VtZW50cykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQgb2Ygc2NoZW1hLiRfdGVybXMucmVwbGFjZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZXBsYWNlbWVudC5wYXR0ZXJuLCByZXBsYWNlbWVudC5yZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBoZXggPSBzY2hlbWEuJF9nZXRSdWxlKCdoZXgnKTtcbiAgICAgICAgICAgIGlmIChoZXggJiZcbiAgICAgICAgICAgICAgICBoZXguYXJncy5vcHRpb25zLmJ5dGVBbGlnbmVkICYmXG4gICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoICUgMiAhPT0gMCkge1xuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBgMCR7dmFsdWV9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjaGVtYS4kX2dldFJ1bGUoJ2lzb0RhdGUnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzbyA9IGludGVybmFscy5pc29EYXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXNvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjaGVtYS5fZmxhZ3MudHJ1bmNhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlID0gc2NoZW1hLiRfZ2V0UnVsZSgnbWF4Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbWl0ID0gcnVsZS5hcmdzLmxpbWl0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ29tbW9uLmlzUmVzb2x2YWJsZShsaW1pdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gbGltaXQucmVzb2x2ZSh2YWx1ZSwgc3RhdGUsIHByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQ29tbW9uLmxpbWl0KGxpbWl0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlLCBlcnJvcnM6IHNjaGVtYS4kX2NyZWF0ZUVycm9yKCdhbnkucmVmJywgbGltaXQsIHsgcmVmOiBydWxlLmFyZ3MubGltaXQsIGFyZzogJ2xpbWl0JywgcmVhc29uOiAnbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInIH0sIHN0YXRlLCBwcmVmcykgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgbGltaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZSh2YWx1ZSwgeyBzY2hlbWEsIGVycm9yIH0pIHtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWUsIGVycm9yczogZXJyb3IoJ3N0cmluZy5iYXNlJykgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IHNjaGVtYS4kX2dldFJ1bGUoJ21pbicpO1xuICAgICAgICAgICAgaWYgKG1pbiAmJlxuICAgICAgICAgICAgICAgIG1pbi5hcmdzLmxpbWl0ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlLCBlcnJvcnM6IGVycm9yKCdzdHJpbmcuZW1wdHknKSB9O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJ1bGVzOiB7XG5cbiAgICAgICAgYWxwaGFudW06IHtcbiAgICAgICAgICAgIG1ldGhvZCgpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSgnYWxwaGFudW0nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycykge1xuXG4gICAgICAgICAgICAgICAgaWYgKC9eW2EtekEtWjAtOV0rJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdzdHJpbmcuYWxwaGFudW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBiYXNlNjQ6IHtcbiAgICAgICAgICAgIG1ldGhvZChvcHRpb25zID0ge30pIHtcblxuICAgICAgICAgICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsncGFkZGluZ1JlcXVpcmVkJywgJ3VybFNhZmUnXSk7XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zID0geyB1cmxTYWZlOiBmYWxzZSwgcGFkZGluZ1JlcXVpcmVkOiB0cnVlLCAuLi5vcHRpb25zIH07XG4gICAgICAgICAgICAgICAgQXNzZXJ0KHR5cGVvZiBvcHRpb25zLnBhZGRpbmdSZXF1aXJlZCA9PT0gJ2Jvb2xlYW4nLCAncGFkZGluZ1JlcXVpcmVkIG11c3QgYmUgYm9vbGVhbicpO1xuICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2Ygb3B0aW9ucy51cmxTYWZlID09PSAnYm9vbGVhbicsICd1cmxTYWZlIG11c3QgYmUgYm9vbGVhbicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2Jhc2U2NCcsIGFyZ3M6IHsgb3B0aW9ucyB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCB7IG9wdGlvbnMgfSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBpbnRlcm5hbHMuYmFzZTY0UmVnZXhbb3B0aW9ucy5wYWRkaW5nUmVxdWlyZWRdW29wdGlvbnMudXJsU2FmZV07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLmJhc2U2NCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNhc2U6IHtcbiAgICAgICAgICAgIG1ldGhvZChkaXJlY3Rpb24pIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydChbJ2xvd2VyJywgJ3VwcGVyJ10uaW5jbHVkZXMoZGlyZWN0aW9uKSwgJ0ludmFsaWQgY2FzZTonLCBkaXJlY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2Nhc2UnLCBhcmdzOiB7IGRpcmVjdGlvbiB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCB7IGRpcmVjdGlvbiB9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnbG93ZXInICYmIHZhbHVlID09PSB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3VwcGVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUudG9Mb2NhbGVVcHBlckNhc2UoKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcihgc3RyaW5nLiR7ZGlyZWN0aW9ufWNhc2VgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb252ZXJ0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlZGl0Q2FyZDoge1xuICAgICAgICAgICAgbWV0aG9kKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKCdjcmVkaXRDYXJkJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMpIHtcblxuICAgICAgICAgICAgICAgIGxldCBpID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBtdWwgPSAxO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyID0gdmFsdWUuY2hhckF0KGkpICogbXVsO1xuICAgICAgICAgICAgICAgICAgICBzdW0gPSBzdW0gKyAoY2hhciAtIChjaGFyID4gOSkgKiA5KTtcbiAgICAgICAgICAgICAgICAgICAgbXVsID0gbXVsIF4gMztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3VtID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBzdW0gJSAxMCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLmNyZWRpdENhcmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhVXJpOiB7XG4gICAgICAgICAgICBtZXRob2Qob3B0aW9ucyA9IHt9KSB7XG5cbiAgICAgICAgICAgICAgICBDb21tb24uYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBbJ3BhZGRpbmdSZXF1aXJlZCddKTtcblxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7IHBhZGRpbmdSZXF1aXJlZDogdHJ1ZSwgLi4ub3B0aW9ucyB9O1xuICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2Ygb3B0aW9ucy5wYWRkaW5nUmVxdWlyZWQgPT09ICdib29sZWFuJywgJ3BhZGRpbmdSZXF1aXJlZCBtdXN0IGJlIGJvb2xlYW4nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdkYXRhVXJpJywgYXJnczogeyBvcHRpb25zIH0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgb3B0aW9ucyB9KSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goaW50ZXJuYWxzLmRhdGFVcmlSZWdleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXNbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzWzJdICE9PSAnYmFzZTY0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0cmVnZXggPSBpbnRlcm5hbHMuYmFzZTY0UmVnZXhbb3B0aW9ucy5wYWRkaW5nUmVxdWlyZWRdLmZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZTY0cmVnZXgudGVzdChtYXRjaGVzWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5kYXRhVXJpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICBtZXRob2Qob3B0aW9ucykge1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgQ29tbW9uLmFzc2VydE9wdGlvbnMob3B0aW9ucywgWydhbGxvd0Z1bGx5UXVhbGlmaWVkJywgJ2FsbG93VW5pY29kZScsICdtYXhEb21haW5TZWdtZW50cycsICdtaW5Eb21haW5TZWdtZW50cycsICd0bGRzJ10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBpbnRlcm5hbHMuYWRkcmVzc09wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKHsgbmFtZTogJ2RvbWFpbicsIGFyZ3M6IHsgb3B0aW9ucyB9LCBhZGRyZXNzIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCBhcmdzLCB7IGFkZHJlc3MgfSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKERvbWFpbi5pc1ZhbGlkKHZhbHVlLCBhZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5kb21haW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgbWV0aG9kKG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAgICAgICAgICAgQ29tbW9uLmFzc2VydE9wdGlvbnMob3B0aW9ucywgWydhbGxvd0Z1bGx5UXVhbGlmaWVkJywgJ2FsbG93VW5pY29kZScsICdpZ25vcmVMZW5ndGgnLCAnbWF4RG9tYWluU2VnbWVudHMnLCAnbWluRG9tYWluU2VnbWVudHMnLCAnbXVsdGlwbGUnLCAnc2VwYXJhdG9yJywgJ3RsZHMnXSk7XG4gICAgICAgICAgICAgICAgQXNzZXJ0KG9wdGlvbnMubXVsdGlwbGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucy5tdWx0aXBsZSA9PT0gJ2Jvb2xlYW4nLCAnbXVsdGlwbGUgb3B0aW9uIG11c3QgYmUgYW4gYm9vbGVhbicpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IGludGVybmFscy5hZGRyZXNzT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFxcXFxzKlske29wdGlvbnMuc2VwYXJhdG9yID8gRXNjYXBlUmVnZXgob3B0aW9ucy5zZXBhcmF0b3IpIDogJywnfV1cXFxccypgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdlbWFpbCcsIGFyZ3M6IHsgb3B0aW9ucyB9LCByZWdleCwgYWRkcmVzcyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycywgeyBvcHRpb25zIH0sIHsgcmVnZXgsIGFkZHJlc3MgfSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZW1haWxzID0gb3B0aW9ucy5tdWx0aXBsZSA/IHZhbHVlLnNwbGl0KHJlZ2V4KSA6IFt2YWx1ZV07XG4gICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVtYWlsIG9mIGVtYWlscykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUVtYWlsLmlzVmFsaWQoZW1haWwsIGFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkcy5wdXNoKGVtYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaW52YWxpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLmVtYWlsJywgeyB2YWx1ZSwgaW52YWxpZHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ3VpZDoge1xuICAgICAgICAgICAgYWxpYXM6ICd1dWlkJyxcbiAgICAgICAgICAgIG1ldGhvZChvcHRpb25zID0ge30pIHtcblxuICAgICAgICAgICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsndmVyc2lvbicsICdzZXBhcmF0b3InXSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmVyc2lvbk51bWJlcnMgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2lvbnMgPSBbXS5jb25jYXQob3B0aW9ucy52ZXJzaW9uKTtcblxuICAgICAgICAgICAgICAgICAgICBBc3NlcnQodmVyc2lvbnMubGVuZ3RoID49IDEsICd2ZXJzaW9uIG11c3QgaGF2ZSBhdCBsZWFzdCAxIHZhbGlkIHZlcnNpb24gc3BlY2lmaWVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gdmVyc2lvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBBc3NlcnQodHlwZW9mIHZlcnNpb24gPT09ICdzdHJpbmcnLCAndmVyc2lvbiBhdCBwb3NpdGlvbiAnICsgaSArICcgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2lvbk51bWJlciA9IGludGVybmFscy5ndWlkVmVyc2lvbnNbdmVyc2lvbi50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFzc2VydCh2ZXJzaW9uTnVtYmVyLCAndmVyc2lvbiBhdCBwb3NpdGlvbiAnICsgaSArICcgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGludGVybmFscy5ndWlkVmVyc2lvbnMpLmpvaW4oJywgJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQXNzZXJ0KCFzZXQuaGFzKHZlcnNpb25OdW1iZXIpLCAndmVyc2lvbiBhdCBwb3NpdGlvbiAnICsgaSArICcgbXVzdCBub3QgYmUgYSBkdXBsaWNhdGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbk51bWJlcnMgKz0gdmVyc2lvbk51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldC5hZGQodmVyc2lvbk51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoaW50ZXJuYWxzLmd1aWRTZXBhcmF0b3JzLmhhcyhvcHRpb25zLnNlcGFyYXRvciksICdzZXBhcmF0b3IgbXVzdCBiZSBvbmUgb2YgdHJ1ZSwgZmFsc2UsIFwiLVwiLCBvciBcIjpcIicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdGlvbnMuc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnWzotXT8nIDpcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zZXBhcmF0b3IgPT09IHRydWUgPyAnWzotXScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zZXBhcmF0b3IgPT09IGZhbHNlID8gJ1tdPycgOiBgXFxcXCR7b3B0aW9ucy5zZXBhcmF0b3J9YDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgXihbXFxcXFt7XFxcXChdPylbMC05QS1GXXs4fSgke3NlcGFyYXRvcn0pWzAtOUEtRl17NH1cXFxcMj9bJHt2ZXJzaW9uTnVtYmVycyB8fCAnMC05QS1GJ31dWzAtOUEtRl17M31cXFxcMj9bJHt2ZXJzaW9uTnVtYmVycyA/ICc4OUFCJyA6ICcwLTlBLUYnfV1bMC05QS1GXXszfVxcXFwyP1swLTlBLUZdezEyfShbXFxcXF19XFxcXCldPykkYCwgJ2knKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdndWlkJywgYXJnczogeyBvcHRpb25zIH0sIHJlZ2V4IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCBhcmdzLCB7IHJlZ2V4IH0pIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZWdleC5leGVjKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLmd1aWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYXRjaGluZyBicmFjZXNcblxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuZ3VpZEJyYWNrZXRzW3Jlc3VsdHNbMV1dICE9PSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5ndWlkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGhleDoge1xuICAgICAgICAgICAgbWV0aG9kKG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAgICAgICAgICAgQ29tbW9uLmFzc2VydE9wdGlvbnMob3B0aW9ucywgWydieXRlQWxpZ25lZCcsICdwcmVmaXgnXSk7XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zID0geyBieXRlQWxpZ25lZDogZmFsc2UsIHByZWZpeDogZmFsc2UsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgICAgICAgICBBc3NlcnQodHlwZW9mIG9wdGlvbnMuYnl0ZUFsaWduZWQgPT09ICdib29sZWFuJywgJ2J5dGVBbGlnbmVkIG11c3QgYmUgYm9vbGVhbicpO1xuICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2Ygb3B0aW9ucy5wcmVmaXggPT09ICdib29sZWFuJyB8fCBvcHRpb25zLnByZWZpeCA9PT0gJ29wdGlvbmFsJywgJ3ByZWZpeCBtdXN0IGJlIGJvb2xlYW4gb3IgXCJvcHRpb25hbFwiJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX2FkZFJ1bGUoeyBuYW1lOiAnaGV4JywgYXJnczogeyBvcHRpb25zIH0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgb3B0aW9ucyB9KSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZSA9IG9wdGlvbnMucHJlZml4ID09PSAnb3B0aW9uYWwnID9cbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxzLmhleFJlZ2V4LndpdGhPcHRpb25hbFByZWZpeCA6XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHJlZml4ID09PSB0cnVlID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFscy5oZXhSZWdleC53aXRoUHJlZml4IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFscy5oZXhSZWdleC53aXRob3V0UHJlZml4O1xuICAgICAgICAgICAgICAgIGlmICghcmUudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5oZXgnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ieXRlQWxpZ25lZCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggJSAyICE9PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5oZXhBbGlnbicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBob3N0bmFtZToge1xuICAgICAgICAgICAgbWV0aG9kKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKCdob3N0bmFtZScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoRG9tYWluLmlzVmFsaWQodmFsdWUsIHsgbWluRG9tYWluU2VnbWVudHM6IDEgfSkgfHxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxzLmlwUmVnZXgudGVzdCh2YWx1ZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5ob3N0bmFtZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluc2Vuc2l0aXZlOiB7XG4gICAgICAgICAgICBtZXRob2QoKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX3NldEZsYWcoJ2luc2Vuc2l0aXZlJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXA6IHtcbiAgICAgICAgICAgIG1ldGhvZChvcHRpb25zID0ge30pIHtcblxuICAgICAgICAgICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsnY2lkcicsICd2ZXJzaW9uJ10pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgeyBjaWRyLCB2ZXJzaW9ucywgcmVnZXggfSA9IElwLnJlZ2V4KG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSBvcHRpb25zLnZlcnNpb24gPyB2ZXJzaW9ucyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX2FkZFJ1bGUoeyBuYW1lOiAnaXAnLCBhcmdzOiB7IG9wdGlvbnM6IHsgY2lkciwgdmVyc2lvbiB9IH0sIHJlZ2V4IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCB7IG9wdGlvbnMgfSwgeyByZWdleCB9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy5pcFZlcnNpb24nLCB7IHZhbHVlLCBjaWRyOiBvcHRpb25zLmNpZHIsIHZlcnNpb246IG9wdGlvbnMudmVyc2lvbiB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLmlwJywgeyB2YWx1ZSwgY2lkcjogb3B0aW9ucy5jaWRyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGlzb0RhdGU6IHtcbiAgICAgICAgICAgIG1ldGhvZCgpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSgnaXNvRGF0ZScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCB7IGVycm9yIH0pIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuaXNvRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcignc3RyaW5nLmlzb0RhdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc29EdXJhdGlvbjoge1xuICAgICAgICAgICAgbWV0aG9kKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJF9hZGRSdWxlKCdpc29EdXJhdGlvbicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmlzb0R1cmF0aW9uUmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdzdHJpbmcuaXNvRHVyYXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBsZW5ndGg6IHtcbiAgICAgICAgICAgIG1ldGhvZChsaW1pdCwgZW5jb2RpbmcpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMubGVuZ3RoKHRoaXMsICdsZW5ndGgnLCBsaW1pdCwgJz0nLCBlbmNvZGluZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgbGltaXQsIGVuY29kaW5nIH0sIHsgbmFtZSwgb3BlcmF0b3IsIGFyZ3MgfSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gZW5jb2RpbmcgPyBCdWZmZXIgJiYgQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUsIGVuY29kaW5nKSA6IHZhbHVlLmxlbmd0aDsgICAgICAvLyAkbGFiOmNvdmVyYWdlOmlnbm9yZSRcbiAgICAgICAgICAgICAgICBpZiAoQ29tbW9uLmNvbXBhcmUobGVuZ3RoLCBsaW1pdCwgb3BlcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLicgKyBuYW1lLCB7IGxpbWl0OiBhcmdzLmxpbWl0LCB2YWx1ZSwgZW5jb2RpbmcgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2xpbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IENvbW1vbi5saW1pdCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ211c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2VuY29kaW5nJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuXG4gICAgICAgIGxvd2VyY2FzZToge1xuICAgICAgICAgICAgbWV0aG9kKCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FzZSgnbG93ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtYXg6IHtcbiAgICAgICAgICAgIG1ldGhvZChsaW1pdCwgZW5jb2RpbmcpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMubGVuZ3RoKHRoaXMsICdtYXgnLCBsaW1pdCwgJzw9JywgZW5jb2RpbmcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFyZ3M6IFsnbGltaXQnLCAnZW5jb2RpbmcnXVxuICAgICAgICB9LFxuXG4gICAgICAgIG1pbjoge1xuICAgICAgICAgICAgbWV0aG9kKGxpbWl0LCBlbmNvZGluZykge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVybmFscy5sZW5ndGgodGhpcywgJ21pbicsIGxpbWl0LCAnPj0nLCBlbmNvZGluZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnczogWydsaW1pdCcsICdlbmNvZGluZyddXG4gICAgICAgIH0sXG5cbiAgICAgICAgbm9ybWFsaXplOiB7XG4gICAgICAgICAgICBtZXRob2QoZm9ybSA9ICdORkMnKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQoaW50ZXJuYWxzLm5vcm1hbGl6YXRpb25Gb3Jtcy5pbmNsdWRlcyhmb3JtKSwgJ25vcm1hbGl6YXRpb24gZm9ybSBtdXN0IGJlIG9uZSBvZiAnICsgaW50ZXJuYWxzLm5vcm1hbGl6YXRpb25Gb3Jtcy5qb2luKCcsICcpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdub3JtYWxpemUnLCBhcmdzOiB7IGZvcm0gfSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgeyBlcnJvciB9LCB7IGZvcm0gfSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2YWx1ZS5ub3JtYWxpemUoZm9ybSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcignc3RyaW5nLm5vcm1hbGl6ZScsIHsgdmFsdWUsIGZvcm0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udmVydDogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHBhdHRlcm46IHtcbiAgICAgICAgICAgIGFsaWFzOiAncmVnZXgnLFxuICAgICAgICAgICAgbWV0aG9kKHJlZ2V4LCBvcHRpb25zID0ge30pIHtcblxuICAgICAgICAgICAgICAgIEFzc2VydChyZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCwgJ3JlZ2V4IG11c3QgYmUgYSBSZWdFeHAnKTtcbiAgICAgICAgICAgICAgICBBc3NlcnQoIXJlZ2V4LmZsYWdzLmluY2x1ZGVzKCdnJykgJiYgIXJlZ2V4LmZsYWdzLmluY2x1ZGVzKCd5JyksICdyZWdleCBzaG91bGQgbm90IHVzZSBnbG9iYWwgb3Igc3RpY2t5IG1vZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHsgbmFtZTogb3B0aW9ucyB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENvbW1vbi5hc3NlcnRPcHRpb25zKG9wdGlvbnMsIFsnaW52ZXJ0JywgJ25hbWUnXSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSBbJ3N0cmluZy5wYXR0ZXJuJywgb3B0aW9ucy5pbnZlcnQgPyAnLmludmVydCcgOiAnJywgb3B0aW9ucy5uYW1lID8gJy5uYW1lJyA6ICcuYmFzZSddLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICdwYXR0ZXJuJywgYXJnczogeyByZWdleCwgb3B0aW9ucyB9LCBlcnJvckNvZGUgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgcmVnZXgsIG9wdGlvbnMgfSwgeyBlcnJvckNvZGUgfSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0dGVybk1hdGNoID0gcmVnZXgudGVzdCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGF0dGVybk1hdGNoIF4gb3B0aW9ucy5pbnZlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKGVycm9yQ29kZSwgeyBuYW1lOiBvcHRpb25zLm5hbWUsIHJlZ2V4LCB2YWx1ZSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcmdzOiBbJ3JlZ2V4JywgJ29wdGlvbnMnXSxcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVwbGFjZToge1xuICAgICAgICAgICAgbWV0aG9kKHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBuZXcgUmVnRXhwKEVzY2FwZVJlZ2V4KHBhdHRlcm4pLCAnZycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEFzc2VydChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwLCAncGF0dGVybiBtdXN0IGJlIGEgUmVnRXhwJyk7XG4gICAgICAgICAgICAgICAgQXNzZXJ0KHR5cGVvZiByZXBsYWNlbWVudCA9PT0gJ3N0cmluZycsICdyZXBsYWNlbWVudCBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9iai4kX3Rlcm1zLnJlcGxhY2VtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBvYmouJF90ZXJtcy5yZXBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvYmouJF90ZXJtcy5yZXBsYWNlbWVudHMucHVzaCh7IHBhdHRlcm4sIHJlcGxhY2VtZW50IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9rZW46IHtcbiAgICAgICAgICAgIG1ldGhvZCgpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSgndG9rZW4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWxpZGF0ZSh2YWx1ZSwgaGVscGVycykge1xuXG4gICAgICAgICAgICAgICAgaWYgKC9eXFx3KyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLnRva2VuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpbToge1xuICAgICAgICAgICAgbWV0aG9kKGVuYWJsZWQgPSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBBc3NlcnQodHlwZW9mIGVuYWJsZWQgPT09ICdib29sZWFuJywgJ2VuYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICd0cmltJywgYXJnczogeyBlbmFibGVkIH0gfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsaWRhdGUodmFsdWUsIGhlbHBlcnMsIHsgZW5hYmxlZCB9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWVuYWJsZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IHZhbHVlLnRyaW0oKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5lcnJvcignc3RyaW5nLnRyaW0nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb252ZXJ0OiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJ1bmNhdGU6IHtcbiAgICAgICAgICAgIG1ldGhvZChlbmFibGVkID0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgQXNzZXJ0KHR5cGVvZiBlbmFibGVkID09PSAnYm9vbGVhbicsICdlbmFibGVkIG11c3QgYmUgYSBib29sZWFuJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kX3NldEZsYWcoJ3RydW5jYXRlJywgZW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBwZXJjYXNlOiB7XG4gICAgICAgICAgICBtZXRob2QoKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXNlKCd1cHBlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVyaToge1xuICAgICAgICAgICAgbWV0aG9kKG9wdGlvbnMgPSB7fSkge1xuXG4gICAgICAgICAgICAgICAgQ29tbW9uLmFzc2VydE9wdGlvbnMob3B0aW9ucywgWydhbGxvd1JlbGF0aXZlJywgJ2FsbG93UXVlcnlTcXVhcmVCcmFja2V0cycsICdkb21haW4nLCAncmVsYXRpdmVPbmx5JywgJ3NjaGVtZScsICdlbmNvZGVVcmknXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgQ29tbW9uLmFzc2VydE9wdGlvbnMob3B0aW9ucy5kb21haW4sIFsnYWxsb3dGdWxseVF1YWxpZmllZCcsICdhbGxvd1VuaWNvZGUnLCAnbWF4RG9tYWluU2VnbWVudHMnLCAnbWluRG9tYWluU2VnbWVudHMnLCAndGxkcyddKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlZ2V4LCBzY2hlbWUgfSA9IFVyaS5yZWdleChvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkb21haW4gPSBvcHRpb25zLmRvbWFpbiA/IGludGVybmFscy5hZGRyZXNzT3B0aW9ucyhvcHRpb25zLmRvbWFpbikgOiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRfYWRkUnVsZSh7IG5hbWU6ICd1cmknLCBhcmdzOiB7IG9wdGlvbnMgfSwgcmVnZXgsIGRvbWFpbiwgc2NoZW1lIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCB7IG9wdGlvbnMgfSwgeyByZWdleCwgZG9tYWluLCBzY2hlbWUgfSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKFsnaHR0cDovJywgJ2h0dHBzOi8nXS5pbmNsdWRlcyh2YWx1ZSkpIHsgICAgICAgICAgICAvLyBzY2hlbWU6LyBpcyB0ZWNobmljYWxseSB2YWxpZCBidXQgbWFrZXMgbm8gc2Vuc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy51cmknKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2ggJiYgaGVscGVycy5wcmVmcy5jb252ZXJ0ICYmIG9wdGlvbnMuZW5jb2RlVXJpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVVUkkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMoZW5jb2RlZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlbmNvZGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWQgPSBtYXRjaFsxXSB8fCBtYXRjaFsyXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbWFpbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFvcHRpb25zLmFsbG93UmVsYXRpdmUgfHwgbWF0Y2hlZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFEb21haW4uaXNWYWxpZChtYXRjaGVkLCBkb21haW4pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWxwZXJzLmVycm9yKCdzdHJpbmcuZG9tYWluJywgeyB2YWx1ZTogbWF0Y2hlZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWxhdGl2ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy51cmlSZWxhdGl2ZU9ubHknKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zY2hlbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy51cmlDdXN0b21TY2hlbWUnLCB7IHNjaGVtZSwgdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXJyb3IoJ3N0cmluZy51cmknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYW5pZmVzdDoge1xuXG4gICAgICAgIGJ1aWxkKG9iaiwgZGVzYykge1xuXG4gICAgICAgICAgICBpZiAoZGVzYy5yZXBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgcGF0dGVybiwgcmVwbGFjZW1lbnQgfSBvZiBkZXNjLnJlcGxhY2VtZW50cykge1xuICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmoucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICdzdHJpbmcuYWxwaGFudW0nOiAne3sjbGFiZWx9fSBtdXN0IG9ubHkgY29udGFpbiBhbHBoYS1udW1lcmljIGNoYXJhY3RlcnMnLFxuICAgICAgICAnc3RyaW5nLmJhc2UnOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgc3RyaW5nJyxcbiAgICAgICAgJ3N0cmluZy5iYXNlNjQnOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgdmFsaWQgYmFzZTY0IHN0cmluZycsXG4gICAgICAgICdzdHJpbmcuY3JlZGl0Q2FyZCc6ICd7eyNsYWJlbH19IG11c3QgYmUgYSBjcmVkaXQgY2FyZCcsXG4gICAgICAgICdzdHJpbmcuZGF0YVVyaSc6ICd7eyNsYWJlbH19IG11c3QgYmUgYSB2YWxpZCBkYXRhVXJpIHN0cmluZycsXG4gICAgICAgICdzdHJpbmcuZG9tYWluJzogJ3t7I2xhYmVsfX0gbXVzdCBjb250YWluIGEgdmFsaWQgZG9tYWluIG5hbWUnLFxuICAgICAgICAnc3RyaW5nLmVtYWlsJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBhIHZhbGlkIGVtYWlsJyxcbiAgICAgICAgJ3N0cmluZy5lbXB0eSc6ICd7eyNsYWJlbH19IGlzIG5vdCBhbGxvd2VkIHRvIGJlIGVtcHR5JyxcbiAgICAgICAgJ3N0cmluZy5ndWlkJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBhIHZhbGlkIEdVSUQnLFxuICAgICAgICAnc3RyaW5nLmhleCc6ICd7eyNsYWJlbH19IG11c3Qgb25seSBjb250YWluIGhleGFkZWNpbWFsIGNoYXJhY3RlcnMnLFxuICAgICAgICAnc3RyaW5nLmhleEFsaWduJzogJ3t7I2xhYmVsfX0gaGV4IGRlY29kZWQgcmVwcmVzZW50YXRpb24gbXVzdCBiZSBieXRlIGFsaWduZWQnLFxuICAgICAgICAnc3RyaW5nLmhvc3RuYW1lJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBhIHZhbGlkIGhvc3RuYW1lJyxcbiAgICAgICAgJ3N0cmluZy5pcCc6ICd7eyNsYWJlbH19IG11c3QgYmUgYSB2YWxpZCBpcCBhZGRyZXNzIHdpdGggYSB7eyNjaWRyfX0gQ0lEUicsXG4gICAgICAgICdzdHJpbmcuaXBWZXJzaW9uJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSBhIHZhbGlkIGlwIGFkZHJlc3Mgb2Ygb25lIG9mIHRoZSBmb2xsb3dpbmcgdmVyc2lvbnMge3sjdmVyc2lvbn19IHdpdGggYSB7eyNjaWRyfX0gQ0lEUicsXG4gICAgICAgICdzdHJpbmcuaXNvRGF0ZSc6ICd7eyNsYWJlbH19IG11c3QgYmUgaW4gaXNvIGZvcm1hdCcsXG4gICAgICAgICdzdHJpbmcuaXNvRHVyYXRpb24nOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgdmFsaWQgSVNPIDg2MDEgZHVyYXRpb24nLFxuICAgICAgICAnc3RyaW5nLmxlbmd0aCc6ICd7eyNsYWJlbH19IGxlbmd0aCBtdXN0IGJlIHt7I2xpbWl0fX0gY2hhcmFjdGVycyBsb25nJyxcbiAgICAgICAgJ3N0cmluZy5sb3dlcmNhc2UnOiAne3sjbGFiZWx9fSBtdXN0IG9ubHkgY29udGFpbiBsb3dlcmNhc2UgY2hhcmFjdGVycycsXG4gICAgICAgICdzdHJpbmcubWF4JzogJ3t7I2xhYmVsfX0gbGVuZ3RoIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHt7I2xpbWl0fX0gY2hhcmFjdGVycyBsb25nJyxcbiAgICAgICAgJ3N0cmluZy5taW4nOiAne3sjbGFiZWx9fSBsZW5ndGggbXVzdCBiZSBhdCBsZWFzdCB7eyNsaW1pdH19IGNoYXJhY3RlcnMgbG9uZycsXG4gICAgICAgICdzdHJpbmcubm9ybWFsaXplJzogJ3t7I2xhYmVsfX0gbXVzdCBiZSB1bmljb2RlIG5vcm1hbGl6ZWQgaW4gdGhlIHt7I2Zvcm19fSBmb3JtJyxcbiAgICAgICAgJ3N0cmluZy50b2tlbic6ICd7eyNsYWJlbH19IG11c3Qgb25seSBjb250YWluIGFscGhhLW51bWVyaWMgYW5kIHVuZGVyc2NvcmUgY2hhcmFjdGVycycsXG4gICAgICAgICdzdHJpbmcucGF0dGVybi5iYXNlJzogJ3t7I2xhYmVsfX0gd2l0aCB2YWx1ZSB7OlsuXX0gZmFpbHMgdG8gbWF0Y2ggdGhlIHJlcXVpcmVkIHBhdHRlcm46IHt7I3JlZ2V4fX0nLFxuICAgICAgICAnc3RyaW5nLnBhdHRlcm4ubmFtZSc6ICd7eyNsYWJlbH19IHdpdGggdmFsdWUgezpbLl19IGZhaWxzIHRvIG1hdGNoIHRoZSB7eyNuYW1lfX0gcGF0dGVybicsXG4gICAgICAgICdzdHJpbmcucGF0dGVybi5pbnZlcnQuYmFzZSc6ICd7eyNsYWJlbH19IHdpdGggdmFsdWUgezpbLl19IG1hdGNoZXMgdGhlIGludmVydGVkIHBhdHRlcm46IHt7I3JlZ2V4fX0nLFxuICAgICAgICAnc3RyaW5nLnBhdHRlcm4uaW52ZXJ0Lm5hbWUnOiAne3sjbGFiZWx9fSB3aXRoIHZhbHVlIHs6Wy5dfSBtYXRjaGVzIHRoZSBpbnZlcnRlZCB7eyNuYW1lfX0gcGF0dGVybicsXG4gICAgICAgICdzdHJpbmcudHJpbSc6ICd7eyNsYWJlbH19IG11c3Qgbm90IGhhdmUgbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlJyxcbiAgICAgICAgJ3N0cmluZy51cmknOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgdmFsaWQgdXJpJyxcbiAgICAgICAgJ3N0cmluZy51cmlDdXN0b21TY2hlbWUnOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgdmFsaWQgdXJpIHdpdGggYSBzY2hlbWUgbWF0Y2hpbmcgdGhlIHt7I3NjaGVtZX19IHBhdHRlcm4nLFxuICAgICAgICAnc3RyaW5nLnVyaVJlbGF0aXZlT25seSc6ICd7eyNsYWJlbH19IG11c3QgYmUgYSB2YWxpZCByZWxhdGl2ZSB1cmknLFxuICAgICAgICAnc3RyaW5nLnVwcGVyY2FzZSc6ICd7eyNsYWJlbH19IG11c3Qgb25seSBjb250YWluIHVwcGVyY2FzZSBjaGFyYWN0ZXJzJ1xuICAgIH1cbn0pO1xuXG5cbi8vIEhlbHBlcnNcblxuaW50ZXJuYWxzLmFkZHJlc3NPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxzLnRsZHMgfHwgb3B0aW9uczsgICAgICAvLyAkbGFiOmNvdmVyYWdlOmlnbm9yZSRcbiAgICB9XG5cbiAgICAvLyBtaW5Eb21haW5TZWdtZW50c1xuXG4gICAgQXNzZXJ0KG9wdGlvbnMubWluRG9tYWluU2VnbWVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBOdW1iZXIuaXNTYWZlSW50ZWdlcihvcHRpb25zLm1pbkRvbWFpblNlZ21lbnRzKSAmJiBvcHRpb25zLm1pbkRvbWFpblNlZ21lbnRzID4gMCwgJ21pbkRvbWFpblNlZ21lbnRzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG5cbiAgICAvLyBtYXhEb21haW5TZWdtZW50c1xuXG4gICAgQXNzZXJ0KG9wdGlvbnMubWF4RG9tYWluU2VnbWVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBOdW1iZXIuaXNTYWZlSW50ZWdlcihvcHRpb25zLm1heERvbWFpblNlZ21lbnRzKSAmJiBvcHRpb25zLm1heERvbWFpblNlZ21lbnRzID4gMCwgJ21heERvbWFpblNlZ21lbnRzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG5cbiAgICAvLyB0bGRzXG5cbiAgICBpZiAob3B0aW9ucy50bGRzID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50bGRzID09PSB0cnVlIHx8XG4gICAgICAgIG9wdGlvbnMudGxkcyA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgQXNzZXJ0KGludGVybmFscy50bGRzLCAnQnVpbHQtaW4gVExEIGxpc3QgZGlzYWJsZWQnKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIGludGVybmFscy50bGRzKTtcbiAgICB9XG5cbiAgICBBc3NlcnQodHlwZW9mIG9wdGlvbnMudGxkcyA9PT0gJ29iamVjdCcsICd0bGRzIG11c3QgYmUgdHJ1ZSwgZmFsc2UsIG9yIGFuIG9iamVjdCcpO1xuXG4gICAgY29uc3QgZGVueSA9IG9wdGlvbnMudGxkcy5kZW55O1xuICAgIGlmIChkZW55KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlbnkpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyB0bGRzOiB7IGRlbnk6IG5ldyBTZXQoZGVueSkgfSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEFzc2VydChvcHRpb25zLnRsZHMuZGVueSBpbnN0YW5jZW9mIFNldCwgJ3RsZHMuZGVueSBtdXN0IGJlIGFuIGFycmF5LCBTZXQsIG9yIGJvb2xlYW4nKTtcbiAgICAgICAgQXNzZXJ0KCFvcHRpb25zLnRsZHMuYWxsb3csICdDYW5ub3Qgc3BlY2lmeSBib3RoIHRsZHMuYWxsb3cgYW5kIHRsZHMuZGVueSBsaXN0cycpO1xuICAgICAgICBpbnRlcm5hbHMudmFsaWRhdGVUbGRzKG9wdGlvbnMudGxkcy5kZW55LCAndGxkcy5kZW55Jyk7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGFsbG93ID0gb3B0aW9ucy50bGRzLmFsbG93O1xuICAgIGlmICghYWxsb3cpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93ID09PSB0cnVlKSB7XG4gICAgICAgIEFzc2VydChpbnRlcm5hbHMudGxkcywgJ0J1aWx0LWluIFRMRCBsaXN0IGRpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBpbnRlcm5hbHMudGxkcyk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxsb3cpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IHRsZHM6IHsgYWxsb3c6IG5ldyBTZXQoYWxsb3cpIH0gfSk7XG4gICAgfVxuXG4gICAgQXNzZXJ0KG9wdGlvbnMudGxkcy5hbGxvdyBpbnN0YW5jZW9mIFNldCwgJ3RsZHMuYWxsb3cgbXVzdCBiZSBhbiBhcnJheSwgU2V0LCBvciBib29sZWFuJyk7XG4gICAgaW50ZXJuYWxzLnZhbGlkYXRlVGxkcyhvcHRpb25zLnRsZHMuYWxsb3csICd0bGRzLmFsbG93Jyk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5cbmludGVybmFscy52YWxpZGF0ZVRsZHMgPSBmdW5jdGlvbiAoc2V0LCBzb3VyY2UpIHtcblxuICAgIGZvciAoY29uc3QgdGxkIG9mIHNldCkge1xuICAgICAgICBBc3NlcnQoRG9tYWluLmlzVmFsaWQodGxkLCB7IG1pbkRvbWFpblNlZ21lbnRzOiAxLCBtYXhEb21haW5TZWdtZW50czogMSB9KSwgYCR7c291cmNlfSBtdXN0IGNvbnRhaW4gdmFsaWQgdG9wIGxldmVsIGRvbWFpbiBuYW1lc2ApO1xuICAgIH1cbn07XG5cblxuaW50ZXJuYWxzLmlzb0RhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgIGlmICghQ29tbW9uLmlzSXNvRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKC8uKlQuKlsrLV1cXGRcXGQkLy50ZXN0KHZhbHVlKSkgeyAgICAgICAgICAgICAvLyBBZGQgbWlzc2luZyB0cmFpbGluZyB6ZXJvcyB0byB0aW1lc2hpZnRcbiAgICAgICAgdmFsdWUgKz0gJzAwJztcbiAgICB9XG5cbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIGlmIChpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn07XG5cblxuaW50ZXJuYWxzLmxlbmd0aCA9IGZ1bmN0aW9uIChzY2hlbWEsIG5hbWUsIGxpbWl0LCBvcGVyYXRvciwgZW5jb2RpbmcpIHtcblxuICAgIEFzc2VydCghZW5jb2RpbmcgfHwgQnVmZmVyICYmIEJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSwgJ0ludmFsaWQgZW5jb2Rpbmc6JywgZW5jb2RpbmcpOyAgICAgIC8vICRsYWI6Y292ZXJhZ2U6aWdub3JlJFxuXG4gICAgcmV0dXJuIHNjaGVtYS4kX2FkZFJ1bGUoeyBuYW1lLCBtZXRob2Q6ICdsZW5ndGgnLCBhcmdzOiB7IGxpbWl0LCBlbmNvZGluZyB9LCBvcGVyYXRvciB9KTtcbn07XG4iXSwibmFtZXMiOlsiQXNzZXJ0IiwicmVxdWlyZSIsIkRvbWFpbiIsIkVtYWlsIiwiSXAiLCJFc2NhcGVSZWdleCIsIlRsZHMiLCJVcmkiLCJBbnkiLCJDb21tb24iLCJpbnRlcm5hbHMiLCJ0bGRzIiwiU2V0IiwiYWxsb3ciLCJkZW55IiwiYmFzZTY0UmVnZXgiLCJ0cnVlIiwiZmFsc2UiLCJkYXRhVXJpUmVnZXgiLCJoZXhSZWdleCIsIndpdGhQcmVmaXgiLCJ3aXRoT3B0aW9uYWxQcmVmaXgiLCJ3aXRob3V0UHJlZml4IiwiaXBSZWdleCIsInJlZ2V4IiwiY2lkciIsImlzb0R1cmF0aW9uUmVnZXgiLCJndWlkQnJhY2tldHMiLCJndWlkVmVyc2lvbnMiLCJ1dWlkdjEiLCJ1dWlkdjIiLCJ1dWlkdjMiLCJ1dWlkdjQiLCJ1dWlkdjUiLCJ1dWlkdjYiLCJ1dWlkdjciLCJ1dWlkdjgiLCJndWlkU2VwYXJhdG9ycyIsInVuZGVmaW5lZCIsIm5vcm1hbGl6YXRpb25Gb3JtcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJleHRlbmQiLCJ0eXBlIiwiZmxhZ3MiLCJpbnNlbnNpdGl2ZSIsImRlZmF1bHQiLCJ0cnVuY2F0ZSIsInRlcm1zIiwicmVwbGFjZW1lbnRzIiwiaW5pdCIsImNvZXJjZSIsImZyb20iLCJtZXRob2QiLCJ2YWx1ZSIsInNjaGVtYSIsInN0YXRlIiwicHJlZnMiLCJub3JtYWxpemUiLCIkX2dldFJ1bGUiLCJhcmdzIiwiZm9ybSIsImNhc2luZyIsImRpcmVjdGlvbiIsInRvTG9jYWxlVXBwZXJDYXNlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJ0cmltIiwiZW5hYmxlZCIsIiRfdGVybXMiLCJyZXBsYWNlbWVudCIsInJlcGxhY2UiLCJwYXR0ZXJuIiwiaGV4Iiwib3B0aW9ucyIsImJ5dGVBbGlnbmVkIiwibGVuZ3RoIiwiaXNvIiwiaXNvRGF0ZSIsIl9mbGFncyIsInJ1bGUiLCJsaW1pdCIsImlzUmVzb2x2YWJsZSIsInJlc29sdmUiLCJlcnJvcnMiLCIkX2NyZWF0ZUVycm9yIiwicmVmIiwiYXJnIiwicmVhc29uIiwic2xpY2UiLCJ2YWxpZGF0ZSIsImVycm9yIiwibWluIiwicnVsZXMiLCJhbHBoYW51bSIsIiRfYWRkUnVsZSIsImhlbHBlcnMiLCJ0ZXN0IiwiYmFzZTY0IiwiYXNzZXJ0T3B0aW9ucyIsInVybFNhZmUiLCJwYWRkaW5nUmVxdWlyZWQiLCJuYW1lIiwiY2FzZSIsImluY2x1ZGVzIiwiY29udmVydCIsImNyZWRpdENhcmQiLCJpIiwic3VtIiwibXVsIiwiY2hhciIsImNoYXJBdCIsImRhdGFVcmkiLCJtYXRjaGVzIiwibWF0Y2giLCJiYXNlNjRyZWdleCIsImRvbWFpbiIsImFkZHJlc3MiLCJhZGRyZXNzT3B0aW9ucyIsImlzVmFsaWQiLCJlbWFpbCIsIm11bHRpcGxlIiwiUmVnRXhwIiwic2VwYXJhdG9yIiwiZW1haWxzIiwic3BsaXQiLCJpbnZhbGlkcyIsInB1c2giLCJndWlkIiwiYWxpYXMiLCJ2ZXJzaW9uTnVtYmVycyIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImNvbmNhdCIsInNldCIsInZlcnNpb25OdW1iZXIiLCJ0b0xvd2VyQ2FzZSIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiaGFzIiwiYWRkIiwicmVzdWx0cyIsImV4ZWMiLCJwcmVmaXgiLCJyZSIsImhvc3RuYW1lIiwibWluRG9tYWluU2VnbWVudHMiLCIkX3NldEZsYWciLCJpcCIsImlzb0R1cmF0aW9uIiwiZW5jb2RpbmciLCJvcGVyYXRvciIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJjb21wYXJlIiwiYXNzZXJ0IiwibWVzc2FnZSIsImxvd2VyY2FzZSIsIm1heCIsImVycm9yQ29kZSIsImludmVydCIsInBhdHRlcm5NYXRjaCIsIm11bHRpIiwib2JqIiwiY2xvbmUiLCJ0b2tlbiIsInVwcGVyY2FzZSIsInVyaSIsInNjaGVtZSIsImVuY29kZVVyaSIsImVuY29kZWQiLCJlbmNvZGVVUkkiLCJtYXRjaGVkIiwiYWxsb3dSZWxhdGl2ZSIsInJlbGF0aXZlT25seSIsIm1hbmlmZXN0IiwiYnVpbGQiLCJkZXNjIiwibWVzc2FnZXMiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwibWF4RG9tYWluU2VnbWVudHMiLCJhc3NpZ24iLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZVRsZHMiLCJzb3VyY2UiLCJ0bGQiLCJpc0lzb0RhdGUiLCJkYXRlIiwiRGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsInRvSVNPU3RyaW5nIiwiaXNFbmNvZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/types/symbol.js":
/*!**********************************************!*\
  !*** ./node_modules/joi/lib/types/symbol.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Any = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/joi/lib/types/any.js\");\nconst internals = {};\ninternals.Map = class extends Map {\n    slice() {\n        return new internals.Map(this);\n    }\n};\nmodule.exports = Any.extend({\n    type: \"symbol\",\n    terms: {\n        map: {\n            init: new internals.Map()\n        }\n    },\n    coerce: {\n        method (value, { schema, error }) {\n            const lookup = schema.$_terms.map.get(value);\n            if (lookup) {\n                value = lookup;\n            }\n            if (!schema._flags.only || typeof value === \"symbol\") {\n                return {\n                    value\n                };\n            }\n            return {\n                value,\n                errors: error(\"symbol.map\", {\n                    map: schema.$_terms.map\n                })\n            };\n        }\n    },\n    validate (value, { error }) {\n        if (typeof value !== \"symbol\") {\n            return {\n                value,\n                errors: error(\"symbol.base\")\n            };\n        }\n    },\n    rules: {\n        map: {\n            method (iterable) {\n                if (iterable && !iterable[Symbol.iterator] && typeof iterable === \"object\") {\n                    iterable = Object.entries(iterable);\n                }\n                Assert(iterable && iterable[Symbol.iterator], \"Iterable must be an iterable or object\");\n                const obj = this.clone();\n                const symbols = [];\n                for (const entry of iterable){\n                    Assert(entry && entry[Symbol.iterator], \"Entry must be an iterable\");\n                    const [key, value] = entry;\n                    Assert(typeof key !== \"object\" && typeof key !== \"function\" && typeof key !== \"symbol\", \"Key must not be of type object, function, or Symbol\");\n                    Assert(typeof value === \"symbol\", \"Value must be a Symbol\");\n                    obj.$_terms.map.set(key, value);\n                    symbols.push(value);\n                }\n                return obj.valid(...symbols);\n            }\n        }\n    },\n    manifest: {\n        build (obj, desc) {\n            if (desc.map) {\n                obj = obj.map(desc.map);\n            }\n            return obj;\n        }\n    },\n    messages: {\n        \"symbol.base\": \"{{#label}} must be a symbol\",\n        \"symbol.map\": \"{{#label}} must be one of {{#map}}\"\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi90eXBlcy9zeW1ib2wuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QixNQUFNQyxNQUFNRCxtQkFBT0EsQ0FBQztBQUdwQixNQUFNRSxZQUFZLENBQUM7QUFHbkJBLFVBQVVDLEdBQUcsR0FBRyxjQUFjQTtJQUUxQkMsUUFBUTtRQUVKLE9BQU8sSUFBSUYsVUFBVUMsR0FBRyxDQUFDLElBQUk7SUFDakM7QUFDSjtBQUdBRSxPQUFPQyxPQUFPLEdBQUdMLElBQUlNLE1BQU0sQ0FBQztJQUV4QkMsTUFBTTtJQUVOQyxPQUFPO1FBRUhDLEtBQUs7WUFBRUMsTUFBTSxJQUFJVCxVQUFVQyxHQUFHO1FBQUc7SUFDckM7SUFFQVMsUUFBUTtRQUNKQyxRQUFPQyxLQUFLLEVBQUUsRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUU7WUFFM0IsTUFBTUMsU0FBU0YsT0FBT0csT0FBTyxDQUFDUixHQUFHLENBQUNTLEdBQUcsQ0FBQ0w7WUFDdEMsSUFBSUcsUUFBUTtnQkFDUkgsUUFBUUc7WUFDWjtZQUVBLElBQUksQ0FBQ0YsT0FBT0ssTUFBTSxDQUFDQyxJQUFJLElBQ25CLE9BQU9QLFVBQVUsVUFBVTtnQkFFM0IsT0FBTztvQkFBRUE7Z0JBQU07WUFDbkI7WUFFQSxPQUFPO2dCQUFFQTtnQkFBT1EsUUFBUU4sTUFBTSxjQUFjO29CQUFFTixLQUFLSyxPQUFPRyxPQUFPLENBQUNSLEdBQUc7Z0JBQUM7WUFBRztRQUM3RTtJQUNKO0lBRUFhLFVBQVNULEtBQUssRUFBRSxFQUFFRSxLQUFLLEVBQUU7UUFFckIsSUFBSSxPQUFPRixVQUFVLFVBQVU7WUFDM0IsT0FBTztnQkFBRUE7Z0JBQU9RLFFBQVFOLE1BQU07WUFBZTtRQUNqRDtJQUNKO0lBRUFRLE9BQU87UUFDSGQsS0FBSztZQUNERyxRQUFPWSxRQUFRO2dCQUVYLElBQUlBLFlBQ0EsQ0FBQ0EsUUFBUSxDQUFDQyxPQUFPQyxRQUFRLENBQUMsSUFDMUIsT0FBT0YsYUFBYSxVQUFVO29CQUU5QkEsV0FBV0csT0FBT0MsT0FBTyxDQUFDSjtnQkFDOUI7Z0JBRUExQixPQUFPMEIsWUFBWUEsUUFBUSxDQUFDQyxPQUFPQyxRQUFRLENBQUMsRUFBRTtnQkFFOUMsTUFBTUcsTUFBTSxJQUFJLENBQUNDLEtBQUs7Z0JBRXRCLE1BQU1DLFVBQVUsRUFBRTtnQkFDbEIsS0FBSyxNQUFNQyxTQUFTUixTQUFVO29CQUMxQjFCLE9BQU9rQyxTQUFTQSxLQUFLLENBQUNQLE9BQU9DLFFBQVEsQ0FBQyxFQUFFO29CQUN4QyxNQUFNLENBQUNPLEtBQUtwQixNQUFNLEdBQUdtQjtvQkFFckJsQyxPQUFPLE9BQU9tQyxRQUFRLFlBQVksT0FBT0EsUUFBUSxjQUFjLE9BQU9BLFFBQVEsVUFBVTtvQkFDeEZuQyxPQUFPLE9BQU9lLFVBQVUsVUFBVTtvQkFFbENnQixJQUFJWixPQUFPLENBQUNSLEdBQUcsQ0FBQ3lCLEdBQUcsQ0FBQ0QsS0FBS3BCO29CQUN6QmtCLFFBQVFJLElBQUksQ0FBQ3RCO2dCQUNqQjtnQkFFQSxPQUFPZ0IsSUFBSU8sS0FBSyxJQUFJTDtZQUN4QjtRQUNKO0lBQ0o7SUFFQU0sVUFBVTtRQUVOQyxPQUFNVCxHQUFHLEVBQUVVLElBQUk7WUFFWCxJQUFJQSxLQUFLOUIsR0FBRyxFQUFFO2dCQUNWb0IsTUFBTUEsSUFBSXBCLEdBQUcsQ0FBQzhCLEtBQUs5QixHQUFHO1lBQzFCO1lBRUEsT0FBT29CO1FBQ1g7SUFDSjtJQUVBVyxVQUFVO1FBQ04sZUFBZTtRQUNmLGNBQWM7SUFDbEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc3RlaGVyby8uL25vZGVfbW9kdWxlcy9qb2kvbGliL3R5cGVzL3N5bWJvbC5qcz8wZWY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXJ0ID0gcmVxdWlyZSgnQGhhcGkvaG9lay9saWIvYXNzZXJ0Jyk7XG5cbmNvbnN0IEFueSA9IHJlcXVpcmUoJy4vYW55Jyk7XG5cblxuY29uc3QgaW50ZXJuYWxzID0ge307XG5cblxuaW50ZXJuYWxzLk1hcCA9IGNsYXNzIGV4dGVuZHMgTWFwIHtcblxuICAgIHNsaWNlKCkge1xuXG4gICAgICAgIHJldHVybiBuZXcgaW50ZXJuYWxzLk1hcCh0aGlzKTtcbiAgICB9XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQW55LmV4dGVuZCh7XG5cbiAgICB0eXBlOiAnc3ltYm9sJyxcblxuICAgIHRlcm1zOiB7XG5cbiAgICAgICAgbWFwOiB7IGluaXQ6IG5ldyBpbnRlcm5hbHMuTWFwKCkgfVxuICAgIH0sXG5cbiAgICBjb2VyY2U6IHtcbiAgICAgICAgbWV0aG9kKHZhbHVlLCB7IHNjaGVtYSwgZXJyb3IgfSkge1xuXG4gICAgICAgICAgICBjb25zdCBsb29rdXAgPSBzY2hlbWEuJF90ZXJtcy5tYXAuZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChsb29rdXApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxvb2t1cDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzY2hlbWEuX2ZsYWdzLm9ubHkgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZSwgZXJyb3JzOiBlcnJvcignc3ltYm9sLm1hcCcsIHsgbWFwOiBzY2hlbWEuJF90ZXJtcy5tYXAgfSkgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZSh2YWx1ZSwgeyBlcnJvciB9KSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlLCBlcnJvcnM6IGVycm9yKCdzeW1ib2wuYmFzZScpIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcnVsZXM6IHtcbiAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICBtZXRob2QoaXRlcmFibGUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaXRlcmFibGUgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QuZW50cmllcyhpdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQXNzZXJ0KGl0ZXJhYmxlICYmIGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0sICdJdGVyYWJsZSBtdXN0IGJlIGFuIGl0ZXJhYmxlIG9yIG9iamVjdCcpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ltYm9scyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgaXRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgQXNzZXJ0KGVudHJ5ICYmIGVudHJ5W1N5bWJvbC5pdGVyYXRvcl0sICdFbnRyeSBtdXN0IGJlIGFuIGl0ZXJhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5O1xuXG4gICAgICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2Yga2V5ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBrZXkgIT09ICdzeW1ib2wnLCAnS2V5IG11c3Qgbm90IGJlIG9mIHR5cGUgb2JqZWN0LCBmdW5jdGlvbiwgb3IgU3ltYm9sJyk7XG4gICAgICAgICAgICAgICAgICAgIEFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnLCAnVmFsdWUgbXVzdCBiZSBhIFN5bWJvbCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIG9iai4kX3Rlcm1zLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iai52YWxpZCguLi5zeW1ib2xzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYW5pZmVzdDoge1xuXG4gICAgICAgIGJ1aWxkKG9iaiwgZGVzYykge1xuXG4gICAgICAgICAgICBpZiAoZGVzYy5tYXApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBvYmoubWFwKGRlc2MubWFwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXNzYWdlczoge1xuICAgICAgICAnc3ltYm9sLmJhc2UnOiAne3sjbGFiZWx9fSBtdXN0IGJlIGEgc3ltYm9sJyxcbiAgICAgICAgJ3N5bWJvbC5tYXAnOiAne3sjbGFiZWx9fSBtdXN0IGJlIG9uZSBvZiB7eyNtYXB9fSdcbiAgICB9XG59KTtcbiJdLCJuYW1lcyI6WyJBc3NlcnQiLCJyZXF1aXJlIiwiQW55IiwiaW50ZXJuYWxzIiwiTWFwIiwic2xpY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXh0ZW5kIiwidHlwZSIsInRlcm1zIiwibWFwIiwiaW5pdCIsImNvZXJjZSIsIm1ldGhvZCIsInZhbHVlIiwic2NoZW1hIiwiZXJyb3IiLCJsb29rdXAiLCIkX3Rlcm1zIiwiZ2V0IiwiX2ZsYWdzIiwib25seSIsImVycm9ycyIsInZhbGlkYXRlIiwicnVsZXMiLCJpdGVyYWJsZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiZW50cmllcyIsIm9iaiIsImNsb25lIiwic3ltYm9scyIsImVudHJ5Iiwia2V5Iiwic2V0IiwicHVzaCIsInZhbGlkIiwibWFuaWZlc3QiLCJidWlsZCIsImRlc2MiLCJtZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/types/symbol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/validator.js":
/*!*******************************************!*\
  !*** ./node_modules/joi/lib/validator.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst Clone = __webpack_require__(/*! @hapi/hoek/lib/clone */ \"(rsc)/./node_modules/@hapi/hoek/lib/clone.js\");\nconst Ignore = __webpack_require__(/*! @hapi/hoek/lib/ignore */ \"(rsc)/./node_modules/@hapi/hoek/lib/ignore.js\");\nconst Reach = __webpack_require__(/*! @hapi/hoek/lib/reach */ \"(rsc)/./node_modules/@hapi/hoek/lib/reach.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/joi/lib/errors.js\");\nconst State = __webpack_require__(/*! ./state */ \"(rsc)/./node_modules/joi/lib/state.js\");\nconst internals = {\n    result: Symbol(\"result\")\n};\nexports.entry = function(value, schema, prefs) {\n    let settings = Common.defaults;\n    if (prefs) {\n        Assert(prefs.warnings === undefined, \"Cannot override warnings preference in synchronous validation\");\n        Assert(prefs.artifacts === undefined, \"Cannot override artifacts preference in synchronous validation\");\n        settings = Common.preferences(Common.defaults, prefs);\n    }\n    const result = internals.entry(value, schema, settings);\n    Assert(!result.mainstay.externals.length, \"Schema with external rules must use validateAsync()\");\n    const outcome = {\n        value: result.value\n    };\n    if (result.error) {\n        outcome.error = result.error;\n    }\n    if (result.mainstay.warnings.length) {\n        outcome.warning = Errors.details(result.mainstay.warnings);\n    }\n    if (result.mainstay.debug) {\n        outcome.debug = result.mainstay.debug;\n    }\n    if (result.mainstay.artifacts) {\n        outcome.artifacts = result.mainstay.artifacts;\n    }\n    return outcome;\n};\nexports.entryAsync = async function(value, schema, prefs) {\n    let settings = Common.defaults;\n    if (prefs) {\n        settings = Common.preferences(Common.defaults, prefs);\n    }\n    const result = internals.entry(value, schema, settings);\n    const mainstay = result.mainstay;\n    if (result.error) {\n        if (mainstay.debug) {\n            result.error.debug = mainstay.debug;\n        }\n        throw result.error;\n    }\n    if (mainstay.externals.length) {\n        let root = result.value;\n        const errors = [];\n        for (const external of mainstay.externals){\n            const path = external.state.path;\n            const linked = external.schema.type === \"link\" ? mainstay.links.get(external.schema) : null;\n            let node = root;\n            let key;\n            let parent;\n            const ancestors = path.length ? [\n                root\n            ] : [];\n            const original = path.length ? Reach(value, path) : value;\n            if (path.length) {\n                key = path[path.length - 1];\n                let current = root;\n                for (const segment of path.slice(0, -1)){\n                    current = current[segment];\n                    ancestors.unshift(current);\n                }\n                parent = ancestors[0];\n                node = parent[key];\n            }\n            try {\n                const createError = (code, local)=>(linked || external.schema).$_createError(code, node, local, external.state, settings);\n                const output = await external.method(node, {\n                    schema: external.schema,\n                    linked,\n                    state: external.state,\n                    prefs,\n                    original,\n                    error: createError,\n                    errorsArray: internals.errorsArray,\n                    warn: (code, local)=>mainstay.warnings.push((linked || external.schema).$_createError(code, node, local, external.state, settings)),\n                    message: (messages, local)=>(linked || external.schema).$_createError(\"external\", node, local, external.state, settings, {\n                            messages\n                        })\n                });\n                if (output === undefined || output === node) {\n                    continue;\n                }\n                if (output instanceof Errors.Report) {\n                    mainstay.tracer.log(external.schema, external.state, \"rule\", \"external\", \"error\");\n                    errors.push(output);\n                    if (settings.abortEarly) {\n                        break;\n                    }\n                    continue;\n                }\n                if (Array.isArray(output) && output[Common.symbols.errors]) {\n                    mainstay.tracer.log(external.schema, external.state, \"rule\", \"external\", \"error\");\n                    errors.push(...output);\n                    if (settings.abortEarly) {\n                        break;\n                    }\n                    continue;\n                }\n                if (parent) {\n                    mainstay.tracer.value(external.state, \"rule\", node, output, \"external\");\n                    parent[key] = output;\n                } else {\n                    mainstay.tracer.value(external.state, \"rule\", root, output, \"external\");\n                    root = output;\n                }\n            } catch (err) {\n                if (settings.errors.label) {\n                    err.message += ` (${external.label})`; // Change message to include path\n                }\n                throw err;\n            }\n        }\n        result.value = root;\n        if (errors.length) {\n            result.error = Errors.process(errors, value, settings);\n            if (mainstay.debug) {\n                result.error.debug = mainstay.debug;\n            }\n            throw result.error;\n        }\n    }\n    if (!settings.warnings && !settings.debug && !settings.artifacts) {\n        return result.value;\n    }\n    const outcome = {\n        value: result.value\n    };\n    if (mainstay.warnings.length) {\n        outcome.warning = Errors.details(mainstay.warnings);\n    }\n    if (mainstay.debug) {\n        outcome.debug = mainstay.debug;\n    }\n    if (mainstay.artifacts) {\n        outcome.artifacts = mainstay.artifacts;\n    }\n    return outcome;\n};\ninternals.Mainstay = class {\n    constructor(tracer, debug, links){\n        this.externals = [];\n        this.warnings = [];\n        this.tracer = tracer;\n        this.debug = debug;\n        this.links = links;\n        this.shadow = null;\n        this.artifacts = null;\n        this._snapshots = [];\n    }\n    snapshot() {\n        this._snapshots.push({\n            externals: this.externals.slice(),\n            warnings: this.warnings.slice()\n        });\n    }\n    restore() {\n        const snapshot = this._snapshots.pop();\n        this.externals = snapshot.externals;\n        this.warnings = snapshot.warnings;\n    }\n    commit() {\n        this._snapshots.pop();\n    }\n};\ninternals.entry = function(value, schema, prefs) {\n    // Prepare state\n    const { tracer, cleanup } = internals.tracer(schema, prefs);\n    const debug = prefs.debug ? [] : null;\n    const links = schema._ids._schemaChain ? new Map() : null;\n    const mainstay = new internals.Mainstay(tracer, debug, links);\n    const schemas = schema._ids._schemaChain ? [\n        {\n            schema\n        }\n    ] : null;\n    const state = new State([], [], {\n        mainstay,\n        schemas\n    });\n    // Validate value\n    const result = exports.validate(value, schema, state, prefs);\n    // Process value and errors\n    if (cleanup) {\n        schema.$_root.untrace();\n    }\n    const error = Errors.process(result.errors, value, prefs);\n    return {\n        value: result.value,\n        error,\n        mainstay\n    };\n};\ninternals.tracer = function(schema, prefs) {\n    if (schema.$_root._tracer) {\n        return {\n            tracer: schema.$_root._tracer._register(schema)\n        };\n    }\n    if (prefs.debug) {\n        Assert(schema.$_root.trace, \"Debug mode not supported\");\n        return {\n            tracer: schema.$_root.trace()._register(schema),\n            cleanup: true\n        };\n    }\n    return {\n        tracer: internals.ignore\n    };\n};\nexports.validate = function(value, schema, state, prefs, overrides = {}) {\n    if (schema.$_terms.whens) {\n        schema = schema._generate(value, state, prefs).schema;\n    }\n    // Setup state and settings\n    if (schema._preferences) {\n        prefs = internals.prefs(schema, prefs);\n    }\n    // Cache\n    if (schema._cache && prefs.cache) {\n        const result = schema._cache.get(value);\n        state.mainstay.tracer.debug(state, \"validate\", \"cached\", !!result);\n        if (result) {\n            return result;\n        }\n    }\n    // Helpers\n    const createError = (code, local, localState)=>schema.$_createError(code, value, local, localState || state, prefs);\n    const helpers = {\n        original: value,\n        prefs,\n        schema,\n        state,\n        error: createError,\n        errorsArray: internals.errorsArray,\n        warn: (code, local, localState)=>state.mainstay.warnings.push(createError(code, local, localState)),\n        message: (messages, local)=>schema.$_createError(\"custom\", value, local, state, prefs, {\n                messages\n            })\n    };\n    // Prepare\n    state.mainstay.tracer.entry(schema, state);\n    const def = schema._definition;\n    if (def.prepare && value !== undefined && prefs.convert) {\n        const prepared = def.prepare(value, helpers);\n        if (prepared) {\n            state.mainstay.tracer.value(state, \"prepare\", value, prepared.value);\n            if (prepared.errors) {\n                return internals.finalize(prepared.value, [].concat(prepared.errors), helpers); // Prepare error always aborts early\n            }\n            value = prepared.value;\n        }\n    }\n    // Type coercion\n    if (def.coerce && value !== undefined && prefs.convert && (!def.coerce.from || def.coerce.from.includes(typeof value))) {\n        const coerced = def.coerce.method(value, helpers);\n        if (coerced) {\n            state.mainstay.tracer.value(state, \"coerced\", value, coerced.value);\n            if (coerced.errors) {\n                return internals.finalize(coerced.value, [].concat(coerced.errors), helpers); // Coerce error always aborts early\n            }\n            value = coerced.value;\n        }\n    }\n    // Empty value\n    const empty = schema._flags.empty;\n    if (empty && empty.$_match(internals.trim(value, schema), state.nest(empty), Common.defaults)) {\n        state.mainstay.tracer.value(state, \"empty\", value, undefined);\n        value = undefined;\n    }\n    // Presence requirements (required, optional, forbidden)\n    const presence = overrides.presence || schema._flags.presence || (schema._flags._endedSwitch ? null : prefs.presence);\n    if (value === undefined) {\n        if (presence === \"forbidden\") {\n            return internals.finalize(value, null, helpers);\n        }\n        if (presence === \"required\") {\n            return internals.finalize(value, [\n                schema.$_createError(\"any.required\", value, null, state, prefs)\n            ], helpers);\n        }\n        if (presence === \"optional\") {\n            if (schema._flags.default !== Common.symbols.deepDefault) {\n                return internals.finalize(value, null, helpers);\n            }\n            state.mainstay.tracer.value(state, \"default\", value, {});\n            value = {};\n        }\n    } else if (presence === \"forbidden\") {\n        return internals.finalize(value, [\n            schema.$_createError(\"any.unknown\", value, null, state, prefs)\n        ], helpers);\n    }\n    // Allowed values\n    const errors = [];\n    if (schema._valids) {\n        const match = schema._valids.get(value, state, prefs, schema._flags.insensitive);\n        if (match) {\n            if (prefs.convert) {\n                state.mainstay.tracer.value(state, \"valids\", value, match.value);\n                value = match.value;\n            }\n            state.mainstay.tracer.filter(schema, state, \"valid\", match);\n            return internals.finalize(value, null, helpers);\n        }\n        if (schema._flags.only) {\n            const report = schema.$_createError(\"any.only\", value, {\n                valids: schema._valids.values({\n                    display: true\n                })\n            }, state, prefs);\n            if (prefs.abortEarly) {\n                return internals.finalize(value, [\n                    report\n                ], helpers);\n            }\n            errors.push(report);\n        }\n    }\n    // Denied values\n    if (schema._invalids) {\n        const match = schema._invalids.get(value, state, prefs, schema._flags.insensitive);\n        if (match) {\n            state.mainstay.tracer.filter(schema, state, \"invalid\", match);\n            const report = schema.$_createError(\"any.invalid\", value, {\n                invalids: schema._invalids.values({\n                    display: true\n                })\n            }, state, prefs);\n            if (prefs.abortEarly) {\n                return internals.finalize(value, [\n                    report\n                ], helpers);\n            }\n            errors.push(report);\n        }\n    }\n    // Base type\n    if (def.validate) {\n        const base = def.validate(value, helpers);\n        if (base) {\n            state.mainstay.tracer.value(state, \"base\", value, base.value);\n            value = base.value;\n            if (base.errors) {\n                if (!Array.isArray(base.errors)) {\n                    errors.push(base.errors);\n                    return internals.finalize(value, errors, helpers); // Base error always aborts early\n                }\n                if (base.errors.length) {\n                    errors.push(...base.errors);\n                    return internals.finalize(value, errors, helpers); // Base error always aborts early\n                }\n            }\n        }\n    }\n    // Validate tests\n    if (!schema._rules.length) {\n        return internals.finalize(value, errors, helpers);\n    }\n    return internals.rules(value, errors, helpers);\n};\ninternals.rules = function(value, errors, helpers) {\n    const { schema, state, prefs } = helpers;\n    for (const rule of schema._rules){\n        const definition = schema._definition.rules[rule.method];\n        // Skip rules that are also applied in coerce step\n        if (definition.convert && prefs.convert) {\n            state.mainstay.tracer.log(schema, state, \"rule\", rule.name, \"full\");\n            continue;\n        }\n        // Resolve references\n        let ret;\n        let args = rule.args;\n        if (rule._resolve.length) {\n            args = Object.assign({}, args); // Shallow copy\n            for (const key of rule._resolve){\n                const resolver = definition.argsByName.get(key);\n                const resolved = args[key].resolve(value, state, prefs);\n                const normalized = resolver.normalize ? resolver.normalize(resolved) : resolved;\n                const invalid = Common.validateArg(normalized, null, resolver);\n                if (invalid) {\n                    ret = schema.$_createError(\"any.ref\", resolved, {\n                        arg: key,\n                        ref: args[key],\n                        reason: invalid\n                    }, state, prefs);\n                    break;\n                }\n                args[key] = normalized;\n            }\n        }\n        // Test rule\n        ret = ret || definition.validate(value, helpers, args, rule); // Use ret if already set to reference error\n        const result = internals.rule(ret, rule);\n        if (result.errors) {\n            state.mainstay.tracer.log(schema, state, \"rule\", rule.name, \"error\");\n            if (rule.warn) {\n                state.mainstay.warnings.push(...result.errors);\n                continue;\n            }\n            if (prefs.abortEarly) {\n                return internals.finalize(value, result.errors, helpers);\n            }\n            errors.push(...result.errors);\n        } else {\n            state.mainstay.tracer.log(schema, state, \"rule\", rule.name, \"pass\");\n            state.mainstay.tracer.value(state, \"rule\", value, result.value, rule.name);\n            value = result.value;\n        }\n    }\n    return internals.finalize(value, errors, helpers);\n};\ninternals.rule = function(ret, rule) {\n    if (ret instanceof Errors.Report) {\n        internals.error(ret, rule);\n        return {\n            errors: [\n                ret\n            ],\n            value: null\n        };\n    }\n    if (Array.isArray(ret) && ret[Common.symbols.errors]) {\n        ret.forEach((report)=>internals.error(report, rule));\n        return {\n            errors: ret,\n            value: null\n        };\n    }\n    return {\n        errors: null,\n        value: ret\n    };\n};\ninternals.error = function(report, rule) {\n    if (rule.message) {\n        report._setTemplate(rule.message);\n    }\n    return report;\n};\ninternals.finalize = function(value, errors, helpers) {\n    errors = errors || [];\n    const { schema, state, prefs } = helpers;\n    // Failover value\n    if (errors.length) {\n        const failover = internals.default(\"failover\", undefined, errors, helpers);\n        if (failover !== undefined) {\n            state.mainstay.tracer.value(state, \"failover\", value, failover);\n            value = failover;\n            errors = [];\n        }\n    }\n    // Error override\n    if (errors.length && schema._flags.error) {\n        if (typeof schema._flags.error === \"function\") {\n            errors = schema._flags.error(errors);\n            if (!Array.isArray(errors)) {\n                errors = [\n                    errors\n                ];\n            }\n            for (const error of errors){\n                Assert(error instanceof Error || error instanceof Errors.Report, \"error() must return an Error object\");\n            }\n        } else {\n            errors = [\n                schema._flags.error\n            ];\n        }\n    }\n    // Default\n    if (value === undefined) {\n        const defaulted = internals.default(\"default\", value, errors, helpers);\n        state.mainstay.tracer.value(state, \"default\", value, defaulted);\n        value = defaulted;\n    }\n    // Cast\n    if (schema._flags.cast && value !== undefined) {\n        const caster = schema._definition.cast[schema._flags.cast];\n        if (caster.from(value)) {\n            const casted = caster.to(value, helpers);\n            state.mainstay.tracer.value(state, \"cast\", value, casted, schema._flags.cast);\n            value = casted;\n        }\n    }\n    // Externals\n    if (schema.$_terms.externals && prefs.externals && prefs._externals !== false) {\n        for (const { method } of schema.$_terms.externals){\n            state.mainstay.externals.push({\n                method,\n                schema,\n                state,\n                label: Errors.label(schema._flags, state, prefs)\n            });\n        }\n    }\n    // Result\n    const result = {\n        value,\n        errors: errors.length ? errors : null\n    };\n    if (schema._flags.result) {\n        result.value = schema._flags.result === \"strip\" ? undefined : /* raw */ helpers.original;\n        state.mainstay.tracer.value(state, schema._flags.result, value, result.value);\n        state.shadow(value, schema._flags.result);\n    }\n    // Cache\n    if (schema._cache && prefs.cache !== false && !schema._refs.length) {\n        schema._cache.set(helpers.original, result);\n    }\n    // Artifacts\n    if (value !== undefined && !result.errors && schema._flags.artifact !== undefined) {\n        state.mainstay.artifacts = state.mainstay.artifacts || new Map();\n        if (!state.mainstay.artifacts.has(schema._flags.artifact)) {\n            state.mainstay.artifacts.set(schema._flags.artifact, []);\n        }\n        state.mainstay.artifacts.get(schema._flags.artifact).push(state.path);\n    }\n    return result;\n};\ninternals.prefs = function(schema, prefs) {\n    const isDefaultOptions = prefs === Common.defaults;\n    if (isDefaultOptions && schema._preferences[Common.symbols.prefs]) {\n        return schema._preferences[Common.symbols.prefs];\n    }\n    prefs = Common.preferences(prefs, schema._preferences);\n    if (isDefaultOptions) {\n        schema._preferences[Common.symbols.prefs] = prefs;\n    }\n    return prefs;\n};\ninternals.default = function(flag, value, errors, helpers) {\n    const { schema, state, prefs } = helpers;\n    const source = schema._flags[flag];\n    if (prefs.noDefaults || source === undefined) {\n        return value;\n    }\n    state.mainstay.tracer.log(schema, state, \"rule\", flag, \"full\");\n    if (!source) {\n        return source;\n    }\n    if (typeof source === \"function\") {\n        const args = source.length ? [\n            Clone(state.ancestors[0]),\n            helpers\n        ] : [];\n        try {\n            return source(...args);\n        } catch (err) {\n            errors.push(schema.$_createError(`any.${flag}`, null, {\n                error: err\n            }, state, prefs));\n            return;\n        }\n    }\n    if (typeof source !== \"object\") {\n        return source;\n    }\n    if (source[Common.symbols.literal]) {\n        return source.literal;\n    }\n    if (Common.isResolvable(source)) {\n        return source.resolve(value, state, prefs);\n    }\n    return Clone(source);\n};\ninternals.trim = function(value, schema) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    const trim = schema.$_getRule(\"trim\");\n    if (!trim || !trim.args.enabled) {\n        return value;\n    }\n    return value.trim();\n};\ninternals.ignore = {\n    active: false,\n    debug: Ignore,\n    entry: Ignore,\n    filter: Ignore,\n    log: Ignore,\n    resolve: Ignore,\n    value: Ignore\n};\ninternals.errorsArray = function() {\n    const errors = [];\n    errors[Common.symbols.errors] = true;\n    return errors;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvam9pL2xpYi92YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUV0QixNQUFNSSxTQUFTSixtQkFBT0EsQ0FBQztBQUN2QixNQUFNSyxTQUFTTCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNTSxRQUFRTixtQkFBT0EsQ0FBQztBQUd0QixNQUFNTyxZQUFZO0lBQ2RDLFFBQVFDLE9BQU87QUFDbkI7QUFHQUMsYUFBYSxHQUFHLFNBQVVFLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBRTFDLElBQUlDLFdBQVdYLE9BQU9ZLFFBQVE7SUFDOUIsSUFBSUYsT0FBTztRQUNQZixPQUFPZSxNQUFNRyxRQUFRLEtBQUtDLFdBQVc7UUFDckNuQixPQUFPZSxNQUFNSyxTQUFTLEtBQUtELFdBQVc7UUFDdENILFdBQVdYLE9BQU9nQixXQUFXLENBQUNoQixPQUFPWSxRQUFRLEVBQUVGO0lBQ25EO0lBRUEsTUFBTU4sU0FBU0QsVUFBVUksS0FBSyxDQUFDQyxPQUFPQyxRQUFRRTtJQUM5Q2hCLE9BQU8sQ0FBQ1MsT0FBT2EsUUFBUSxDQUFDQyxTQUFTLENBQUNDLE1BQU0sRUFBRTtJQUMxQyxNQUFNQyxVQUFVO1FBQUVaLE9BQU9KLE9BQU9JLEtBQUs7SUFBQztJQUV0QyxJQUFJSixPQUFPaUIsS0FBSyxFQUFFO1FBQ2RELFFBQVFDLEtBQUssR0FBR2pCLE9BQU9pQixLQUFLO0lBQ2hDO0lBRUEsSUFBSWpCLE9BQU9hLFFBQVEsQ0FBQ0osUUFBUSxDQUFDTSxNQUFNLEVBQUU7UUFDakNDLFFBQVFFLE9BQU8sR0FBR3JCLE9BQU9zQixPQUFPLENBQUNuQixPQUFPYSxRQUFRLENBQUNKLFFBQVE7SUFDN0Q7SUFFQSxJQUFJ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RyxJQUFJO0FBQ3JCO0FBR0F6RyxVQUFVaUYsTUFBTSxHQUFHO0lBQ2ZxRixRQUFRO0lBQ1JqSixPQUFPMUI7SUFDUFMsT0FBT1Q7SUFDUHVILFFBQVF2SDtJQUNSMkQsS0FBSzNEO0lBQ0w2SSxTQUFTN0k7SUFDVFUsT0FBT1Y7QUFDWDtBQUdBSyxVQUFVK0MsV0FBVyxHQUFHO0lBRXBCLE1BQU12QixTQUFTLEVBQUU7SUFDakJBLE1BQU0sQ0FBQzNCLE9BQU82RCxPQUFPLENBQUNsQyxNQUFNLENBQUMsR0FBRztJQUNoQyxPQUFPQTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzdGVoZXJvLy4vbm9kZV9tb2R1bGVzL2pvaS9saWIvdmFsaWRhdG9yLmpzPzViZjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NlcnQgPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9hc3NlcnQnKTtcbmNvbnN0IENsb25lID0gcmVxdWlyZSgnQGhhcGkvaG9lay9saWIvY2xvbmUnKTtcbmNvbnN0IElnbm9yZSA9IHJlcXVpcmUoJ0BoYXBpL2hvZWsvbGliL2lnbm9yZScpO1xuY29uc3QgUmVhY2ggPSByZXF1aXJlKCdAaGFwaS9ob2VrL2xpYi9yZWFjaCcpO1xuXG5jb25zdCBDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbmNvbnN0IFN0YXRlID0gcmVxdWlyZSgnLi9zdGF0ZScpO1xuXG5cbmNvbnN0IGludGVybmFscyA9IHtcbiAgICByZXN1bHQ6IFN5bWJvbCgncmVzdWx0Jylcbn07XG5cblxuZXhwb3J0cy5lbnRyeSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2NoZW1hLCBwcmVmcykge1xuXG4gICAgbGV0IHNldHRpbmdzID0gQ29tbW9uLmRlZmF1bHRzO1xuICAgIGlmIChwcmVmcykge1xuICAgICAgICBBc3NlcnQocHJlZnMud2FybmluZ3MgPT09IHVuZGVmaW5lZCwgJ0Nhbm5vdCBvdmVycmlkZSB3YXJuaW5ncyBwcmVmZXJlbmNlIGluIHN5bmNocm9ub3VzIHZhbGlkYXRpb24nKTtcbiAgICAgICAgQXNzZXJ0KHByZWZzLmFydGlmYWN0cyA9PT0gdW5kZWZpbmVkLCAnQ2Fubm90IG92ZXJyaWRlIGFydGlmYWN0cyBwcmVmZXJlbmNlIGluIHN5bmNocm9ub3VzIHZhbGlkYXRpb24nKTtcbiAgICAgICAgc2V0dGluZ3MgPSBDb21tb24ucHJlZmVyZW5jZXMoQ29tbW9uLmRlZmF1bHRzLCBwcmVmcyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gaW50ZXJuYWxzLmVudHJ5KHZhbHVlLCBzY2hlbWEsIHNldHRpbmdzKTtcbiAgICBBc3NlcnQoIXJlc3VsdC5tYWluc3RheS5leHRlcm5hbHMubGVuZ3RoLCAnU2NoZW1hIHdpdGggZXh0ZXJuYWwgcnVsZXMgbXVzdCB1c2UgdmFsaWRhdGVBc3luYygpJyk7XG4gICAgY29uc3Qgb3V0Y29tZSA9IHsgdmFsdWU6IHJlc3VsdC52YWx1ZSB9O1xuXG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICBvdXRjb21lLmVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQubWFpbnN0YXkud2FybmluZ3MubGVuZ3RoKSB7XG4gICAgICAgIG91dGNvbWUud2FybmluZyA9IEVycm9ycy5kZXRhaWxzKHJlc3VsdC5tYWluc3RheS53YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5tYWluc3RheS5kZWJ1Zykge1xuICAgICAgICBvdXRjb21lLmRlYnVnID0gcmVzdWx0Lm1haW5zdGF5LmRlYnVnO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQubWFpbnN0YXkuYXJ0aWZhY3RzKSB7XG4gICAgICAgIG91dGNvbWUuYXJ0aWZhY3RzID0gcmVzdWx0Lm1haW5zdGF5LmFydGlmYWN0cztcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Y29tZTtcbn07XG5cblxuZXhwb3J0cy5lbnRyeUFzeW5jID0gYXN5bmMgZnVuY3Rpb24gKHZhbHVlLCBzY2hlbWEsIHByZWZzKSB7XG5cbiAgICBsZXQgc2V0dGluZ3MgPSBDb21tb24uZGVmYXVsdHM7XG4gICAgaWYgKHByZWZzKSB7XG4gICAgICAgIHNldHRpbmdzID0gQ29tbW9uLnByZWZlcmVuY2VzKENvbW1vbi5kZWZhdWx0cywgcHJlZnMpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGludGVybmFscy5lbnRyeSh2YWx1ZSwgc2NoZW1hLCBzZXR0aW5ncyk7XG4gICAgY29uc3QgbWFpbnN0YXkgPSByZXN1bHQubWFpbnN0YXk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICBpZiAobWFpbnN0YXkuZGVidWcpIHtcbiAgICAgICAgICAgIHJlc3VsdC5lcnJvci5kZWJ1ZyA9IG1haW5zdGF5LmRlYnVnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgIH1cblxuICAgIGlmIChtYWluc3RheS5leHRlcm5hbHMubGVuZ3RoKSB7XG4gICAgICAgIGxldCByb290ID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBleHRlcm5hbCBvZiBtYWluc3RheS5leHRlcm5hbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBleHRlcm5hbC5zdGF0ZS5wYXRoO1xuICAgICAgICAgICAgY29uc3QgbGlua2VkID0gZXh0ZXJuYWwuc2NoZW1hLnR5cGUgPT09ICdsaW5rJyA/IG1haW5zdGF5LmxpbmtzLmdldChleHRlcm5hbC5zY2hlbWEpIDogbnVsbDtcbiAgICAgICAgICAgIGxldCBub2RlID0gcm9vdDtcbiAgICAgICAgICAgIGxldCBrZXk7XG4gICAgICAgICAgICBsZXQgcGFyZW50O1xuXG4gICAgICAgICAgICBjb25zdCBhbmNlc3RvcnMgPSBwYXRoLmxlbmd0aCA/IFtyb290XSA6IFtdO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBwYXRoLmxlbmd0aCA/IFJlYWNoKHZhbHVlLCBwYXRoKSA6IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAocGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHBhdGguc2xpY2UoMCwgLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50W3NlZ21lbnRdO1xuICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBhbmNlc3RvcnNbMF07XG4gICAgICAgICAgICAgICAgbm9kZSA9IHBhcmVudFtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUVycm9yID0gKGNvZGUsIGxvY2FsKSA9PiAobGlua2VkIHx8IGV4dGVybmFsLnNjaGVtYSkuJF9jcmVhdGVFcnJvcihjb2RlLCBub2RlLCBsb2NhbCwgZXh0ZXJuYWwuc3RhdGUsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBleHRlcm5hbC5tZXRob2Qobm9kZSwge1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWE6IGV4dGVybmFsLnNjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgbGlua2VkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZXh0ZXJuYWwuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIHByZWZzLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGNyZWF0ZUVycm9yLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcnNBcnJheTogaW50ZXJuYWxzLmVycm9yc0FycmF5LFxuICAgICAgICAgICAgICAgICAgICB3YXJuOiAoY29kZSwgbG9jYWwpID0+IG1haW5zdGF5Lndhcm5pbmdzLnB1c2goKGxpbmtlZCB8fCBleHRlcm5hbC5zY2hlbWEpLiRfY3JlYXRlRXJyb3IoY29kZSwgbm9kZSwgbG9jYWwsIGV4dGVybmFsLnN0YXRlLCBzZXR0aW5ncykpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAobWVzc2FnZXMsIGxvY2FsKSA9PiAobGlua2VkIHx8IGV4dGVybmFsLnNjaGVtYSkuJF9jcmVhdGVFcnJvcignZXh0ZXJuYWwnLCBub2RlLCBsb2NhbCwgZXh0ZXJuYWwuc3RhdGUsIHNldHRpbmdzLCB7IG1lc3NhZ2VzIH0pXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID09PSBub2RlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dCBpbnN0YW5jZW9mIEVycm9ycy5SZXBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbnN0YXkudHJhY2VyLmxvZyhleHRlcm5hbC5zY2hlbWEsIGV4dGVybmFsLnN0YXRlLCAncnVsZScsICdleHRlcm5hbCcsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChvdXRwdXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5hYm9ydEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG91dHB1dCkgJiZcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W0NvbW1vbi5zeW1ib2xzLmVycm9yc10pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbnN0YXkudHJhY2VyLmxvZyhleHRlcm5hbC5zY2hlbWEsIGV4dGVybmFsLnN0YXRlLCAncnVsZScsICdleHRlcm5hbCcsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCguLi5vdXRwdXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5hYm9ydEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbnN0YXkudHJhY2VyLnZhbHVlKGV4dGVybmFsLnN0YXRlLCAncnVsZScsIG5vZGUsIG91dHB1dCwgJ2V4dGVybmFsJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFtrZXldID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbnN0YXkudHJhY2VyLnZhbHVlKGV4dGVybmFsLnN0YXRlLCAncnVsZScsIHJvb3QsIG91dHB1dCwgJ2V4dGVybmFsJyk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3QgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5lcnJvcnMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgKz0gYCAoJHsoZXh0ZXJuYWwubGFiZWwpfSlgOyAgICAgICAvLyBDaGFuZ2UgbWVzc2FnZSB0byBpbmNsdWRlIHBhdGhcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQudmFsdWUgPSByb290O1xuXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQuZXJyb3IgPSBFcnJvcnMucHJvY2VzcyhlcnJvcnMsIHZhbHVlLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIGlmIChtYWluc3RheS5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvci5kZWJ1ZyA9IG1haW5zdGF5LmRlYnVnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNldHRpbmdzLndhcm5pbmdzICYmXG4gICAgICAgICFzZXR0aW5ncy5kZWJ1ZyAmJlxuICAgICAgICAhc2V0dGluZ3MuYXJ0aWZhY3RzKSB7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBvdXRjb21lID0geyB2YWx1ZTogcmVzdWx0LnZhbHVlIH07XG4gICAgaWYgKG1haW5zdGF5Lndhcm5pbmdzLmxlbmd0aCkge1xuICAgICAgICBvdXRjb21lLndhcm5pbmcgPSBFcnJvcnMuZGV0YWlscyhtYWluc3RheS53YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKG1haW5zdGF5LmRlYnVnKSB7XG4gICAgICAgIG91dGNvbWUuZGVidWcgPSBtYWluc3RheS5kZWJ1ZztcbiAgICB9XG5cbiAgICBpZiAobWFpbnN0YXkuYXJ0aWZhY3RzKSB7XG4gICAgICAgIG91dGNvbWUuYXJ0aWZhY3RzID0gbWFpbnN0YXkuYXJ0aWZhY3RzO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRjb21lO1xufTtcblxuXG5pbnRlcm5hbHMuTWFpbnN0YXkgPSBjbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFjZXIsIGRlYnVnLCBsaW5rcykge1xuXG4gICAgICAgIHRoaXMuZXh0ZXJuYWxzID0gW107XG4gICAgICAgIHRoaXMud2FybmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy50cmFjZXIgPSB0cmFjZXI7XG4gICAgICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgICAgICAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICAgICAgICB0aGlzLnNoYWRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXJ0aWZhY3RzID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9zbmFwc2hvdHMgPSBbXTtcbiAgICB9XG5cbiAgICBzbmFwc2hvdCgpIHtcblxuICAgICAgICB0aGlzLl9zbmFwc2hvdHMucHVzaCh7XG4gICAgICAgICAgICBleHRlcm5hbHM6IHRoaXMuZXh0ZXJuYWxzLnNsaWNlKCksXG4gICAgICAgICAgICB3YXJuaW5nczogdGhpcy53YXJuaW5ncy5zbGljZSgpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc3RvcmUoKSB7XG5cbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLl9zbmFwc2hvdHMucG9wKCk7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxzID0gc25hcHNob3QuZXh0ZXJuYWxzO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gc25hcHNob3Qud2FybmluZ3M7XG4gICAgfVxuXG4gICAgY29tbWl0KCkge1xuXG4gICAgICAgIHRoaXMuX3NuYXBzaG90cy5wb3AoKTtcbiAgICB9XG59O1xuXG5cbmludGVybmFscy5lbnRyeSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2NoZW1hLCBwcmVmcykge1xuXG4gICAgLy8gUHJlcGFyZSBzdGF0ZVxuXG4gICAgY29uc3QgeyB0cmFjZXIsIGNsZWFudXAgfSA9IGludGVybmFscy50cmFjZXIoc2NoZW1hLCBwcmVmcyk7XG4gICAgY29uc3QgZGVidWcgPSBwcmVmcy5kZWJ1ZyA/IFtdIDogbnVsbDtcbiAgICBjb25zdCBsaW5rcyA9IHNjaGVtYS5faWRzLl9zY2hlbWFDaGFpbiA/IG5ldyBNYXAoKSA6IG51bGw7XG4gICAgY29uc3QgbWFpbnN0YXkgPSBuZXcgaW50ZXJuYWxzLk1haW5zdGF5KHRyYWNlciwgZGVidWcsIGxpbmtzKTtcbiAgICBjb25zdCBzY2hlbWFzID0gc2NoZW1hLl9pZHMuX3NjaGVtYUNoYWluID8gW3sgc2NoZW1hIH1dIDogbnVsbDtcbiAgICBjb25zdCBzdGF0ZSA9IG5ldyBTdGF0ZShbXSwgW10sIHsgbWFpbnN0YXksIHNjaGVtYXMgfSk7XG5cbiAgICAvLyBWYWxpZGF0ZSB2YWx1ZVxuXG4gICAgY29uc3QgcmVzdWx0ID0gZXhwb3J0cy52YWxpZGF0ZSh2YWx1ZSwgc2NoZW1hLCBzdGF0ZSwgcHJlZnMpO1xuXG4gICAgLy8gUHJvY2VzcyB2YWx1ZSBhbmQgZXJyb3JzXG5cbiAgICBpZiAoY2xlYW51cCkge1xuICAgICAgICBzY2hlbWEuJF9yb290LnVudHJhY2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvciA9IEVycm9ycy5wcm9jZXNzKHJlc3VsdC5lcnJvcnMsIHZhbHVlLCBwcmVmcyk7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdC52YWx1ZSwgZXJyb3IsIG1haW5zdGF5IH07XG59O1xuXG5cbmludGVybmFscy50cmFjZXIgPSBmdW5jdGlvbiAoc2NoZW1hLCBwcmVmcykge1xuXG4gICAgaWYgKHNjaGVtYS4kX3Jvb3QuX3RyYWNlcikge1xuICAgICAgICByZXR1cm4geyB0cmFjZXI6IHNjaGVtYS4kX3Jvb3QuX3RyYWNlci5fcmVnaXN0ZXIoc2NoZW1hKSB9O1xuICAgIH1cblxuICAgIGlmIChwcmVmcy5kZWJ1Zykge1xuICAgICAgICBBc3NlcnQoc2NoZW1hLiRfcm9vdC50cmFjZSwgJ0RlYnVnIG1vZGUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICByZXR1cm4geyB0cmFjZXI6IHNjaGVtYS4kX3Jvb3QudHJhY2UoKS5fcmVnaXN0ZXIoc2NoZW1hKSwgY2xlYW51cDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHRyYWNlcjogaW50ZXJuYWxzLmlnbm9yZSB9O1xufTtcblxuXG5leHBvcnRzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBzY2hlbWEsIHN0YXRlLCBwcmVmcywgb3ZlcnJpZGVzID0ge30pIHtcblxuICAgIGlmIChzY2hlbWEuJF90ZXJtcy53aGVucykge1xuICAgICAgICBzY2hlbWEgPSBzY2hlbWEuX2dlbmVyYXRlKHZhbHVlLCBzdGF0ZSwgcHJlZnMpLnNjaGVtYTtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBzdGF0ZSBhbmQgc2V0dGluZ3NcblxuICAgIGlmIChzY2hlbWEuX3ByZWZlcmVuY2VzKSB7XG4gICAgICAgIHByZWZzID0gaW50ZXJuYWxzLnByZWZzKHNjaGVtYSwgcHJlZnMpO1xuICAgIH1cblxuICAgIC8vIENhY2hlXG5cbiAgICBpZiAoc2NoZW1hLl9jYWNoZSAmJlxuICAgICAgICBwcmVmcy5jYWNoZSkge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNjaGVtYS5fY2FjaGUuZ2V0KHZhbHVlKTtcbiAgICAgICAgc3RhdGUubWFpbnN0YXkudHJhY2VyLmRlYnVnKHN0YXRlLCAndmFsaWRhdGUnLCAnY2FjaGVkJywgISFyZXN1bHQpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGVscGVyc1xuXG4gICAgY29uc3QgY3JlYXRlRXJyb3IgPSAoY29kZSwgbG9jYWwsIGxvY2FsU3RhdGUpID0+IHNjaGVtYS4kX2NyZWF0ZUVycm9yKGNvZGUsIHZhbHVlLCBsb2NhbCwgbG9jYWxTdGF0ZSB8fCBzdGF0ZSwgcHJlZnMpO1xuICAgIGNvbnN0IGhlbHBlcnMgPSB7XG4gICAgICAgIG9yaWdpbmFsOiB2YWx1ZSxcbiAgICAgICAgcHJlZnMsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGVycm9yOiBjcmVhdGVFcnJvcixcbiAgICAgICAgZXJyb3JzQXJyYXk6IGludGVybmFscy5lcnJvcnNBcnJheSxcbiAgICAgICAgd2FybjogKGNvZGUsIGxvY2FsLCBsb2NhbFN0YXRlKSA9PiBzdGF0ZS5tYWluc3RheS53YXJuaW5ncy5wdXNoKGNyZWF0ZUVycm9yKGNvZGUsIGxvY2FsLCBsb2NhbFN0YXRlKSksXG4gICAgICAgIG1lc3NhZ2U6IChtZXNzYWdlcywgbG9jYWwpID0+IHNjaGVtYS4kX2NyZWF0ZUVycm9yKCdjdXN0b20nLCB2YWx1ZSwgbG9jYWwsIHN0YXRlLCBwcmVmcywgeyBtZXNzYWdlcyB9KVxuICAgIH07XG5cbiAgICAvLyBQcmVwYXJlXG5cbiAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIuZW50cnkoc2NoZW1hLCBzdGF0ZSk7XG5cbiAgICBjb25zdCBkZWYgPSBzY2hlbWEuX2RlZmluaXRpb247XG4gICAgaWYgKGRlZi5wcmVwYXJlICYmXG4gICAgICAgIHZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcHJlZnMuY29udmVydCkge1xuXG4gICAgICAgIGNvbnN0IHByZXBhcmVkID0gZGVmLnByZXBhcmUodmFsdWUsIGhlbHBlcnMpO1xuICAgICAgICBpZiAocHJlcGFyZWQpIHtcbiAgICAgICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci52YWx1ZShzdGF0ZSwgJ3ByZXBhcmUnLCB2YWx1ZSwgcHJlcGFyZWQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKHByZXBhcmVkLmVycm9ycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUocHJlcGFyZWQudmFsdWUsIFtdLmNvbmNhdChwcmVwYXJlZC5lcnJvcnMpLCBoZWxwZXJzKTsgICAgICAgICAvLyBQcmVwYXJlIGVycm9yIGFsd2F5cyBhYm9ydHMgZWFybHlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBwcmVwYXJlZC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFR5cGUgY29lcmNpb25cblxuICAgIGlmIChkZWYuY29lcmNlICYmXG4gICAgICAgIHZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcHJlZnMuY29udmVydCAmJlxuICAgICAgICAoIWRlZi5jb2VyY2UuZnJvbSB8fCBkZWYuY29lcmNlLmZyb20uaW5jbHVkZXModHlwZW9mIHZhbHVlKSkpIHtcblxuICAgICAgICBjb25zdCBjb2VyY2VkID0gZGVmLmNvZXJjZS5tZXRob2QodmFsdWUsIGhlbHBlcnMpO1xuICAgICAgICBpZiAoY29lcmNlZCkge1xuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkudHJhY2VyLnZhbHVlKHN0YXRlLCAnY29lcmNlZCcsIHZhbHVlLCBjb2VyY2VkLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjb2VyY2VkLmVycm9ycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUoY29lcmNlZC52YWx1ZSwgW10uY29uY2F0KGNvZXJjZWQuZXJyb3JzKSwgaGVscGVycyk7ICAgICAgICAgICAvLyBDb2VyY2UgZXJyb3IgYWx3YXlzIGFib3J0cyBlYXJseVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGNvZXJjZWQudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbXB0eSB2YWx1ZVxuXG4gICAgY29uc3QgZW1wdHkgPSBzY2hlbWEuX2ZsYWdzLmVtcHR5O1xuICAgIGlmIChlbXB0eSAmJlxuICAgICAgICBlbXB0eS4kX21hdGNoKGludGVybmFscy50cmltKHZhbHVlLCBzY2hlbWEpLCBzdGF0ZS5uZXN0KGVtcHR5KSwgQ29tbW9uLmRlZmF1bHRzKSkge1xuXG4gICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci52YWx1ZShzdGF0ZSwgJ2VtcHR5JywgdmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFByZXNlbmNlIHJlcXVpcmVtZW50cyAocmVxdWlyZWQsIG9wdGlvbmFsLCBmb3JiaWRkZW4pXG5cbiAgICBjb25zdCBwcmVzZW5jZSA9IG92ZXJyaWRlcy5wcmVzZW5jZSB8fCBzY2hlbWEuX2ZsYWdzLnByZXNlbmNlIHx8IChzY2hlbWEuX2ZsYWdzLl9lbmRlZFN3aXRjaCA/IG51bGwgOiBwcmVmcy5wcmVzZW5jZSk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHByZXNlbmNlID09PSAnZm9yYmlkZGVuJykge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFscy5maW5hbGl6ZSh2YWx1ZSwgbnVsbCwgaGVscGVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJlc2VuY2UgPT09ICdyZXF1aXJlZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUodmFsdWUsIFtzY2hlbWEuJF9jcmVhdGVFcnJvcignYW55LnJlcXVpcmVkJywgdmFsdWUsIG51bGwsIHN0YXRlLCBwcmVmcyldLCBoZWxwZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmVzZW5jZSA9PT0gJ29wdGlvbmFsJykge1xuICAgICAgICAgICAgaWYgKHNjaGVtYS5fZmxhZ3MuZGVmYXVsdCAhPT0gQ29tbW9uLnN5bWJvbHMuZGVlcERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzLmZpbmFsaXplKHZhbHVlLCBudWxsLCBoZWxwZXJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkudHJhY2VyLnZhbHVlKHN0YXRlLCAnZGVmYXVsdCcsIHZhbHVlLCB7fSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHByZXNlbmNlID09PSAnZm9yYmlkZGVuJykge1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxzLmZpbmFsaXplKHZhbHVlLCBbc2NoZW1hLiRfY3JlYXRlRXJyb3IoJ2FueS51bmtub3duJywgdmFsdWUsIG51bGwsIHN0YXRlLCBwcmVmcyldLCBoZWxwZXJzKTtcbiAgICB9XG5cbiAgICAvLyBBbGxvd2VkIHZhbHVlc1xuXG4gICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICBpZiAoc2NoZW1hLl92YWxpZHMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzY2hlbWEuX3ZhbGlkcy5nZXQodmFsdWUsIHN0YXRlLCBwcmVmcywgc2NoZW1hLl9mbGFncy5pbnNlbnNpdGl2ZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgaWYgKHByZWZzLmNvbnZlcnQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIudmFsdWUoc3RhdGUsICd2YWxpZHMnLCB2YWx1ZSwgbWF0Y2gudmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbWF0Y2gudmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci5maWx0ZXIoc2NoZW1hLCBzdGF0ZSwgJ3ZhbGlkJywgbWF0Y2gpO1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFscy5maW5hbGl6ZSh2YWx1ZSwgbnVsbCwgaGVscGVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2NoZW1hLl9mbGFncy5vbmx5KSB7XG4gICAgICAgICAgICBjb25zdCByZXBvcnQgPSBzY2hlbWEuJF9jcmVhdGVFcnJvcignYW55Lm9ubHknLCB2YWx1ZSwgeyB2YWxpZHM6IHNjaGVtYS5fdmFsaWRzLnZhbHVlcyh7IGRpc3BsYXk6IHRydWUgfSkgfSwgc3RhdGUsIHByZWZzKTtcbiAgICAgICAgICAgIGlmIChwcmVmcy5hYm9ydEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVybmFscy5maW5hbGl6ZSh2YWx1ZSwgW3JlcG9ydF0sIGhlbHBlcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlcnJvcnMucHVzaChyZXBvcnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVuaWVkIHZhbHVlc1xuXG4gICAgaWYgKHNjaGVtYS5faW52YWxpZHMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzY2hlbWEuX2ludmFsaWRzLmdldCh2YWx1ZSwgc3RhdGUsIHByZWZzLCBzY2hlbWEuX2ZsYWdzLmluc2Vuc2l0aXZlKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIuZmlsdGVyKHNjaGVtYSwgc3RhdGUsICdpbnZhbGlkJywgbWF0Y2gpO1xuICAgICAgICAgICAgY29uc3QgcmVwb3J0ID0gc2NoZW1hLiRfY3JlYXRlRXJyb3IoJ2FueS5pbnZhbGlkJywgdmFsdWUsIHsgaW52YWxpZHM6IHNjaGVtYS5faW52YWxpZHMudmFsdWVzKHsgZGlzcGxheTogdHJ1ZSB9KSB9LCBzdGF0ZSwgcHJlZnMpO1xuICAgICAgICAgICAgaWYgKHByZWZzLmFib3J0RWFybHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzLmZpbmFsaXplKHZhbHVlLCBbcmVwb3J0XSwgaGVscGVycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCYXNlIHR5cGVcblxuICAgIGlmIChkZWYudmFsaWRhdGUpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IGRlZi52YWxpZGF0ZSh2YWx1ZSwgaGVscGVycyk7XG4gICAgICAgIGlmIChiYXNlKSB7XG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIudmFsdWUoc3RhdGUsICdiYXNlJywgdmFsdWUsIGJhc2UudmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoYmFzZS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYmFzZS5lcnJvcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGJhc2UuZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVybmFscy5maW5hbGl6ZSh2YWx1ZSwgZXJyb3JzLCBoZWxwZXJzKTsgICAgICAgICAgLy8gQmFzZSBlcnJvciBhbHdheXMgYWJvcnRzIGVhcmx5XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJhc2UuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCguLi5iYXNlLmVycm9ycyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUodmFsdWUsIGVycm9ycywgaGVscGVycyk7ICAgICAgICAgIC8vIEJhc2UgZXJyb3IgYWx3YXlzIGFib3J0cyBlYXJseVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRlc3RzXG5cbiAgICBpZiAoIXNjaGVtYS5fcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUodmFsdWUsIGVycm9ycywgaGVscGVycyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVybmFscy5ydWxlcyh2YWx1ZSwgZXJyb3JzLCBoZWxwZXJzKTtcbn07XG5cblxuaW50ZXJuYWxzLnJ1bGVzID0gZnVuY3Rpb24gKHZhbHVlLCBlcnJvcnMsIGhlbHBlcnMpIHtcblxuICAgIGNvbnN0IHsgc2NoZW1hLCBzdGF0ZSwgcHJlZnMgfSA9IGhlbHBlcnM7XG5cbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2Ygc2NoZW1hLl9ydWxlcykge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gc2NoZW1hLl9kZWZpbml0aW9uLnJ1bGVzW3J1bGUubWV0aG9kXTtcblxuICAgICAgICAvLyBTa2lwIHJ1bGVzIHRoYXQgYXJlIGFsc28gYXBwbGllZCBpbiBjb2VyY2Ugc3RlcFxuXG4gICAgICAgIGlmIChkZWZpbml0aW9uLmNvbnZlcnQgJiZcbiAgICAgICAgICAgIHByZWZzLmNvbnZlcnQpIHtcblxuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkudHJhY2VyLmxvZyhzY2hlbWEsIHN0YXRlLCAncnVsZScsIHJ1bGUubmFtZSwgJ2Z1bGwnKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzb2x2ZSByZWZlcmVuY2VzXG5cbiAgICAgICAgbGV0IHJldDtcbiAgICAgICAgbGV0IGFyZ3MgPSBydWxlLmFyZ3M7XG4gICAgICAgIGlmIChydWxlLl9yZXNvbHZlLmxlbmd0aCkge1xuICAgICAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaGFsbG93IGNvcHlcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJ1bGUuX3Jlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGRlZmluaXRpb24uYXJnc0J5TmFtZS5nZXQoa2V5KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0gYXJnc1trZXldLnJlc29sdmUodmFsdWUsIHN0YXRlLCBwcmVmcyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHJlc29sdmVyLm5vcm1hbGl6ZSA/IHJlc29sdmVyLm5vcm1hbGl6ZShyZXNvbHZlZCkgOiByZXNvbHZlZDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWQgPSBDb21tb24udmFsaWRhdGVBcmcobm9ybWFsaXplZCwgbnVsbCwgcmVzb2x2ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IHNjaGVtYS4kX2NyZWF0ZUVycm9yKCdhbnkucmVmJywgcmVzb2x2ZWQsIHsgYXJnOiBrZXksIHJlZjogYXJnc1trZXldLCByZWFzb246IGludmFsaWQgfSwgc3RhdGUsIHByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXJnc1trZXldID0gbm9ybWFsaXplZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgcnVsZVxuXG4gICAgICAgIHJldCA9IHJldCB8fCBkZWZpbml0aW9uLnZhbGlkYXRlKHZhbHVlLCBoZWxwZXJzLCBhcmdzLCBydWxlKTsgICAgICAgICAgIC8vIFVzZSByZXQgaWYgYWxyZWFkeSBzZXQgdG8gcmVmZXJlbmNlIGVycm9yXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaW50ZXJuYWxzLnJ1bGUocmV0LCBydWxlKTtcbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci5sb2coc2NoZW1hLCBzdGF0ZSwgJ3J1bGUnLCBydWxlLm5hbWUsICdlcnJvcicpO1xuXG4gICAgICAgICAgICBpZiAocnVsZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkud2FybmluZ3MucHVzaCguLi5yZXN1bHQuZXJyb3JzKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZWZzLmFib3J0RWFybHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxzLmZpbmFsaXplKHZhbHVlLCByZXN1bHQuZXJyb3JzLCBoZWxwZXJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXJyb3JzLnB1c2goLi4ucmVzdWx0LmVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIubG9nKHNjaGVtYSwgc3RhdGUsICdydWxlJywgcnVsZS5uYW1lLCAncGFzcycpO1xuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkudHJhY2VyLnZhbHVlKHN0YXRlLCAncnVsZScsIHZhbHVlLCByZXN1bHQudmFsdWUsIHJ1bGUubmFtZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbnRlcm5hbHMuZmluYWxpemUodmFsdWUsIGVycm9ycywgaGVscGVycyk7XG59O1xuXG5cbmludGVybmFscy5ydWxlID0gZnVuY3Rpb24gKHJldCwgcnVsZSkge1xuXG4gICAgaWYgKHJldCBpbnN0YW5jZW9mIEVycm9ycy5SZXBvcnQpIHtcbiAgICAgICAgaW50ZXJuYWxzLmVycm9yKHJldCwgcnVsZSk7XG4gICAgICAgIHJldHVybiB7IGVycm9yczogW3JldF0sIHZhbHVlOiBudWxsIH07XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmV0KSAmJlxuICAgICAgICByZXRbQ29tbW9uLnN5bWJvbHMuZXJyb3JzXSkge1xuXG4gICAgICAgIHJldC5mb3JFYWNoKChyZXBvcnQpID0+IGludGVybmFscy5lcnJvcihyZXBvcnQsIHJ1bGUpKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JzOiByZXQsIHZhbHVlOiBudWxsIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZXJyb3JzOiBudWxsLCB2YWx1ZTogcmV0IH07XG59O1xuXG5cbmludGVybmFscy5lcnJvciA9IGZ1bmN0aW9uIChyZXBvcnQsIHJ1bGUpIHtcblxuICAgIGlmIChydWxlLm1lc3NhZ2UpIHtcbiAgICAgICAgcmVwb3J0Ll9zZXRUZW1wbGF0ZShydWxlLm1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiByZXBvcnQ7XG59O1xuXG5cbmludGVybmFscy5maW5hbGl6ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3JzLCBoZWxwZXJzKSB7XG5cbiAgICBlcnJvcnMgPSBlcnJvcnMgfHwgW107XG4gICAgY29uc3QgeyBzY2hlbWEsIHN0YXRlLCBwcmVmcyB9ID0gaGVscGVycztcblxuICAgIC8vIEZhaWxvdmVyIHZhbHVlXG5cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmYWlsb3ZlciA9IGludGVybmFscy5kZWZhdWx0KCdmYWlsb3ZlcicsIHVuZGVmaW5lZCwgZXJyb3JzLCBoZWxwZXJzKTtcbiAgICAgICAgaWYgKGZhaWxvdmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci52YWx1ZShzdGF0ZSwgJ2ZhaWxvdmVyJywgdmFsdWUsIGZhaWxvdmVyKTtcbiAgICAgICAgICAgIHZhbHVlID0gZmFpbG92ZXI7XG4gICAgICAgICAgICBlcnJvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVycm9yIG92ZXJyaWRlXG5cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCAmJlxuICAgICAgICBzY2hlbWEuX2ZsYWdzLmVycm9yKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuX2ZsYWdzLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBzY2hlbWEuX2ZsYWdzLmVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgIGVycm9ycyA9IFtlcnJvcnNdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVycm9yIG9mIGVycm9ycykge1xuICAgICAgICAgICAgICAgIEFzc2VydChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3JzLlJlcG9ydCwgJ2Vycm9yKCkgbXVzdCByZXR1cm4gYW4gRXJyb3Igb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBbc2NoZW1hLl9mbGFncy5lcnJvcl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBkZWZhdWx0ZWQgPSBpbnRlcm5hbHMuZGVmYXVsdCgnZGVmYXVsdCcsIHZhbHVlLCBlcnJvcnMsIGhlbHBlcnMpO1xuICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIudmFsdWUoc3RhdGUsICdkZWZhdWx0JywgdmFsdWUsIGRlZmF1bHRlZCk7XG4gICAgICAgIHZhbHVlID0gZGVmYXVsdGVkO1xuICAgIH1cblxuICAgIC8vIENhc3RcblxuICAgIGlmIChzY2hlbWEuX2ZsYWdzLmNhc3QgJiZcbiAgICAgICAgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgIGNvbnN0IGNhc3RlciA9IHNjaGVtYS5fZGVmaW5pdGlvbi5jYXN0W3NjaGVtYS5fZmxhZ3MuY2FzdF07XG4gICAgICAgIGlmIChjYXN0ZXIuZnJvbSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhc3RlZCA9IGNhc3Rlci50byh2YWx1ZSwgaGVscGVycyk7XG4gICAgICAgICAgICBzdGF0ZS5tYWluc3RheS50cmFjZXIudmFsdWUoc3RhdGUsICdjYXN0JywgdmFsdWUsIGNhc3RlZCwgc2NoZW1hLl9mbGFncy5jYXN0KTtcbiAgICAgICAgICAgIHZhbHVlID0gY2FzdGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXh0ZXJuYWxzXG5cbiAgICBpZiAoc2NoZW1hLiRfdGVybXMuZXh0ZXJuYWxzICYmXG4gICAgICAgIHByZWZzLmV4dGVybmFscyAmJlxuICAgICAgICBwcmVmcy5fZXh0ZXJuYWxzICE9PSBmYWxzZSkgeyAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZWQgZm9yIG1hdGNoaW5nXG5cbiAgICAgICAgZm9yIChjb25zdCB7IG1ldGhvZCB9IG9mIHNjaGVtYS4kX3Rlcm1zLmV4dGVybmFscykge1xuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkuZXh0ZXJuYWxzLnB1c2goeyBtZXRob2QsIHNjaGVtYSwgc3RhdGUsIGxhYmVsOiBFcnJvcnMubGFiZWwoc2NoZW1hLl9mbGFncywgc3RhdGUsIHByZWZzKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlc3VsdFxuXG4gICAgY29uc3QgcmVzdWx0ID0geyB2YWx1ZSwgZXJyb3JzOiBlcnJvcnMubGVuZ3RoID8gZXJyb3JzIDogbnVsbCB9O1xuXG4gICAgaWYgKHNjaGVtYS5fZmxhZ3MucmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IHNjaGVtYS5fZmxhZ3MucmVzdWx0ID09PSAnc3RyaXAnID8gdW5kZWZpbmVkIDogLyogcmF3ICovIGhlbHBlcnMub3JpZ2luYWw7XG4gICAgICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci52YWx1ZShzdGF0ZSwgc2NoZW1hLl9mbGFncy5yZXN1bHQsIHZhbHVlLCByZXN1bHQudmFsdWUpO1xuICAgICAgICBzdGF0ZS5zaGFkb3codmFsdWUsIHNjaGVtYS5fZmxhZ3MucmVzdWx0KTtcbiAgICB9XG5cbiAgICAvLyBDYWNoZVxuXG4gICAgaWYgKHNjaGVtYS5fY2FjaGUgJiZcbiAgICAgICAgcHJlZnMuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICFzY2hlbWEuX3JlZnMubGVuZ3RoKSB7XG5cbiAgICAgICAgc2NoZW1hLl9jYWNoZS5zZXQoaGVscGVycy5vcmlnaW5hbCwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvLyBBcnRpZmFjdHNcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICFyZXN1bHQuZXJyb3JzICYmXG4gICAgICAgIHNjaGVtYS5fZmxhZ3MuYXJ0aWZhY3QgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgIHN0YXRlLm1haW5zdGF5LmFydGlmYWN0cyA9IHN0YXRlLm1haW5zdGF5LmFydGlmYWN0cyB8fCBuZXcgTWFwKCk7XG4gICAgICAgIGlmICghc3RhdGUubWFpbnN0YXkuYXJ0aWZhY3RzLmhhcyhzY2hlbWEuX2ZsYWdzLmFydGlmYWN0KSkge1xuICAgICAgICAgICAgc3RhdGUubWFpbnN0YXkuYXJ0aWZhY3RzLnNldChzY2hlbWEuX2ZsYWdzLmFydGlmYWN0LCBbXSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5tYWluc3RheS5hcnRpZmFjdHMuZ2V0KHNjaGVtYS5fZmxhZ3MuYXJ0aWZhY3QpLnB1c2goc3RhdGUucGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuaW50ZXJuYWxzLnByZWZzID0gZnVuY3Rpb24gKHNjaGVtYSwgcHJlZnMpIHtcblxuICAgIGNvbnN0IGlzRGVmYXVsdE9wdGlvbnMgPSBwcmVmcyA9PT0gQ29tbW9uLmRlZmF1bHRzO1xuICAgIGlmIChpc0RlZmF1bHRPcHRpb25zICYmXG4gICAgICAgIHNjaGVtYS5fcHJlZmVyZW5jZXNbQ29tbW9uLnN5bWJvbHMucHJlZnNdKSB7XG5cbiAgICAgICAgcmV0dXJuIHNjaGVtYS5fcHJlZmVyZW5jZXNbQ29tbW9uLnN5bWJvbHMucHJlZnNdO1xuICAgIH1cblxuICAgIHByZWZzID0gQ29tbW9uLnByZWZlcmVuY2VzKHByZWZzLCBzY2hlbWEuX3ByZWZlcmVuY2VzKTtcbiAgICBpZiAoaXNEZWZhdWx0T3B0aW9ucykge1xuICAgICAgICBzY2hlbWEuX3ByZWZlcmVuY2VzW0NvbW1vbi5zeW1ib2xzLnByZWZzXSA9IHByZWZzO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmcztcbn07XG5cblxuaW50ZXJuYWxzLmRlZmF1bHQgPSBmdW5jdGlvbiAoZmxhZywgdmFsdWUsIGVycm9ycywgaGVscGVycykge1xuXG4gICAgY29uc3QgeyBzY2hlbWEsIHN0YXRlLCBwcmVmcyB9ID0gaGVscGVycztcbiAgICBjb25zdCBzb3VyY2UgPSBzY2hlbWEuX2ZsYWdzW2ZsYWddO1xuICAgIGlmIChwcmVmcy5ub0RlZmF1bHRzIHx8XG4gICAgICAgIHNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHN0YXRlLm1haW5zdGF5LnRyYWNlci5sb2coc2NoZW1hLCBzdGF0ZSwgJ3J1bGUnLCBmbGFnLCAnZnVsbCcpO1xuXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBhcmdzID0gc291cmNlLmxlbmd0aCA/IFtDbG9uZShzdGF0ZS5hbmNlc3RvcnNbMF0pLCBoZWxwZXJzXSA6IFtdO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHNjaGVtYS4kX2NyZWF0ZUVycm9yKGBhbnkuJHtmbGFnfWAsIG51bGwsIHsgZXJyb3I6IGVyciB9LCBzdGF0ZSwgcHJlZnMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2VbQ29tbW9uLnN5bWJvbHMubGl0ZXJhbF0pIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saXRlcmFsO1xuICAgIH1cblxuICAgIGlmIChDb21tb24uaXNSZXNvbHZhYmxlKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5yZXNvbHZlKHZhbHVlLCBzdGF0ZSwgcHJlZnMpO1xuICAgIH1cblxuICAgIHJldHVybiBDbG9uZShzb3VyY2UpO1xufTtcblxuXG5pbnRlcm5hbHMudHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2NoZW1hKSB7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgdHJpbSA9IHNjaGVtYS4kX2dldFJ1bGUoJ3RyaW0nKTtcbiAgICBpZiAoIXRyaW0gfHxcbiAgICAgICAgIXRyaW0uYXJncy5lbmFibGVkKSB7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50cmltKCk7XG59O1xuXG5cbmludGVybmFscy5pZ25vcmUgPSB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBkZWJ1ZzogSWdub3JlLFxuICAgIGVudHJ5OiBJZ25vcmUsXG4gICAgZmlsdGVyOiBJZ25vcmUsXG4gICAgbG9nOiBJZ25vcmUsXG4gICAgcmVzb2x2ZTogSWdub3JlLFxuICAgIHZhbHVlOiBJZ25vcmVcbn07XG5cblxuaW50ZXJuYWxzLmVycm9yc0FycmF5ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgZXJyb3JzW0NvbW1vbi5zeW1ib2xzLmVycm9yc10gPSB0cnVlO1xuICAgIHJldHVybiBlcnJvcnM7XG59O1xuIl0sIm5hbWVzIjpbIkFzc2VydCIsInJlcXVpcmUiLCJDbG9uZSIsIklnbm9yZSIsIlJlYWNoIiwiQ29tbW9uIiwiRXJyb3JzIiwiU3RhdGUiLCJpbnRlcm5hbHMiLCJyZXN1bHQiLCJTeW1ib2wiLCJleHBvcnRzIiwiZW50cnkiLCJ2YWx1ZSIsInNjaGVtYSIsInByZWZzIiwic2V0dGluZ3MiLCJkZWZhdWx0cyIsIndhcm5pbmdzIiwidW5kZWZpbmVkIiwiYXJ0aWZhY3RzIiwicHJlZmVyZW5jZXMiLCJtYWluc3RheSIsImV4dGVybmFscyIsImxlbmd0aCIsIm91dGNvbWUiLCJlcnJvciIsIndhcm5pbmciLCJkZXRhaWxzIiwiZGVidWciLCJlbnRyeUFzeW5jIiwicm9vdCIsImVycm9ycyIsImV4dGVybmFsIiwicGF0aCIsInN0YXRlIiwibGlua2VkIiwidHlwZSIsImxpbmtzIiwiZ2V0Iiwibm9kZSIsImtleSIsInBhcmVudCIsImFuY2VzdG9ycyIsIm9yaWdpbmFsIiwiY3VycmVudCIsInNlZ21lbnQiLCJzbGljZSIsInVuc2hpZnQiLCJjcmVhdGVFcnJvciIsImNvZGUiLCJsb2NhbCIsIiRfY3JlYXRlRXJyb3IiLCJvdXRwdXQiLCJtZXRob2QiLCJlcnJvcnNBcnJheSIsIndhcm4iLCJwdXNoIiwibWVzc2FnZSIsIm1lc3NhZ2VzIiwiUmVwb3J0IiwidHJhY2VyIiwibG9nIiwiYWJvcnRFYXJseSIsIkFycmF5IiwiaXNBcnJheSIsInN5bWJvbHMiLCJlcnIiLCJsYWJlbCIsInByb2Nlc3MiLCJNYWluc3RheSIsImNvbnN0cnVjdG9yIiwic2hhZG93IiwiX3NuYXBzaG90cyIsInNuYXBzaG90IiwicmVzdG9yZSIsInBvcCIsImNvbW1pdCIsImNsZWFudXAiLCJfaWRzIiwiX3NjaGVtYUNoYWluIiwiTWFwIiwic2NoZW1hcyIsInZhbGlkYXRlIiwiJF9yb290IiwidW50cmFjZSIsIl90cmFjZXIiLCJfcmVnaXN0ZXIiLCJ0cmFjZSIsImlnbm9yZSIsIm92ZXJyaWRlcyIsIiRfdGVybXMiLCJ3aGVucyIsIl9nZW5lcmF0ZSIsIl9wcmVmZXJlbmNlcyIsIl9jYWNoZSIsImNhY2hlIiwibG9jYWxTdGF0ZSIsImhlbHBlcnMiLCJkZWYiLCJfZGVmaW5pdGlvbiIsInByZXBhcmUiLCJjb252ZXJ0IiwicHJlcGFyZWQiLCJmaW5hbGl6ZSIsImNvbmNhdCIsImNvZXJjZSIsImZyb20iLCJpbmNsdWRlcyIsImNvZXJjZWQiLCJlbXB0eSIsIl9mbGFncyIsIiRfbWF0Y2giLCJ0cmltIiwibmVzdCIsInByZXNlbmNlIiwiX2VuZGVkU3dpdGNoIiwiZGVmYXVsdCIsImRlZXBEZWZhdWx0IiwiX3ZhbGlkcyIsIm1hdGNoIiwiaW5zZW5zaXRpdmUiLCJmaWx0ZXIiLCJvbmx5IiwicmVwb3J0IiwidmFsaWRzIiwidmFsdWVzIiwiZGlzcGxheSIsIl9pbnZhbGlkcyIsImludmFsaWRzIiwiYmFzZSIsIl9ydWxlcyIsInJ1bGVzIiwicnVsZSIsImRlZmluaXRpb24iLCJuYW1lIiwicmV0IiwiYXJncyIsIl9yZXNvbHZlIiwiT2JqZWN0IiwiYXNzaWduIiwicmVzb2x2ZXIiLCJhcmdzQnlOYW1lIiwicmVzb2x2ZWQiLCJyZXNvbHZlIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZSIsImludmFsaWQiLCJ2YWxpZGF0ZUFyZyIsImFyZyIsInJlZiIsInJlYXNvbiIsImZvckVhY2giLCJfc2V0VGVtcGxhdGUiLCJmYWlsb3ZlciIsIkVycm9yIiwiZGVmYXVsdGVkIiwiY2FzdCIsImNhc3RlciIsImNhc3RlZCIsInRvIiwiX2V4dGVybmFscyIsIl9yZWZzIiwic2V0IiwiYXJ0aWZhY3QiLCJoYXMiLCJpc0RlZmF1bHRPcHRpb25zIiwiZmxhZyIsInNvdXJjZSIsIm5vRGVmYXVsdHMiLCJsaXRlcmFsIiwiaXNSZXNvbHZhYmxlIiwiJF9nZXRSdWxlIiwiZW5hYmxlZCIsImFjdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/lib/values.js":
/*!****************************************!*\
  !*** ./node_modules/joi/lib/values.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Assert = __webpack_require__(/*! @hapi/hoek/lib/assert */ \"(rsc)/./node_modules/@hapi/hoek/lib/assert.js\");\nconst DeepEqual = __webpack_require__(/*! @hapi/hoek/lib/deepEqual */ \"(rsc)/./node_modules/@hapi/hoek/lib/deepEqual.js\");\nconst Common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/joi/lib/common.js\");\nconst internals = {};\nmodule.exports = internals.Values = class {\n    constructor(values, refs){\n        this._values = new Set(values);\n        this._refs = new Set(refs);\n        this._lowercase = internals.lowercases(values);\n        this._override = false;\n    }\n    get length() {\n        return this._values.size + this._refs.size;\n    }\n    add(value, refs) {\n        // Reference\n        if (Common.isResolvable(value)) {\n            if (!this._refs.has(value)) {\n                this._refs.add(value);\n                if (refs) {\n                    refs.register(value);\n                }\n            }\n            return;\n        }\n        // Value\n        if (!this.has(value, null, null, false)) {\n            this._values.add(value);\n            if (typeof value === \"string\") {\n                this._lowercase.set(value.toLowerCase(), value);\n            }\n        }\n    }\n    static merge(target, source, remove) {\n        target = target || new internals.Values();\n        if (source) {\n            if (source._override) {\n                return source.clone();\n            }\n            for (const item of [\n                ...source._values,\n                ...source._refs\n            ]){\n                target.add(item);\n            }\n        }\n        if (remove) {\n            for (const item of [\n                ...remove._values,\n                ...remove._refs\n            ]){\n                target.remove(item);\n            }\n        }\n        return target.length ? target : null;\n    }\n    remove(value) {\n        // Reference\n        if (Common.isResolvable(value)) {\n            this._refs.delete(value);\n            return;\n        }\n        // Value\n        this._values.delete(value);\n        if (typeof value === \"string\") {\n            this._lowercase.delete(value.toLowerCase());\n        }\n    }\n    has(value, state, prefs, insensitive) {\n        return !!this.get(value, state, prefs, insensitive);\n    }\n    get(value, state, prefs, insensitive) {\n        if (!this.length) {\n            return false;\n        }\n        // Simple match\n        if (this._values.has(value)) {\n            return {\n                value\n            };\n        }\n        // Case insensitive string match\n        if (typeof value === \"string\" && value && insensitive) {\n            const found = this._lowercase.get(value.toLowerCase());\n            if (found) {\n                return {\n                    value: found\n                };\n            }\n        }\n        if (!this._refs.size && typeof value !== \"object\") {\n            return false;\n        }\n        // Objects\n        if (typeof value === \"object\") {\n            for (const item of this._values){\n                if (DeepEqual(item, value)) {\n                    return {\n                        value: item\n                    };\n                }\n            }\n        }\n        // References\n        if (state) {\n            for (const ref of this._refs){\n                const resolved = ref.resolve(value, state, prefs, null, {\n                    in: true\n                });\n                if (resolved === undefined) {\n                    continue;\n                }\n                const items = !ref.in || typeof resolved !== \"object\" ? [\n                    resolved\n                ] : Array.isArray(resolved) ? resolved : Object.keys(resolved);\n                for (const item of items){\n                    if (typeof item !== typeof value) {\n                        continue;\n                    }\n                    if (insensitive && value && typeof value === \"string\") {\n                        if (item.toLowerCase() === value.toLowerCase()) {\n                            return {\n                                value: item,\n                                ref\n                            };\n                        }\n                    } else {\n                        if (DeepEqual(item, value)) {\n                            return {\n                                value: item,\n                                ref\n                            };\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    override() {\n        this._override = true;\n    }\n    values(options) {\n        if (options && options.display) {\n            const values = [];\n            for (const item of [\n                ...this._values,\n                ...this._refs\n            ]){\n                if (item !== undefined) {\n                    values.push(item);\n                }\n            }\n            return values;\n        }\n        return Array.from([\n            ...this._values,\n            ...this._refs\n        ]);\n    }\n    clone() {\n        const set = new internals.Values(this._values, this._refs);\n        set._override = this._override;\n        return set;\n    }\n    concat(source) {\n        Assert(!source._override, \"Cannot concat override set of values\");\n        const set = new internals.Values([\n            ...this._values,\n            ...source._values\n        ], [\n            ...this._refs,\n            ...source._refs\n        ]);\n        set._override = this._override;\n        return set;\n    }\n    describe() {\n        const normalized = [];\n        if (this._override) {\n            normalized.push({\n                override: true\n            });\n        }\n        for (const value of this._values.values()){\n            normalized.push(value && typeof value === \"object\" ? {\n                value\n            } : value);\n        }\n        for (const value of this._refs.values()){\n            normalized.push(value.describe());\n        }\n        return normalized;\n    }\n};\ninternals.Values.prototype[Common.symbols.values] = true;\n// Aliases\ninternals.Values.prototype.slice = internals.Values.prototype.clone;\n// Helpers\ninternals.lowercases = function(from) {\n    const map = new Map();\n    if (from) {\n        for (const value of from){\n            if (typeof value === \"string\") {\n                map.set(value.toLowerCase(), value);\n            }\n        }\n    }\n    return map;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/joi/lib/values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/joi/package.json":
/*!***************************************!*\
  !*** ./node_modules/joi/package.json ***!
  \***************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"joi","description":"Object schema validation","version":"17.13.3","repository":"git://github.com/hapijs/joi","main":"lib/index.js","types":"lib/index.d.ts","browser":"dist/joi-browser.min.js","files":["lib/**/*","dist/*"],"keywords":["schema","validation"],"dependencies":{"@hapi/hoek":"^9.3.0","@hapi/topo":"^5.1.0","@sideway/address":"^4.1.5","@sideway/formula":"^3.0.1","@sideway/pinpoint":"^2.0.0"},"devDependencies":{"@hapi/bourne":"2.x.x","@hapi/code":"8.x.x","@hapi/joi-legacy-test":"npm:@hapi/joi@15.x.x","@hapi/lab":"^25.1.3","@types/node":"^14.18.63","typescript":"4.3.x"},"scripts":{"prepublishOnly":"cd browser && npm install && npm run build","test":"lab -t 100 -a @hapi/code -L -Y","test-cov-html":"lab -r html -o coverage.html -a @hapi/code"},"license":"BSD-3-Clause"}');

/***/ })

};
;